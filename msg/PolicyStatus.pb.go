// Code generated by protoc-gen-go.
// source: PolicyStatus.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ID/Key from policy
type PolicyStatus_PolicyStatusMessageType int32

const (
	PolicyStatus_UNUSED_POLICY_STATUS  PolicyStatus_PolicyStatusMessageType = 0
	PolicyStatus_EXE_TRACKING_STARTED  PolicyStatus_PolicyStatusMessageType = 1
	PolicyStatus_EXE_TRACKING_STOPPED  PolicyStatus_PolicyStatusMessageType = 2
	PolicyStatus_EXE_IN_COMPLIANCE     PolicyStatus_PolicyStatusMessageType = 3
	PolicyStatus_EXE_OUT_OF_COMPLIANCE PolicyStatus_PolicyStatusMessageType = 4
	PolicyStatus_EXE_IS_RUNNING        PolicyStatus_PolicyStatusMessageType = 5
	PolicyStatus_EXE_ISNOT_RUNNING     PolicyStatus_PolicyStatusMessageType = 6
)

var PolicyStatus_PolicyStatusMessageType_name = map[int32]string{
	0: "UNUSED_POLICY_STATUS",
	1: "EXE_TRACKING_STARTED",
	2: "EXE_TRACKING_STOPPED",
	3: "EXE_IN_COMPLIANCE",
	4: "EXE_OUT_OF_COMPLIANCE",
	5: "EXE_IS_RUNNING",
	6: "EXE_ISNOT_RUNNING",
}
var PolicyStatus_PolicyStatusMessageType_value = map[string]int32{
	"UNUSED_POLICY_STATUS":  0,
	"EXE_TRACKING_STARTED":  1,
	"EXE_TRACKING_STOPPED":  2,
	"EXE_IN_COMPLIANCE":     3,
	"EXE_OUT_OF_COMPLIANCE": 4,
	"EXE_IS_RUNNING":        5,
	"EXE_ISNOT_RUNNING":     6,
}

func (x PolicyStatus_PolicyStatusMessageType) Enum() *PolicyStatus_PolicyStatusMessageType {
	p := new(PolicyStatus_PolicyStatusMessageType)
	*p = x
	return p
}
func (x PolicyStatus_PolicyStatusMessageType) String() string {
	return proto.EnumName(PolicyStatus_PolicyStatusMessageType_name, int32(x))
}
func (x *PolicyStatus_PolicyStatusMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PolicyStatus_PolicyStatusMessageType_value, data, "PolicyStatus_PolicyStatusMessageType")
	if err != nil {
		return err
	}
	*x = PolicyStatus_PolicyStatusMessageType(value)
	return nil
}
func (PolicyStatus_PolicyStatusMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor66, []int{0, 0}
}

type PolicyStatus struct {
	// The UTC time (as known to the server) when the Policy status was generated
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// The unique identifier of the policy set this message is being sent in regards to
	PoliciesIdentifier *int64 `protobuf:"varint,3,req,name=policiesIdentifier" json:"policiesIdentifier,omitempty"`
	// Unique value to send as part of the compliance message to know which policy we are reporting on to the server
	PolicyID     *uint64                               `protobuf:"varint,4,req,name=policyID" json:"policyID,omitempty"`
	PolicyStatus *PolicyStatus_PolicyStatusMessageType `protobuf:"varint,5,opt,name=policyStatus,enum=PolicyStatus_PolicyStatusMessageType,def=0" json:"policyStatus,omitempty"`
	// Filename for this message
	Filename *string `protobuf:"bytes,6,opt,name=filename" json:"filename,omitempty"`
	// optional full image path of filename (only for EXE_IN_COMPLIANCE)
	Imagefilepath *string `protobuf:"bytes,7,opt,name=imagefilepath" json:"imagefilepath,omitempty"`
	// optional MD5 of the file (only for EXE_IN_COMPLIANCE and filled out in process inventory)
	ImageFileMD5 *string `protobuf:"bytes,8,opt,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	// Key/ID from Policy for server use
	DataID *uint64 `protobuf:"varint,9,opt,name=dataID" json:"dataID,omitempty"`
	SiteId *string `protobuf:"bytes,10,opt,name=siteId" json:"siteId,omitempty"`
	Uuid   *string `protobuf:"bytes,11,opt,name=uuid" json:"uuid,omitempty"`
	// This is the method specified in the rule we are reporting on.  You can use this to
	// know if you are dealing with a forbidden process running or a required process
	// not running
	Method           *string `protobuf:"bytes,12,opt,name=method" json:"method,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PolicyStatus) Reset()                    { *m = PolicyStatus{} }
func (m *PolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*PolicyStatus) ProtoMessage()               {}
func (*PolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptor66, []int{0} }

const Default_PolicyStatus_PolicyStatus PolicyStatus_PolicyStatusMessageType = PolicyStatus_UNUSED_POLICY_STATUS

func (m *PolicyStatus) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *PolicyStatus) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *PolicyStatus) GetPoliciesIdentifier() int64 {
	if m != nil && m.PoliciesIdentifier != nil {
		return *m.PoliciesIdentifier
	}
	return 0
}

func (m *PolicyStatus) GetPolicyID() uint64 {
	if m != nil && m.PolicyID != nil {
		return *m.PolicyID
	}
	return 0
}

func (m *PolicyStatus) GetPolicyStatus() PolicyStatus_PolicyStatusMessageType {
	if m != nil && m.PolicyStatus != nil {
		return *m.PolicyStatus
	}
	return Default_PolicyStatus_PolicyStatus
}

func (m *PolicyStatus) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *PolicyStatus) GetImagefilepath() string {
	if m != nil && m.Imagefilepath != nil {
		return *m.Imagefilepath
	}
	return ""
}

func (m *PolicyStatus) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *PolicyStatus) GetDataID() uint64 {
	if m != nil && m.DataID != nil {
		return *m.DataID
	}
	return 0
}

func (m *PolicyStatus) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *PolicyStatus) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *PolicyStatus) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func init() {
	proto.RegisterType((*PolicyStatus)(nil), "PolicyStatus")
	proto.RegisterEnum("PolicyStatus_PolicyStatusMessageType", PolicyStatus_PolicyStatusMessageType_name, PolicyStatus_PolicyStatusMessageType_value)
}

var fileDescriptor66 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x49, 0xe2, 0x86, 0xf8, 0xe2, 0x46, 0x66, 0x68, 0x61, 0x28, 0x9b, 0x28, 0x12, 0x52,
	0x57, 0x5e, 0x20, 0xb1, 0x80, 0x5d, 0xfc, 0xd3, 0xca, 0xa2, 0xb1, 0x4d, 0x6c, 0x4b, 0xb0, 0xb2,
	0xac, 0x78, 0xd2, 0x8e, 0x14, 0xc7, 0x96, 0x67, 0x82, 0x14, 0x96, 0x3c, 0x07, 0xaf, 0xc1, 0x1b,
	0xf0, 0x60, 0xdc, 0x99, 0x48, 0x95, 0x91, 0xd2, 0xe5, 0xfd, 0xce, 0x99, 0x73, 0xef, 0x91, 0x06,
	0x48, 0xd2, 0x6c, 0xf9, 0xfa, 0x90, 0xca, 0x52, 0xee, 0x85, 0xd3, 0x76, 0x8d, 0x6c, 0xae, 0x90,
	0x09, 0x79, 0xdf, 0x31, 0x91, 0x1d, 0x5a, 0x76, 0x64, 0xf3, 0xdf, 0x06, 0x58, 0x7d, 0x2b, 0x99,
	0x81, 0x29, 0x79, 0xcd, 0x70, 0xaa, 0x5b, 0x3a, 0x98, 0x0d, 0xaf, 0x47, 0xee, 0xf9, 0xaf, 0x3f,
	0x54, 0x43, 0xa1, 0x20, 0x79, 0x07, 0x66, 0x79, 0xcf, 0x76, 0xf2, 0x36, 0x0f, 0x7d, 0x3a, 0x44,
	0x87, 0xe9, 0x4e, 0xd0, 0x61, 0xec, 0xf7, 0xbc, 0x22, 0x57, 0x40, 0x5a, 0x15, 0xc7, 0x99, 0x08,
	0x2b, 0x34, 0xf1, 0x0d, 0x67, 0x1d, 0x1d, 0xa9, 0x1c, 0x62, 0xc3, 0x44, 0x6b, 0x07, 0x7c, 0x67,
	0x20, 0x31, 0xc8, 0x57, 0xb0, 0xda, 0xde, 0x72, 0x7a, 0x36, 0x1b, 0x5c, 0x4f, 0x3f, 0xbc, 0x77,
	0xfe, 0x3b, 0xbe, 0x3f, 0x2c, 0x99, 0x10, 0xb8, 0x5c, 0x15, 0xf8, 0x7c, 0x91, 0x47, 0x79, 0x1a,
	0xf8, 0x45, 0x12, 0xdf, 0x85, 0xde, 0xf7, 0x22, 0xcd, 0x16, 0x59, 0x9e, 0xaa, 0x25, 0x1b, 0xbe,
	0x65, 0xbb, 0xb2, 0x66, 0x74, 0x8c, 0x71, 0x26, 0xb9, 0x84, 0x73, 0x5e, 0xe3, 0x23, 0x85, 0xdb,
	0x52, 0x3e, 0xd0, 0xe7, 0x1a, 0x5f, 0x80, 0xa5, 0xf1, 0x0d, 0xe2, 0xa5, 0xff, 0x91, 0x4e, 0x34,
	0x9d, 0xc2, 0xb8, 0x2a, 0x65, 0x89, 0x17, 0x9a, 0x38, 0x1b, 0x6a, 0x16, 0x5c, 0xb2, 0xb0, 0xa2,
	0xa0, 0xf5, 0xd7, 0xa0, 0x7b, 0xd2, 0x17, 0x6a, 0xea, 0xf5, 0x46, 0x5f, 0xcd, 0xe4, 0x43, 0x53,
	0x51, 0x4b, 0x29, 0xf3, 0xbf, 0x03, 0x78, 0xf3, 0xc4, 0xe1, 0x84, 0xc2, 0xc9, 0xd3, 0xed, 0x67,
	0x4a, 0x09, 0xbe, 0x05, 0x45, 0xb6, 0x5a, 0x78, 0x5f, 0xc2, 0xe8, 0x56, 0x09, 0xab, 0x2c, 0xf0,
	0xed, 0xc1, 0x09, 0x25, 0x4e, 0x12, 0x54, 0x86, 0x58, 0xef, 0xa5, 0x52, 0xc2, 0xa8, 0xf0, 0xe2,
	0x65, 0x72, 0x17, 0x2e, 0x22, 0x2f, 0xb0, 0x47, 0xe4, 0x2d, 0x5c, 0x2a, 0x1c, 0xe7, 0x59, 0x11,
	0xdf, 0xf4, 0x25, 0x83, 0x10, 0x98, 0xea, 0x17, 0x69, 0xb1, 0xca, 0xa3, 0x08, 0xd3, 0xec, 0xb3,
	0xc7, 0x94, 0x34, 0x8a, 0xb3, 0x47, 0x3c, 0x76, 0x3f, 0xc1, 0x7c, 0xdd, 0xd4, 0xce, 0x4f, 0xbe,
	0x91, 0x6c, 0xe7, 0x08, 0xd6, 0xfd, 0x60, 0xdd, 0xf1, 0xe7, 0xac, 0x9b, 0xad, 0x53, 0x1f, 0x4b,
	0xb9, 0xaf, 0x4e, 0x34, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xea, 0x82, 0x87, 0x19, 0x82, 0x02,
	0x00, 0x00,
}
