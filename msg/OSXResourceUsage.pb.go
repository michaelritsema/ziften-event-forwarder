// Code generated by protoc-gen-go.
// source: OSXResourceUsage.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Message reporting average resource utilization (divided in normal and spike bands) for a windows or web app
// The foreground windows is polled one or more times during the reporting interval and the aggregated metrics are included in this message
type OSXResourceUsage struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Process Identifier (matching the field defined in the Settings message)
	PID *int32 `protobuf:"varint,3,opt,name=PID,def=0" json:"PID,omitempty"`
	// How much time the process was active in milliseconds
	TimeActive *uint64 `protobuf:"varint,4,req,name=timeActive" json:"timeActive,omitempty"`
	// The fully qualified filename of the binary: i.e. '/Application/osxagent.app/osxagent'
	ImageFilepath *string `protobuf:"bytes,5,opt,name=imageFilepath" json:"imageFilepath,omitempty"`
	// User (using this app) Information
	AccountName *string `protobuf:"bytes,6,req,name=accountName" json:"accountName,omitempty"`
	DomainName  *string `protobuf:"bytes,7,req,name=domainName" json:"domainName,omitempty"`
	// How CPU-time was consumed by the foreground process
	TotalProcessorTime *uint64 `protobuf:"varint,8,req,name=totalProcessorTime" json:"totalProcessorTime,omitempty"`
	// Total system available CPU time (includes IDLE) ... so for 2 processors is aproximately twice the actual elapsed time
	TotalSystemProcessorTime *uint64 `protobuf:"varint,9,req,name=totalSystemProcessorTime" json:"totalSystemProcessorTime,omitempty"`
	// How much time the CPU was idle
	TotalSystemIdleTime *uint64 `protobuf:"varint,10,req,name=totalSystemIdleTime" json:"totalSystemIdleTime,omitempty"`
	// Same 3 data-points for foreground-process and background CPU spikes
	// How much time was spent by the foreground process in the CPU during spikes ... We are referring here to spikes of CPU-usage of the foreground process
	TotalSpikeTimeForegroundProcess *uint64 `protobuf:"varint,11,req,name=totalSpikeTimeForegroundProcess" json:"totalSpikeTimeForegroundProcess,omitempty"`
	TotalSpikeProcessorTime         *uint64 `protobuf:"varint,12,req,name=totalSpikeProcessorTime" json:"totalSpikeProcessorTime,omitempty"`
	// How much CPU-time was consumed by background processes during spikes ... We are referring here to (interference) spikes of CPU-usage of background processes
	TotalSpikeTimeBackgroundProcesses *uint64 `protobuf:"varint,13,req,name=totalSpikeTimeBackgroundProcesses" json:"totalSpikeTimeBackgroundProcesses,omitempty"`
	TotalSpikeSystemProcessorTime     *uint64 `protobuf:"varint,14,req,name=totalSpikeSystemProcessorTime" json:"totalSpikeSystemProcessorTime,omitempty"`
	TotalSpikeSystemIdleTime          *uint64 `protobuf:"varint,15,req,name=totalSpikeSystemIdleTime" json:"totalSpikeSystemIdleTime,omitempty"`
	// Memory Information: Memory-metrics for foreground process and all-background processes
	NumTimesSpikeBackgroundMemorySampled *uint32  `protobuf:"varint,16,req,name=numTimesSpikeBackgroundMemorySampled" json:"numTimesSpikeBackgroundMemorySampled,omitempty"`
	AvgSpikePhysicalMemoryAvailable      *float64 `protobuf:"fixed64,17,req,name=avgSpikePhysicalMemoryAvailable" json:"avgSpikePhysicalMemoryAvailable,omitempty"`
	// The number of times foreground process working set size or system memory usage was polled
	NumTimesMemorySampled      *uint32  `protobuf:"varint,18,req,name=numTimesMemorySampled" json:"numTimesMemorySampled,omitempty"`
	AvgWorkingSetSize          *float64 `protobuf:"fixed64,19,req,name=avgWorkingSetSize" json:"avgWorkingSetSize,omitempty"`
	AvgPhysicalMemoryAvailable *float64 `protobuf:"fixed64,20,req,name=avgPhysicalMemoryAvailable" json:"avgPhysicalMemoryAvailable,omitempty"`
	AvgPhysicalMemoryTotal     *float64 `protobuf:"fixed64,21,req,name=avgPhysicalMemoryTotal" json:"avgPhysicalMemoryTotal,omitempty"`
	// MD5 for imageFilepath
	ImageFileMD5 *string `protobuf:"bytes,22,opt,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	//
	// Network Information: Network-metrics for foreground process and background processes
	// Network bytes sent/received during <timeActive>
	SentBytes           *uint64 `protobuf:"varint,23,req,name=sentBytes" json:"sentBytes,omitempty"`
	ReceivedBytes       *uint64 `protobuf:"varint,24,req,name=receivedBytes" json:"receivedBytes,omitempty"`
	SystemSentBytes     *uint64 `protobuf:"varint,25,req,name=systemSentBytes" json:"systemSentBytes,omitempty"`
	SystemReceivedBytes *uint64 `protobuf:"varint,26,req,name=systemReceivedBytes" json:"systemReceivedBytes,omitempty"`
	// Only for foreground process we also keep track of elapsed (really means the transactionTime). Time between 1st send and last receive.
	ElapsedTime *int64 `protobuf:"varint,27,req,name=elapsedTime" json:"elapsedTime,omitempty"`
	// The number of sends-receive used to compute the sum response-time metric
	NumberSampledResponseTimes *uint32 `protobuf:"varint,28,req,name=numberSampledResponseTimes" json:"numberSampledResponseTimes,omitempty"`
	// Sum of the time between the send and the first receive to that send
	SumResponseTime *uint64 `protobuf:"varint,29,req,name=sumResponseTime" json:"sumResponseTime,omitempty"`
	// Network Bytes sent/received during foreground process Network spikes
	SpikeSentBytes         *uint64 `protobuf:"varint,30,req,name=spikeSentBytes" json:"spikeSentBytes,omitempty"`
	SpikeReceivedBytes     *uint64 `protobuf:"varint,31,req,name=spikeReceivedBytes" json:"spikeReceivedBytes,omitempty"`
	SpikeNetworkTimeSystem *uint64 `protobuf:"varint,32,req,name=spikeNetworkTimeSystem" json:"spikeNetworkTimeSystem,omitempty"`
	// Network Bytes sent/received during background process Network spikes
	SpikeSystemSentBytes              *uint64  `protobuf:"varint,33,req,name=spikeSystemSentBytes" json:"spikeSystemSentBytes,omitempty"`
	SpikesSystemReceivedBytes         *uint64  `protobuf:"varint,34,req,name=spikesSystemReceivedBytes" json:"spikesSystemReceivedBytes,omitempty"`
	NumTimesSpikeWorkingSetSampled    *uint32  `protobuf:"varint,35,req,name=numTimesSpikeWorkingSetSampled" json:"numTimesSpikeWorkingSetSampled,omitempty"`
	SpikeNetworkTimeForegroundProcess *uint64  `protobuf:"varint,36,req,name=spikeNetworkTimeForegroundProcess" json:"spikeNetworkTimeForegroundProcess,omitempty"`
	AvgSpikeWorkingSetSize            *float64 `protobuf:"fixed64,37,req,name=avgSpikeWorkingSetSize" json:"avgSpikeWorkingSetSize,omitempty"`
	//
	// IO Information: IO-metrics for foreground process and background processes
	//
	// Total IO Bytes read/written during <timeActive>
	ReadTransferCount        *uint64 `protobuf:"varint,38,req,name=readTransferCount" json:"readTransferCount,omitempty"`
	WriteTransferCount       *uint64 `protobuf:"varint,39,req,name=writeTransferCount" json:"writeTransferCount,omitempty"`
	SystemReadTransferCount  *uint64 `protobuf:"varint,40,req,name=systemReadTransferCount" json:"systemReadTransferCount,omitempty"`
	SystemWriteTransferCount *uint64 `protobuf:"varint,41,req,name=systemWriteTransferCount" json:"systemWriteTransferCount,omitempty"`
	// IO Bytes read/written during foreground process IO spikes
	SpikeIOTimeForegroundProcess *uint64 `protobuf:"varint,42,req,name=spikeIOTimeForegroundProcess" json:"spikeIOTimeForegroundProcess,omitempty"`
	SpikeReadTransferCount       *uint64 `protobuf:"varint,43,req,name=spikeReadTransferCount" json:"spikeReadTransferCount,omitempty"`
	SpikeWriteTransferCount      *uint64 `protobuf:"varint,44,req,name=spikeWriteTransferCount" json:"spikeWriteTransferCount,omitempty"`
	// IO Bytes read/written during background processes IO spikes
	SpikeIOTimeSystem             *uint64 `protobuf:"varint,45,req,name=spikeIOTimeSystem" json:"spikeIOTimeSystem,omitempty"`
	SpikeSystemReadTransferCount  *uint64 `protobuf:"varint,46,req,name=spikeSystemReadTransferCount" json:"spikeSystemReadTransferCount,omitempty"`
	SpikeSystemWriteTransferCount *uint64 `protobuf:"varint,47,req,name=spikeSystemWriteTransferCount" json:"spikeSystemWriteTransferCount,omitempty"`
	SiteId                        *string `protobuf:"bytes,48,opt,name=siteId" json:"siteId,omitempty"`
	Uuid                          *string `protobuf:"bytes,49,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized              []byte  `json:"-"`
}

func (m *OSXResourceUsage) Reset()                    { *m = OSXResourceUsage{} }
func (m *OSXResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*OSXResourceUsage) ProtoMessage()               {}
func (*OSXResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor53, []int{0} }

const Default_OSXResourceUsage_PID int32 = 0

func (m *OSXResourceUsage) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *OSXResourceUsage) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *OSXResourceUsage) GetPID() int32 {
	if m != nil && m.PID != nil {
		return *m.PID
	}
	return Default_OSXResourceUsage_PID
}

func (m *OSXResourceUsage) GetTimeActive() uint64 {
	if m != nil && m.TimeActive != nil {
		return *m.TimeActive
	}
	return 0
}

func (m *OSXResourceUsage) GetImageFilepath() string {
	if m != nil && m.ImageFilepath != nil {
		return *m.ImageFilepath
	}
	return ""
}

func (m *OSXResourceUsage) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *OSXResourceUsage) GetDomainName() string {
	if m != nil && m.DomainName != nil {
		return *m.DomainName
	}
	return ""
}

func (m *OSXResourceUsage) GetTotalProcessorTime() uint64 {
	if m != nil && m.TotalProcessorTime != nil {
		return *m.TotalProcessorTime
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSystemProcessorTime() uint64 {
	if m != nil && m.TotalSystemProcessorTime != nil {
		return *m.TotalSystemProcessorTime
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSystemIdleTime() uint64 {
	if m != nil && m.TotalSystemIdleTime != nil {
		return *m.TotalSystemIdleTime
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSpikeTimeForegroundProcess() uint64 {
	if m != nil && m.TotalSpikeTimeForegroundProcess != nil {
		return *m.TotalSpikeTimeForegroundProcess
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSpikeProcessorTime() uint64 {
	if m != nil && m.TotalSpikeProcessorTime != nil {
		return *m.TotalSpikeProcessorTime
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSpikeTimeBackgroundProcesses() uint64 {
	if m != nil && m.TotalSpikeTimeBackgroundProcesses != nil {
		return *m.TotalSpikeTimeBackgroundProcesses
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSpikeSystemProcessorTime() uint64 {
	if m != nil && m.TotalSpikeSystemProcessorTime != nil {
		return *m.TotalSpikeSystemProcessorTime
	}
	return 0
}

func (m *OSXResourceUsage) GetTotalSpikeSystemIdleTime() uint64 {
	if m != nil && m.TotalSpikeSystemIdleTime != nil {
		return *m.TotalSpikeSystemIdleTime
	}
	return 0
}

func (m *OSXResourceUsage) GetNumTimesSpikeBackgroundMemorySampled() uint32 {
	if m != nil && m.NumTimesSpikeBackgroundMemorySampled != nil {
		return *m.NumTimesSpikeBackgroundMemorySampled
	}
	return 0
}

func (m *OSXResourceUsage) GetAvgSpikePhysicalMemoryAvailable() float64 {
	if m != nil && m.AvgSpikePhysicalMemoryAvailable != nil {
		return *m.AvgSpikePhysicalMemoryAvailable
	}
	return 0
}

func (m *OSXResourceUsage) GetNumTimesMemorySampled() uint32 {
	if m != nil && m.NumTimesMemorySampled != nil {
		return *m.NumTimesMemorySampled
	}
	return 0
}

func (m *OSXResourceUsage) GetAvgWorkingSetSize() float64 {
	if m != nil && m.AvgWorkingSetSize != nil {
		return *m.AvgWorkingSetSize
	}
	return 0
}

func (m *OSXResourceUsage) GetAvgPhysicalMemoryAvailable() float64 {
	if m != nil && m.AvgPhysicalMemoryAvailable != nil {
		return *m.AvgPhysicalMemoryAvailable
	}
	return 0
}

func (m *OSXResourceUsage) GetAvgPhysicalMemoryTotal() float64 {
	if m != nil && m.AvgPhysicalMemoryTotal != nil {
		return *m.AvgPhysicalMemoryTotal
	}
	return 0
}

func (m *OSXResourceUsage) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *OSXResourceUsage) GetSentBytes() uint64 {
	if m != nil && m.SentBytes != nil {
		return *m.SentBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetReceivedBytes() uint64 {
	if m != nil && m.ReceivedBytes != nil {
		return *m.ReceivedBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetSystemSentBytes() uint64 {
	if m != nil && m.SystemSentBytes != nil {
		return *m.SystemSentBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetSystemReceivedBytes() uint64 {
	if m != nil && m.SystemReceivedBytes != nil {
		return *m.SystemReceivedBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetElapsedTime() int64 {
	if m != nil && m.ElapsedTime != nil {
		return *m.ElapsedTime
	}
	return 0
}

func (m *OSXResourceUsage) GetNumberSampledResponseTimes() uint32 {
	if m != nil && m.NumberSampledResponseTimes != nil {
		return *m.NumberSampledResponseTimes
	}
	return 0
}

func (m *OSXResourceUsage) GetSumResponseTime() uint64 {
	if m != nil && m.SumResponseTime != nil {
		return *m.SumResponseTime
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeSentBytes() uint64 {
	if m != nil && m.SpikeSentBytes != nil {
		return *m.SpikeSentBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeReceivedBytes() uint64 {
	if m != nil && m.SpikeReceivedBytes != nil {
		return *m.SpikeReceivedBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeNetworkTimeSystem() uint64 {
	if m != nil && m.SpikeNetworkTimeSystem != nil {
		return *m.SpikeNetworkTimeSystem
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeSystemSentBytes() uint64 {
	if m != nil && m.SpikeSystemSentBytes != nil {
		return *m.SpikeSystemSentBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikesSystemReceivedBytes() uint64 {
	if m != nil && m.SpikesSystemReceivedBytes != nil {
		return *m.SpikesSystemReceivedBytes
	}
	return 0
}

func (m *OSXResourceUsage) GetNumTimesSpikeWorkingSetSampled() uint32 {
	if m != nil && m.NumTimesSpikeWorkingSetSampled != nil {
		return *m.NumTimesSpikeWorkingSetSampled
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeNetworkTimeForegroundProcess() uint64 {
	if m != nil && m.SpikeNetworkTimeForegroundProcess != nil {
		return *m.SpikeNetworkTimeForegroundProcess
	}
	return 0
}

func (m *OSXResourceUsage) GetAvgSpikeWorkingSetSize() float64 {
	if m != nil && m.AvgSpikeWorkingSetSize != nil {
		return *m.AvgSpikeWorkingSetSize
	}
	return 0
}

func (m *OSXResourceUsage) GetReadTransferCount() uint64 {
	if m != nil && m.ReadTransferCount != nil {
		return *m.ReadTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetWriteTransferCount() uint64 {
	if m != nil && m.WriteTransferCount != nil {
		return *m.WriteTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSystemReadTransferCount() uint64 {
	if m != nil && m.SystemReadTransferCount != nil {
		return *m.SystemReadTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSystemWriteTransferCount() uint64 {
	if m != nil && m.SystemWriteTransferCount != nil {
		return *m.SystemWriteTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeIOTimeForegroundProcess() uint64 {
	if m != nil && m.SpikeIOTimeForegroundProcess != nil {
		return *m.SpikeIOTimeForegroundProcess
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeReadTransferCount() uint64 {
	if m != nil && m.SpikeReadTransferCount != nil {
		return *m.SpikeReadTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeWriteTransferCount() uint64 {
	if m != nil && m.SpikeWriteTransferCount != nil {
		return *m.SpikeWriteTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeIOTimeSystem() uint64 {
	if m != nil && m.SpikeIOTimeSystem != nil {
		return *m.SpikeIOTimeSystem
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeSystemReadTransferCount() uint64 {
	if m != nil && m.SpikeSystemReadTransferCount != nil {
		return *m.SpikeSystemReadTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSpikeSystemWriteTransferCount() uint64 {
	if m != nil && m.SpikeSystemWriteTransferCount != nil {
		return *m.SpikeSystemWriteTransferCount
	}
	return 0
}

func (m *OSXResourceUsage) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *OSXResourceUsage) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*OSXResourceUsage)(nil), "OSXResourceUsage")
}

var fileDescriptor53 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x95, 0xcb, 0x52, 0x1a, 0x4d,
	0x14, 0xc7, 0x0b, 0x6f, 0x9f, 0x1c, 0x05, 0x75, 0x54, 0x68, 0xf1, 0x86, 0x7c, 0x5e, 0x13, 0x43,
	0xcc, 0x22, 0x9b, 0x54, 0x65, 0x21, 0xb1, 0x4c, 0xb1, 0xf0, 0x52, 0x0e, 0x96, 0xd9, 0xb6, 0x33,
	0x47, 0x9c, 0x72, 0x66, 0x9a, 0xea, 0x6e, 0xb0, 0x70, 0x99, 0x77, 0xca, 0x1b, 0xe5, 0x41, 0xd2,
	0x73, 0x86, 0x01, 0x06, 0x70, 0xc9, 0xf9, 0xff, 0xfa, 0xdf, 0xe7, 0xd6, 0x03, 0x14, 0x6e, 0xec,
	0x5f, 0x77, 0xa8, 0x44, 0x5b, 0x3a, 0x78, 0xaf, 0x78, 0x13, 0xab, 0x2d, 0x29, 0xb4, 0x28, 0x59,
	0xb7, 0x42, 0xe9, 0xa6, 0x44, 0xd5, 0xe8, 0xb6, 0x7a, 0xb1, 0xca, 0xdf, 0x05, 0x58, 0x1e, 0xc5,
	0xad, 0x32, 0x64, 0xb5, 0x17, 0xa0, 0xad, 0x79, 0xd0, 0x62, 0x99, 0xf2, 0xd4, 0xf1, 0x74, 0x2d,
	0xf7, 0xfb, 0x0f, 0xa3, 0xa0, 0x8a, 0x82, 0xd6, 0x26, 0x64, 0x0d, 0x18, 0xea, 0x9f, 0xf7, 0xf5,
	0x0b, 0x36, 0x65, 0x88, 0x6c, 0x6d, 0xde, 0x10, 0x33, 0xed, 0xb6, 0xe7, 0x5a, 0x79, 0x98, 0xbe,
	0x35, 0xe1, 0xe9, 0x72, 0xe6, 0x78, 0xf6, 0x5b, 0xe6, 0xcc, 0xb2, 0x00, 0xa2, 0x93, 0xe7, 0x8e,
	0xf6, 0x3a, 0xc8, 0x66, 0x0c, 0x3d, 0x63, 0xad, 0x43, 0xce, 0x0b, 0x8c, 0xc5, 0xa5, 0xe7, 0x63,
	0x8b, 0xeb, 0x67, 0x36, 0x6b, 0xe8, 0xac, 0xb5, 0x0a, 0x0b, 0xdc, 0x71, 0x44, 0x3b, 0xd4, 0xd7,
	0x3c, 0x40, 0x36, 0x17, 0x39, 0x47, 0xe7, 0x5d, 0x11, 0x70, 0x2f, 0xa4, 0xd8, 0x7f, 0x14, 0x2b,
	0x81, 0xa5, 0x85, 0xe6, 0xfe, 0xad, 0x14, 0x0e, 0x2a, 0x25, 0x64, 0xc3, 0xdc, 0xc0, 0xe6, 0xc9,
	0xbb, 0x0c, 0x8c, 0x34, 0xbb, 0xab, 0x34, 0x06, 0x69, 0x22, 0x4b, 0xc4, 0x26, 0xac, 0x0e, 0x11,
	0x75, 0xd7, 0x47, 0x12, 0x81, 0xc4, 0x23, 0xd8, 0x8d, 0xc5, 0x96, 0xf7, 0x42, 0xf1, 0x4b, 0x21,
	0xb1, 0x29, 0x4d, 0x52, 0x6e, 0xcf, 0x8b, 0x2d, 0x10, 0xb8, 0x0b, 0xc5, 0x01, 0x98, 0xbe, 0x66,
	0x91, 0x80, 0x13, 0xd8, 0x4b, 0x3b, 0xd5, 0xb8, 0xf3, 0x92, 0x72, 0x42, 0xc5, 0x72, 0x84, 0x1e,
	0xc0, 0xf6, 0x00, 0x9d, 0x94, 0x78, 0x3e, 0x5d, 0xda, 0x00, 0xeb, 0x67, 0xbf, 0x44, 0xc4, 0x29,
	0xec, 0x87, 0xed, 0x20, 0x0a, 0x28, 0x82, 0x06, 0x57, 0x5e, 0x61, 0x20, 0x64, 0xd7, 0x36, 0xe3,
	0xf3, 0xd1, 0x65, 0xcb, 0x86, 0xce, 0x45, 0xb5, 0xf2, 0x4e, 0x33, 0x2e, 0xe0, 0xb9, 0xab, 0x3c,
	0x87, 0xfb, 0x31, 0x76, 0xde, 0xe1, 0x9e, 0xcf, 0x1f, 0x7d, 0x64, 0x2b, 0x06, 0xcc, 0x58, 0xdb,
	0xb0, 0x9e, 0xd8, 0xa6, 0x7d, 0x2c, 0xf2, 0xd9, 0x80, 0x15, 0xe3, 0xf3, 0x20, 0xe4, 0x8b, 0x17,
	0x36, 0x6d, 0xd4, 0xb6, 0xf7, 0x86, 0x6c, 0x95, 0x4e, 0x56, 0xa0, 0x64, 0xa4, 0xf7, 0xdc, 0xd7,
	0x88, 0xd9, 0x81, 0xc2, 0x18, 0xd3, 0x88, 0xea, 0x64, 0xeb, 0xa4, 0xaf, 0xc1, 0x62, 0x7f, 0x5b,
	0xae, 0x2e, 0xbe, 0xb2, 0x02, 0x2d, 0xcb, 0x0a, 0x64, 0x95, 0xd9, 0xc1, 0x5a, 0x57, 0x9b, 0x36,
	0x16, 0x93, 0xb5, 0x92, 0xe8, 0xa0, 0xd9, 0x33, 0x37, 0x0e, 0x33, 0x0a, 0x17, 0x61, 0x49, 0x51,
	0xb3, 0xec, 0x3e, 0xbf, 0x91, 0x2c, 0x42, 0x2c, 0xdc, 0xa5, 0x4e, 0x95, 0x48, 0x34, 0xcb, 0x88,
	0x3e, 0x6f, 0x29, 0x74, 0xa9, 0xbf, 0x9b, 0xd1, 0x43, 0x88, 0xca, 0x31, 0x8d, 0x78, 0x44, 0xd9,
	0x6b, 0x80, 0x79, 0x39, 0x2d, 0x11, 0x2a, 0x1a, 0x81, 0x62, 0x5b, 0xd4, 0x8d, 0xe8, 0xba, 0x76,
	0x30, 0xac, 0xb0, 0x6d, 0x72, 0x2c, 0x40, 0x5e, 0xd1, 0xe4, 0xfa, 0x69, 0xec, 0x50, 0xdc, 0x6c,
	0x33, 0xc5, 0xd3, 0x59, 0xec, 0x92, 0x66, 0x7a, 0x43, 0xda, 0x35, 0xea, 0x57, 0xd3, 0xdf, 0xc8,
	0x2d, 0x1e, 0x3c, 0x2b, 0x93, 0xbe, 0x05, 0x6b, 0x6a, 0xb0, 0x0d, 0x03, 0xe7, 0x3d, 0x52, 0xf7,
	0x60, 0x83, 0x54, 0x65, 0x4f, 0x28, 0xb3, 0x42, 0xc8, 0x21, 0xec, 0xa4, 0x36, 0x66, 0x68, 0x8a,
	0xbd, 0x19, 0xff, 0x4f, 0x55, 0x99, 0x6d, 0x1e, 0x4d, 0x64, 0xfc, 0x65, 0xec, 0x27, 0x39, 0x27,
	0x6b, 0x35, 0xb2, 0x13, 0x07, 0x34, 0x4f, 0xb3, 0x2e, 0x12, 0xb9, 0xdb, 0x90, 0x3c, 0x54, 0x4f,
	0x28, 0x7f, 0x44, 0x0f, 0x9e, 0x1d, 0x26, 0xad, 0x78, 0x95, 0x9e, 0xc6, 0xb4, 0x76, 0x94, 0x3c,
	0xb8, 0x64, 0x5a, 0xa3, 0x87, 0x8f, 0x93, 0xe7, 0x11, 0x03, 0x0f, 0xe3, 0x16, 0x27, 0x44, 0xec,
	0xc3, 0x16, 0x15, 0x51, 0xbf, 0x99, 0x9c, 0xff, 0x87, 0x54, 0xcf, 0xc7, 0xef, 0xf9, 0xd8, 0x4f,
	0x84, 0x8a, 0x1b, 0xbf, 0xe6, 0x94, 0x00, 0x53, 0xe0, 0xd0, 0x35, 0xbd, 0x79, 0x7d, 0x4a, 0x65,
	0x60, 0xbf, 0x53, 0x49, 0x35, 0xf9, 0x1e, 0x0c, 0x51, 0x13, 0xee, 0xf9, 0x4c, 0x58, 0x1e, 0xe6,
	0x94, 0x91, 0xea, 0x2e, 0x3b, 0xa3, 0x27, 0x51, 0x00, 0xfa, 0x04, 0xb3, 0x2f, 0xd1, 0xaf, 0xc1,
	0x27, 0xb9, 0xf6, 0x1d, 0x2a, 0x8e, 0x08, 0xaa, 0x6f, 0xde, 0x93, 0xc6, 0xb0, 0xaa, 0x50, 0x76,
	0x50, 0xc6, 0xff, 0x00, 0x8e, 0xf0, 0xab, 0x66, 0xf2, 0xd1, 0x77, 0xbf, 0x56, 0x1c, 0xfd, 0x27,
	0xb8, 0x8a, 0x85, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xf9, 0xaf, 0x0a, 0x52, 0x06, 0x00,
	0x00,
}
