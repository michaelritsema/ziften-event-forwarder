// Code generated by protoc-gen-go.
// source: AgentSettings.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Assuming that networkConnect_IsEnabled is non-zero, then this is how we judge when we send NetworkConnect
// messages to the server
type AgentSettings_NetworkConnectSendType int32

const (
	AgentSettings_FirstSeenBoot  AgentSettings_NetworkConnectSendType = 0
	AgentSettings_FirstSeenToday AgentSettings_NetworkConnectSendType = 1
	AgentSettings_FirstSeenEver  AgentSettings_NetworkConnectSendType = 2
	AgentSettings_AllConnections AgentSettings_NetworkConnectSendType = 3
)

var AgentSettings_NetworkConnectSendType_name = map[int32]string{
	0: "FirstSeenBoot",
	1: "FirstSeenToday",
	2: "FirstSeenEver",
	3: "AllConnections",
}
var AgentSettings_NetworkConnectSendType_value = map[string]int32{
	"FirstSeenBoot":  0,
	"FirstSeenToday": 1,
	"FirstSeenEver":  2,
	"AllConnections": 3,
}

func (x AgentSettings_NetworkConnectSendType) Enum() *AgentSettings_NetworkConnectSendType {
	p := new(AgentSettings_NetworkConnectSendType)
	*p = x
	return p
}
func (x AgentSettings_NetworkConnectSendType) String() string {
	return proto.EnumName(AgentSettings_NetworkConnectSendType_name, int32(x))
}
func (x *AgentSettings_NetworkConnectSendType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AgentSettings_NetworkConnectSendType_value, data, "AgentSettings_NetworkConnectSendType")
	if err != nil {
		return err
	}
	*x = AgentSettings_NetworkConnectSendType(value)
	return nil
}
func (AgentSettings_NetworkConnectSendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

// Message requiring an agent to change one of its settings
type AgentSettings struct {
	// The UTC time that the message was produced by the server.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// This is a code value passed to the Agent so it can pass back in the response and the server
	// can know WHICH setting was applied.  Suggested this be a DB index value.
	ServerJobID *int64 `protobuf:"varint,42,opt,name=serverJobID" json:"serverJobID,omitempty"`
	// Boot Time Settings
	// Must have <NumberIntervals> periods <IntervalLength> long with CPU usage below <CPUUsageThreshold>% to consider boot completed
	BootTime_NumberIntervals         *int32 `protobuf:"varint,2,opt,name=bootTime_NumberIntervals" json:"bootTime_NumberIntervals,omitempty"`
	BootTime_CPUUsageThreshold       *int32 `protobuf:"varint,3,opt,name=bootTime_CPUUsageThreshold" json:"bootTime_CPUUsageThreshold,omitempty"`
	BootTime_IntervalLength          *int32 `protobuf:"varint,4,opt,name=bootTime_IntervalLength" json:"bootTime_IntervalLength,omitempty"`
	BootTime_SystemIsBootingCriteria *int32 `protobuf:"varint,5,opt,name=bootTime_SystemIsBootingCriteria" json:"bootTime_SystemIsBootingCriteria,omitempty"`
	// App Start Settings
	// Must have <NumberPeriods> periods <PollingInterval> long with CPU usage below <MaxPercentCPU>% to consider the app started
	// How many intervals to consider to determine if app has started
	Appstart_NumberPeriods *int32 `protobuf:"varint,6,opt,name=appstart_NumberPeriods" json:"appstart_NumberPeriods,omitempty"`
	// Percent CPU utilization
	Appstart_MaxPercentCPU *int32 `protobuf:"varint,8,opt,name=appstart_MaxPercentCPU" json:"appstart_MaxPercentCPU,omitempty"`
	// Polling Interval in milliseconds
	Appstart_PollingInterval *int32 `protobuf:"varint,9,opt,name=appstart_PollingInterval" json:"appstart_PollingInterval,omitempty"`
	// Reporting interval in milliseconds
	Appstart_ReportingInterval *int32 `protobuf:"varint,10,opt,name=appstart_ReportingInterval" json:"appstart_ReportingInterval,omitempty"`
	// Resource Usage Settings
	Resourceusage_PollingInterval *int32 `protobuf:"varint,11,opt,name=resourceusage_PollingInterval" json:"resourceusage_PollingInterval,omitempty"`
	// Reporting interval in milliseconds
	Resourceusage_ReportingInterval *int32 `protobuf:"varint,12,opt,name=resourceusage_ReportingInterval" json:"resourceusage_ReportingInterval,omitempty"`
	// If mouse and keyboard are not used for <resourceusage_IdleTimeout> milliseconds, we no longer consider the user active
	Resourceusage_IdleTimeout *int32 `protobuf:"varint,13,opt,name=resourceusage_IdleTimeout" json:"resourceusage_IdleTimeout,omitempty"`
	// Spikes thresholds - CPU and memory are percentages while IO and network are expressed in KBs
	Resourceusage_SpikeCPUUsageForegroundProcess     *int32 `protobuf:"varint,14,opt,name=resourceusage_SpikeCPUUsageForegroundProcess" json:"resourceusage_SpikeCPUUsageForegroundProcess,omitempty"`
	Resourceusage_SpikeCPUUsageBackground            *int32 `protobuf:"varint,15,opt,name=resourceusage_SpikeCPUUsageBackground" json:"resourceusage_SpikeCPUUsageBackground,omitempty"`
	Resourceusage_SpikeMemoryUsageForegroundProcess  *int32 `protobuf:"varint,16,opt,name=resourceusage_SpikeMemoryUsageForegroundProcess" json:"resourceusage_SpikeMemoryUsageForegroundProcess,omitempty"`
	Resourceusage_SpikeMemoryUsageBackground         *int32 `protobuf:"varint,17,opt,name=resourceusage_SpikeMemoryUsageBackground" json:"resourceusage_SpikeMemoryUsageBackground,omitempty"`
	Resourceusage_SpikeIOUsageForegroundProcess      *int32 `protobuf:"varint,18,opt,name=resourceusage_SpikeIOUsageForegroundProcess" json:"resourceusage_SpikeIOUsageForegroundProcess,omitempty"`
	Resourceusage_SpikeIOUsageBackground             *int32 `protobuf:"varint,19,opt,name=resourceusage_SpikeIOUsageBackground" json:"resourceusage_SpikeIOUsageBackground,omitempty"`
	Resourceusage_SpikeNetworkUsageForegroundProcess *int32 `protobuf:"varint,20,opt,name=resourceusage_SpikeNetworkUsageForegroundProcess" json:"resourceusage_SpikeNetworkUsageForegroundProcess,omitempty"`
	Resourceusage_SpikeNetworkUsageBackground        *int32 `protobuf:"varint,21,opt,name=resourceusage_SpikeNetworkUsageBackground" json:"resourceusage_SpikeNetworkUsageBackground,omitempty"`
	// Agent Heartbeat Settings
	Agentstatus_HeartbeatFrequency *int32 `protobuf:"varint,22,opt,name=agentstatus_HeartbeatFrequency" json:"agentstatus_HeartbeatFrequency,omitempty"`
	// DRA Settings
	DRA_IsEnabled *int32 `protobuf:"varint,23,opt,name=DRA_IsEnabled" json:"DRA_IsEnabled,omitempty"`
	// The CPU Usage that a process needs to exceed to cause Ziften to lower its process priority CPUUsageCausingBeginAdjustment=20
	DRA_CPUUsageCausingBeginAdjustment *int32 `protobuf:"varint,24,opt,name=DRA_CPUUsageCausingBeginAdjustment" json:"DRA_CPUUsageCausingBeginAdjustment,omitempty"`
	// The CPU Usage that an interfering process needs to return to cause Ziften to reset its initial process priority
	DRA_CPUUsageCausingEndAdjustment *int32 `protobuf:"varint,25,opt,name=DRA_CPUUsageCausingEndAdjustment" json:"DRA_CPUUsageCausingEndAdjustment,omitempty"`
	// Exclude system services from restraint
	DRA_ExcludedSystemServices *int32 `protobuf:"varint,26,opt,name=DRA_ExcludedSystemServices" json:"DRA_ExcludedSystemServices,omitempty"`
	// Exclude the following list of processes from restraint
	DRA_ExcludedProcesses *string `protobuf:"bytes,27,opt,name=DRA_ExcludedProcesses" json:"DRA_ExcludedProcesses,omitempty"`
	//
	// Web-Apps Definitions
	//
	// Some examples:
	//
	// Need to provide IP addresses matching WebApp ID
	// Must list here the reverse decimal of the IP addresses that define the Web App
	// To get IP address: 'ping hostname' gives you the IP address for the hostname
	// Pinging bigip-sales.oracle.com [141.146.137.38] with 32 bytes of data
	// http://www.allredroster.com/iptodec.htm gives you the decimal for and IP address
	// so you can obtain the reverse decimal if you input '38.137.146.141' (the reverse of the IP address above) -> HTTP://646550157
	// IP1=646550157
	// IP2=850703680
	// Oracle CRM Test
	//
	// IP:				141.146.137.38
	// Reverse Decimal:  646550157
	// Hostname:			bigip-sales.oracle.com
	//
	// IP:				64.181.180.50
	// Reverse Decimal:	850703680
	// Hostname:			bigip-secure-slsomxvga-crmondemand.oracle.com
	//
	// IP1=134873098
	// https://dogwood.ziften.local/development/ Test
	//
	// IP:				10.0.10.8 (Pinging dogwood.ziften.local [10.0.10.8] with 32 bytes of data)
	// Reverse Decimal:	HTTP://134873098 ( http://www.allredroster.com/iptodec.htm: Converts 8.10.0.10 TO HTTP://134873098 )
	WebappId          []int32 `protobuf:"varint,29,rep,name=webapp_id" json:"webapp_id,omitempty"`
	WebappIpaddress   []int32 `protobuf:"varint,30,rep,name=webapp_ipaddress" json:"webapp_ipaddress,omitempty"`
	WebappNetmaskBits []int32 `protobuf:"varint,41,rep,name=webapp_netmask_bits" json:"webapp_netmask_bits,omitempty"`
	// We only report processEnd event for processes running for at least <ProcessEndAgeThreshold> milliseconds
	ProcessEndAgeThreshold *uint32 `protobuf:"varint,31,opt,name=processEndAgeThreshold" json:"processEndAgeThreshold,omitempty"`
	// Network Usage Component Reporting interval in milliseconds
	NetworkUsageReportingInterval *uint32 `protobuf:"varint,32,opt,name=networkUsageReportingInterval" json:"networkUsageReportingInterval,omitempty"`
	// Whether or not the Network Usage By PID Is Enabled. Default is OFF
	NetworkUsagePID_IsEnabled *uint32 `protobuf:"varint,33,opt,name=networkUsagePID_IsEnabled" json:"networkUsagePID_IsEnabled,omitempty"`
	// Max size of the broker queue.
	// When the broker's queue fills up (size > N) , the broker will delete the N oldest messages and enqueue a DataLoss message to the server.
	// Default is 4500
	BrokerMaxQueueSize *uint32 `protobuf:"varint,34,opt,name=brokerMaxQueueSize" json:"brokerMaxQueueSize,omitempty"`
	// / Returns the number of milliseconds of idle time after which the broker can dequeue and process messages.
	// / The broker does not operate when user is active to yield all the possible machine resources to the end-user.
	// Default is 60000 (60SECONDS)
	BrokerIdleTimeout *uint32 `protobuf:"varint,35,opt,name=brokerIdleTimeout" json:"brokerIdleTimeout,omitempty"`
	// How frequently the broker calls the server to check if there are any messages for him. Default is 900000 (15MINUTES)
	BrokerDequeueFrequency *uint32 `protobuf:"varint,36,opt,name=brokerDequeueFrequency" json:"brokerDequeueFrequency,omitempty"`
	// Interfering Process Reporting interval in milliseconds
	InterferingProcessReportingInterval *uint32 `protobuf:"varint,37,opt,name=interferingProcessReportingInterval" json:"interferingProcessReportingInterval,omitempty"`
	// Whether or not the Network Connect Is Enabled. Default is OFF
	NetworkConnect_IsEnabled *uint32                               `protobuf:"varint,38,opt,name=networkConnect_IsEnabled" json:"networkConnect_IsEnabled,omitempty"`
	SiteId                   *string                               `protobuf:"bytes,39,opt,name=siteId" json:"siteId,omitempty"`
	NetworkConnectSendState  *AgentSettings_NetworkConnectSendType `protobuf:"varint,40,opt,name=networkConnectSendState,enum=AgentSettings_NetworkConnectSendType" json:"networkConnectSendState,omitempty"`
	// The number of seconds between ProcessSummary messages.
	// Note: Zero (0) means do NOT send ProcessSummary
	ProcessSummaryInterval *int32  `protobuf:"varint,43,opt,name=processSummaryInterval" json:"processSummaryInterval,omitempty"`
	Uuid                   *string `protobuf:"bytes,44,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *AgentSettings) Reset()                    { *m = AgentSettings{} }
func (m *AgentSettings) String() string            { return proto.CompactTextString(m) }
func (*AgentSettings) ProtoMessage()               {}
func (*AgentSettings) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AgentSettings) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *AgentSettings) GetServerJobID() int64 {
	if m != nil && m.ServerJobID != nil {
		return *m.ServerJobID
	}
	return 0
}

func (m *AgentSettings) GetBootTime_NumberIntervals() int32 {
	if m != nil && m.BootTime_NumberIntervals != nil {
		return *m.BootTime_NumberIntervals
	}
	return 0
}

func (m *AgentSettings) GetBootTime_CPUUsageThreshold() int32 {
	if m != nil && m.BootTime_CPUUsageThreshold != nil {
		return *m.BootTime_CPUUsageThreshold
	}
	return 0
}

func (m *AgentSettings) GetBootTime_IntervalLength() int32 {
	if m != nil && m.BootTime_IntervalLength != nil {
		return *m.BootTime_IntervalLength
	}
	return 0
}

func (m *AgentSettings) GetBootTime_SystemIsBootingCriteria() int32 {
	if m != nil && m.BootTime_SystemIsBootingCriteria != nil {
		return *m.BootTime_SystemIsBootingCriteria
	}
	return 0
}

func (m *AgentSettings) GetAppstart_NumberPeriods() int32 {
	if m != nil && m.Appstart_NumberPeriods != nil {
		return *m.Appstart_NumberPeriods
	}
	return 0
}

func (m *AgentSettings) GetAppstart_MaxPercentCPU() int32 {
	if m != nil && m.Appstart_MaxPercentCPU != nil {
		return *m.Appstart_MaxPercentCPU
	}
	return 0
}

func (m *AgentSettings) GetAppstart_PollingInterval() int32 {
	if m != nil && m.Appstart_PollingInterval != nil {
		return *m.Appstart_PollingInterval
	}
	return 0
}

func (m *AgentSettings) GetAppstart_ReportingInterval() int32 {
	if m != nil && m.Appstart_ReportingInterval != nil {
		return *m.Appstart_ReportingInterval
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_PollingInterval() int32 {
	if m != nil && m.Resourceusage_PollingInterval != nil {
		return *m.Resourceusage_PollingInterval
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_ReportingInterval() int32 {
	if m != nil && m.Resourceusage_ReportingInterval != nil {
		return *m.Resourceusage_ReportingInterval
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_IdleTimeout() int32 {
	if m != nil && m.Resourceusage_IdleTimeout != nil {
		return *m.Resourceusage_IdleTimeout
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeCPUUsageForegroundProcess() int32 {
	if m != nil && m.Resourceusage_SpikeCPUUsageForegroundProcess != nil {
		return *m.Resourceusage_SpikeCPUUsageForegroundProcess
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeCPUUsageBackground() int32 {
	if m != nil && m.Resourceusage_SpikeCPUUsageBackground != nil {
		return *m.Resourceusage_SpikeCPUUsageBackground
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeMemoryUsageForegroundProcess() int32 {
	if m != nil && m.Resourceusage_SpikeMemoryUsageForegroundProcess != nil {
		return *m.Resourceusage_SpikeMemoryUsageForegroundProcess
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeMemoryUsageBackground() int32 {
	if m != nil && m.Resourceusage_SpikeMemoryUsageBackground != nil {
		return *m.Resourceusage_SpikeMemoryUsageBackground
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeIOUsageForegroundProcess() int32 {
	if m != nil && m.Resourceusage_SpikeIOUsageForegroundProcess != nil {
		return *m.Resourceusage_SpikeIOUsageForegroundProcess
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeIOUsageBackground() int32 {
	if m != nil && m.Resourceusage_SpikeIOUsageBackground != nil {
		return *m.Resourceusage_SpikeIOUsageBackground
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeNetworkUsageForegroundProcess() int32 {
	if m != nil && m.Resourceusage_SpikeNetworkUsageForegroundProcess != nil {
		return *m.Resourceusage_SpikeNetworkUsageForegroundProcess
	}
	return 0
}

func (m *AgentSettings) GetResourceusage_SpikeNetworkUsageBackground() int32 {
	if m != nil && m.Resourceusage_SpikeNetworkUsageBackground != nil {
		return *m.Resourceusage_SpikeNetworkUsageBackground
	}
	return 0
}

func (m *AgentSettings) GetAgentstatus_HeartbeatFrequency() int32 {
	if m != nil && m.Agentstatus_HeartbeatFrequency != nil {
		return *m.Agentstatus_HeartbeatFrequency
	}
	return 0
}

func (m *AgentSettings) GetDRA_IsEnabled() int32 {
	if m != nil && m.DRA_IsEnabled != nil {
		return *m.DRA_IsEnabled
	}
	return 0
}

func (m *AgentSettings) GetDRA_CPUUsageCausingBeginAdjustment() int32 {
	if m != nil && m.DRA_CPUUsageCausingBeginAdjustment != nil {
		return *m.DRA_CPUUsageCausingBeginAdjustment
	}
	return 0
}

func (m *AgentSettings) GetDRA_CPUUsageCausingEndAdjustment() int32 {
	if m != nil && m.DRA_CPUUsageCausingEndAdjustment != nil {
		return *m.DRA_CPUUsageCausingEndAdjustment
	}
	return 0
}

func (m *AgentSettings) GetDRA_ExcludedSystemServices() int32 {
	if m != nil && m.DRA_ExcludedSystemServices != nil {
		return *m.DRA_ExcludedSystemServices
	}
	return 0
}

func (m *AgentSettings) GetDRA_ExcludedProcesses() string {
	if m != nil && m.DRA_ExcludedProcesses != nil {
		return *m.DRA_ExcludedProcesses
	}
	return ""
}

func (m *AgentSettings) GetWebappId() []int32 {
	if m != nil {
		return m.WebappId
	}
	return nil
}

func (m *AgentSettings) GetWebappIpaddress() []int32 {
	if m != nil {
		return m.WebappIpaddress
	}
	return nil
}

func (m *AgentSettings) GetWebappNetmaskBits() []int32 {
	if m != nil {
		return m.WebappNetmaskBits
	}
	return nil
}

func (m *AgentSettings) GetProcessEndAgeThreshold() uint32 {
	if m != nil && m.ProcessEndAgeThreshold != nil {
		return *m.ProcessEndAgeThreshold
	}
	return 0
}

func (m *AgentSettings) GetNetworkUsageReportingInterval() uint32 {
	if m != nil && m.NetworkUsageReportingInterval != nil {
		return *m.NetworkUsageReportingInterval
	}
	return 0
}

func (m *AgentSettings) GetNetworkUsagePID_IsEnabled() uint32 {
	if m != nil && m.NetworkUsagePID_IsEnabled != nil {
		return *m.NetworkUsagePID_IsEnabled
	}
	return 0
}

func (m *AgentSettings) GetBrokerMaxQueueSize() uint32 {
	if m != nil && m.BrokerMaxQueueSize != nil {
		return *m.BrokerMaxQueueSize
	}
	return 0
}

func (m *AgentSettings) GetBrokerIdleTimeout() uint32 {
	if m != nil && m.BrokerIdleTimeout != nil {
		return *m.BrokerIdleTimeout
	}
	return 0
}

func (m *AgentSettings) GetBrokerDequeueFrequency() uint32 {
	if m != nil && m.BrokerDequeueFrequency != nil {
		return *m.BrokerDequeueFrequency
	}
	return 0
}

func (m *AgentSettings) GetInterferingProcessReportingInterval() uint32 {
	if m != nil && m.InterferingProcessReportingInterval != nil {
		return *m.InterferingProcessReportingInterval
	}
	return 0
}

func (m *AgentSettings) GetNetworkConnect_IsEnabled() uint32 {
	if m != nil && m.NetworkConnect_IsEnabled != nil {
		return *m.NetworkConnect_IsEnabled
	}
	return 0
}

func (m *AgentSettings) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *AgentSettings) GetNetworkConnectSendState() AgentSettings_NetworkConnectSendType {
	if m != nil && m.NetworkConnectSendState != nil {
		return *m.NetworkConnectSendState
	}
	return AgentSettings_FirstSeenBoot
}

func (m *AgentSettings) GetProcessSummaryInterval() int32 {
	if m != nil && m.ProcessSummaryInterval != nil {
		return *m.ProcessSummaryInterval
	}
	return 0
}

func (m *AgentSettings) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*AgentSettings)(nil), "AgentSettings")
	proto.RegisterEnum("AgentSettings_NetworkConnectSendType", AgentSettings_NetworkConnectSendType_name, AgentSettings_NetworkConnectSendType_value)
}

var fileDescriptor4 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x95, 0x5b, 0x53, 0xdb, 0x46,
	0x14, 0xc7, 0x0b, 0x24, 0x99, 0x70, 0x52, 0x53, 0x63, 0x02, 0x2c, 0x64, 0x00, 0xc7, 0x09, 0x09,
	0x09, 0xd4, 0x4d, 0x2f, 0x33, 0xed, 0xf4, 0x0d, 0x73, 0x99, 0xba, 0x53, 0xa8, 0x1b, 0x93, 0x67,
	0xcf, 0x5a, 0x3a, 0x08, 0xd5, 0xd2, 0xae, 0xba, 0x97, 0x26, 0xce, 0x63, 0x5f, 0xfb, 0x79, 0xfa,
	0xfd, 0x7a, 0x76, 0x65, 0xb9, 0xd2, 0xd8, 0x4e, 0x1f, 0x75, 0xce, 0xef, 0xbf, 0xe7, 0xb2, 0x7b,
	0x8e, 0x60, 0xe3, 0x34, 0x42, 0x61, 0xfa, 0x68, 0x4c, 0x2c, 0x22, 0xdd, 0xce, 0x94, 0x34, 0x72,
	0xb7, 0xd1, 0x93, 0xda, 0x44, 0x0a, 0xf5, 0xcd, 0x38, 0xc3, 0xdc, 0xd6, 0xfa, 0xbb, 0x06, 0xb5,
	0x0a, 0xdb, 0x58, 0x87, 0x55, 0x13, 0xa7, 0xd8, 0x37, 0x3c, 0xcd, 0xd8, 0x52, 0x73, 0xf9, 0x68,
	0xa5, 0xb1, 0x01, 0x8f, 0x34, 0xaa, 0x3f, 0x51, 0xfd, 0x2c, 0x87, 0xdd, 0x73, 0xf6, 0xba, 0xb9,
	0x44, 0xc6, 0x26, 0xb0, 0xa1, 0x94, 0xe6, 0x86, 0xd8, 0xc1, 0xb5, 0x4d, 0x87, 0xa8, 0xba, 0xc2,
	0x10, 0xc5, 0x13, 0xcd, 0x96, 0x89, 0xb8, 0xdf, 0x68, 0xc1, 0xee, 0x94, 0x38, 0xeb, 0xbd, 0x7b,
	0xa7, 0x79, 0x84, 0x37, 0x77, 0x14, 0xff, 0x4e, 0x26, 0x21, 0x5b, 0xf1, 0xcc, 0x01, 0x6c, 0x4f,
	0x99, 0x42, 0xff, 0x0b, 0x8a, 0xc8, 0xdc, 0xb1, 0x7b, 0x1e, 0x38, 0x82, 0xe6, 0x14, 0xe8, 0x8f,
	0xb5, 0xc1, 0xb4, 0xab, 0x3b, 0x64, 0xa0, 0x5c, 0xcf, 0x54, 0x4c, 0x82, 0x98, 0xb3, 0xfb, 0x9e,
	0xdc, 0x87, 0x2d, 0x9e, 0x65, 0xda, 0x70, 0x65, 0x26, 0x09, 0xf5, 0xc8, 0x2b, 0x43, 0xcd, 0x1e,
	0xcc, 0xf8, 0xaf, 0xf8, 0x07, 0x72, 0x06, 0x54, 0x37, 0x25, 0xc6, 0x1e, 0x7a, 0x3f, 0x15, 0x34,
	0xf5, 0xf7, 0x64, 0x92, 0x50, 0x84, 0x22, 0x23, 0xb6, 0x5a, 0x14, 0x34, 0x25, 0xde, 0x62, 0x26,
	0x95, 0x29, 0x33, 0xe0, 0x99, 0x43, 0xd8, 0xa3, 0x0a, 0xa5, 0xa5, 0xc3, 0xad, 0x2b, 0x78, 0xe6,
	0xa8, 0x47, 0x1e, 0x7b, 0x09, 0x07, 0x55, 0x6c, 0xf6, 0xbc, 0xcf, 0x3d, 0xf8, 0x14, 0x76, 0xaa,
	0x60, 0x37, 0x4c, 0xd0, 0x75, 0x43, 0x5a, 0xc3, 0x6a, 0x1e, 0xf9, 0x0e, 0x4e, 0xaa, 0x48, 0x3f,
	0x8b, 0x47, 0x58, 0x74, 0xfc, 0x52, 0x2a, 0x8c, 0x94, 0xb4, 0x22, 0xec, 0x29, 0x19, 0xa0, 0xd6,
	0x6c, 0xcd, 0xab, 0xbe, 0x84, 0xc3, 0x4f, 0xa8, 0x3a, 0x3c, 0x18, 0xe5, 0x2a, 0xf6, 0x85, 0xc7,
	0xbf, 0x87, 0xaf, 0xe6, 0xe0, 0x57, 0x98, 0x4a, 0x35, 0x5e, 0x10, 0xa7, 0xee, 0x85, 0x6f, 0xe0,
	0xe8, 0xd3, 0xc2, 0x52, 0xa8, 0x75, 0xaf, 0xf8, 0x16, 0x8e, 0xe7, 0x28, 0xba, 0xbf, 0x2e, 0x08,
	0xd3, 0xf0, 0xa2, 0x13, 0x78, 0xbe, 0x58, 0x54, 0x0a, 0xb1, 0xe1, 0xe9, 0x1f, 0xe0, 0xcd, 0x1c,
	0xfa, 0x1a, 0xcd, 0x7b, 0xa9, 0x46, 0x0b, 0xe2, 0x3c, 0xf6, 0xca, 0xaf, 0xe1, 0xd5, 0xff, 0x28,
	0x4b, 0xc1, 0x36, 0xbd, 0xe4, 0x05, 0xec, 0x73, 0x37, 0x62, 0xf4, 0x70, 0x8c, 0xd5, 0x83, 0x9f,
	0x90, 0xde, 0xcf, 0x10, 0xb9, 0xb9, 0x54, 0xf8, 0x87, 0x45, 0x11, 0x8c, 0xd9, 0x96, 0xe7, 0x36,
	0xa1, 0x76, 0xfe, 0xf6, 0x74, 0xd0, 0xd5, 0x17, 0x82, 0x0f, 0x13, 0x0c, 0xd9, 0xb6, 0x37, 0xbf,
	0x86, 0x96, 0x33, 0x17, 0x37, 0x73, 0xc6, 0xad, 0xa6, 0x67, 0xd2, 0xc1, 0x28, 0x16, 0xa7, 0xe1,
	0xef, 0x56, 0x9b, 0x94, 0xce, 0x66, 0xac, 0x98, 0x96, 0x39, 0xec, 0x85, 0x08, 0x4b, 0xe4, 0x4e,
	0xf1, 0x96, 0x1d, 0x79, 0xf1, 0x21, 0x48, 0x6c, 0x88, 0x61, 0x3e, 0x5a, 0x7d, 0x7a, 0x79, 0x31,
	0x15, 0xcb, 0x76, 0x3d, 0xb3, 0x07, 0x9b, 0x65, 0x66, 0xd2, 0x08, 0x72, 0x3f, 0x21, 0xf7, 0xaa,
	0xdb, 0x14, 0xef, 0x71, 0x48, 0x13, 0x31, 0x88, 0x43, 0xb6, 0xd7, 0x5c, 0x21, 0x05, 0x83, 0x7a,
	0x61, 0xca, 0x78, 0x18, 0x2a, 0xd7, 0xb7, 0x7d, 0xef, 0x79, 0x02, 0x1b, 0x13, 0x8f, 0x40, 0x93,
	0x72, 0x3d, 0x1a, 0x0c, 0x63, 0xa3, 0xd9, 0x2b, 0xef, 0xa4, 0xd1, 0xcc, 0xf2, 0xc3, 0x5d, 0xaa,
	0xe5, 0x2d, 0x71, 0x40, 0x91, 0x6a, 0x6e, 0xa8, 0x44, 0xa9, 0xc3, 0xb3, 0xb3, 0xd2, 0xf4, 0x18,
	0xcd, 0x4a, 0x19, 0xeb, 0x75, 0xcf, 0x4b, 0xcd, 0x7c, 0xea, 0x91, 0x5d, 0x68, 0x0c, 0x95, 0x1c,
	0xa1, 0xa2, 0x0d, 0xf0, 0x9b, 0x45, 0x8b, 0xfd, 0xf8, 0x23, 0xb2, 0x96, 0xf7, 0xed, 0xc0, 0x7a,
	0xee, 0x2b, 0x8f, 0xd8, 0x33, 0xef, 0xa2, 0x04, 0x73, 0xd7, 0xb9, 0xbb, 0x32, 0x8b, 0xff, 0x5d,
	0xdd, 0x73, 0xef, 0x3f, 0x86, 0x67, 0xb1, 0xcb, 0xe5, 0x96, 0x36, 0x8e, 0x88, 0x26, 0x8d, 0x9a,
	0x4d, 0xf3, 0xd0, 0xc3, 0xb4, 0x68, 0x26, 0x69, 0x9e, 0x49, 0x21, 0x30, 0x30, 0xa5, 0x2c, 0x5f,
	0x78, 0x62, 0x0d, 0x1e, 0x68, 0xda, 0x6d, 0xdd, 0x90, 0xbd, 0xf4, 0x9d, 0xbe, 0x84, 0xed, 0xaa,
	0xa2, 0x8f, 0x22, 0xa4, 0x0d, 0x6d, 0x90, 0x1d, 0x11, 0xb0, 0xf6, 0xcd, 0x61, 0xbb, 0xba, 0xf0,
	0xaf, 0x67, 0x68, 0xb7, 0xf3, 0x4b, 0x7d, 0xee, 0xdb, 0x34, 0xe5, 0x6a, 0x3c, 0xcd, 0xec, 0xd8,
	0x5f, 0xf8, 0x16, 0xdc, 0xb3, 0x96, 0x2e, 0xf3, 0xc4, 0x45, 0xed, 0x3c, 0xfc, 0xeb, 0x1f, 0xe6,
	0xbf, 0x5b, 0xb7, 0xb0, 0xb5, 0xe0, 0xc4, 0x75, 0xa8, 0x5d, 0xc6, 0x4a, 0x93, 0x01, 0x85, 0x5b,
	0xcb, 0xf5, 0xcf, 0x1a, 0x0d, 0x58, 0x9b, 0x9a, 0x6e, 0x64, 0xc8, 0xc7, 0xf5, 0xa5, 0x0a, 0x76,
	0x41, 0x3f, 0x92, 0xfa, 0xb2, 0xc3, 0x4e, 0x93, 0x64, 0x72, 0x5e, 0x2c, 0x85, 0xae, 0xaf, 0x74,
	0x7e, 0x84, 0x56, 0x20, 0xd3, 0xf6, 0xc7, 0xf8, 0xd6, 0xa0, 0x68, 0xe7, 0xff, 0x9c, 0xfc, 0x47,
	0x15, 0xc8, 0xa4, 0x9d, 0x52, 0xde, 0x6e, 0xbe, 0x1e, 0x57, 0x6a, 0xbd, 0xca, 0xad, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xed, 0x30, 0xf1, 0xc5, 0xf3, 0x06, 0x00, 0x00,
}
