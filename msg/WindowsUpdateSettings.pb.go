// Code generated by protoc-gen-go.
// source: WindowsUpdateSettings.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WindowsUpdateSettings_AutomaticUpdatesNotificationLevel int32

const (
	WindowsUpdateSettings_aunlNotConfigured            WindowsUpdateSettings_AutomaticUpdatesNotificationLevel = 0
	WindowsUpdateSettings_aunlDisabled                 WindowsUpdateSettings_AutomaticUpdatesNotificationLevel = 1
	WindowsUpdateSettings_aunlNotifyBeforeDownload     WindowsUpdateSettings_AutomaticUpdatesNotificationLevel = 2
	WindowsUpdateSettings_aunlNotifyBeforeInstallation WindowsUpdateSettings_AutomaticUpdatesNotificationLevel = 3
	WindowsUpdateSettings_aunlScheduledInstallation    WindowsUpdateSettings_AutomaticUpdatesNotificationLevel = 4
)

var WindowsUpdateSettings_AutomaticUpdatesNotificationLevel_name = map[int32]string{
	0: "aunlNotConfigured",
	1: "aunlDisabled",
	2: "aunlNotifyBeforeDownload",
	3: "aunlNotifyBeforeInstallation",
	4: "aunlScheduledInstallation",
}
var WindowsUpdateSettings_AutomaticUpdatesNotificationLevel_value = map[string]int32{
	"aunlNotConfigured":            0,
	"aunlDisabled":                 1,
	"aunlNotifyBeforeDownload":     2,
	"aunlNotifyBeforeInstallation": 3,
	"aunlScheduledInstallation":    4,
}

func (x WindowsUpdateSettings_AutomaticUpdatesNotificationLevel) Enum() *WindowsUpdateSettings_AutomaticUpdatesNotificationLevel {
	p := new(WindowsUpdateSettings_AutomaticUpdatesNotificationLevel)
	*p = x
	return p
}
func (x WindowsUpdateSettings_AutomaticUpdatesNotificationLevel) String() string {
	return proto.EnumName(WindowsUpdateSettings_AutomaticUpdatesNotificationLevel_name, int32(x))
}
func (x *WindowsUpdateSettings_AutomaticUpdatesNotificationLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WindowsUpdateSettings_AutomaticUpdatesNotificationLevel_value, data, "WindowsUpdateSettings_AutomaticUpdatesNotificationLevel")
	if err != nil {
		return err
	}
	*x = WindowsUpdateSettings_AutomaticUpdatesNotificationLevel(value)
	return nil
}
func (WindowsUpdateSettings_AutomaticUpdatesNotificationLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor92, []int{0, 0}
}

type WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay int32

const (
	WindowsUpdateSettings_ausidEveryDay       WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 0
	WindowsUpdateSettings_ausidEverySunday    WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 1
	WindowsUpdateSettings_ausidEveryMonday    WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 2
	WindowsUpdateSettings_ausidEveryTuesday   WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 3
	WindowsUpdateSettings_ausidEveryWednesday WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 4
	WindowsUpdateSettings_ausidEveryThursday  WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 5
	WindowsUpdateSettings_ausidEveryFriday    WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 6
	WindowsUpdateSettings_ausidEverySaturday  WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 7
)

var WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay_name = map[int32]string{
	0: "ausidEveryDay",
	1: "ausidEverySunday",
	2: "ausidEveryMonday",
	3: "ausidEveryTuesday",
	4: "ausidEveryWednesday",
	5: "ausidEveryThursday",
	6: "ausidEveryFriday",
	7: "ausidEverySaturday",
}
var WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay_value = map[string]int32{
	"ausidEveryDay":       0,
	"ausidEverySunday":    1,
	"ausidEveryMonday":    2,
	"ausidEveryTuesday":   3,
	"ausidEveryWednesday": 4,
	"ausidEveryThursday":  5,
	"ausidEveryFriday":    6,
	"ausidEverySaturday":  7,
}

func (x WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay) Enum() *WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay {
	p := new(WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay)
	*p = x
	return p
}
func (x WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay) String() string {
	return proto.EnumName(WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay_name, int32(x))
}
func (x *WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay_value, data, "WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay")
	if err != nil {
		return err
	}
	*x = WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay(value)
	return nil
}
func (WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor92, []int{0, 1}
}

// Message requiring an agent to change one of its settings
type WindowsUpdateSettings struct {
	// The time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Is the WUA service enabled?
	ServiceEnabled *bool `protobuf:"varint,3,opt,name=serviceEnabled" json:"serviceEnabled,omitempty"`
	// User or AD forced notification level for updates
	NotificationLevel *WindowsUpdateSettings_AutomaticUpdatesNotificationLevel `protobuf:"varint,4,opt,name=notificationLevel,enum=WindowsUpdateSettings_AutomaticUpdatesNotificationLevel" json:"notificationLevel,omitempty"`
	// Can Update Settings be changed?
	AutomaticUpdatesSettingsReadOnly *bool `protobuf:"varint,5,opt,name=AutomaticUpdatesSettingsReadOnly" json:"AutomaticUpdatesSettingsReadOnly,omitempty"`
	// Is the WUA service required to be running?
	AutomaticUpdateServiceRequired *bool `protobuf:"varint,6,opt,name=AutomaticUpdateServiceRequired" json:"AutomaticUpdateServiceRequired,omitempty"`
	// Schedule to check for updates
	ScheduledDayForUpdates *WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay `protobuf:"varint,7,opt,name=scheduledDayForUpdates,enum=WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay" json:"scheduledDayForUpdates,omitempty"`
	// Scheduled hour (0..23) to check for updates
	ScheduledInstallationTime *int32 `protobuf:"varint,8,opt,name=scheduledInstallationTime" json:"scheduledInstallationTime,omitempty"`
	// Should recommended updates be selected automatically?
	IncludeRecommendedUpdates *bool `protobuf:"varint,9,opt,name=includeRecommendedUpdates" json:"includeRecommendedUpdates,omitempty"`
	// 'Show me detailed notifications when new Microsoft software is available'
	FeaturedUpdatesEnabled *bool `protobuf:"varint,10,opt,name=featuredUpdatesEnabled" json:"featuredUpdatesEnabled,omitempty"`
	// 'Allow all users to install updates on this computer'
	NonAdministratorsElevated *bool `protobuf:"varint,11,opt,name=nonAdministratorsElevated" json:"nonAdministratorsElevated,omitempty"`
	// Major/Minor version of WUA
	WuaMajorVersion *int32 `protobuf:"varint,12,opt,name=wuaMajorVersion" json:"wuaMajorVersion,omitempty"`
	WuaMinorVersion *int32 `protobuf:"varint,13,opt,name=wuaMinorVersion" json:"wuaMinorVersion,omitempty"`
	// WUA version in text, but does NOT normally reflect the values above
	WuaProductVersion *string `protobuf:"bytes,14,opt,name=wuaProductVersion" json:"wuaProductVersion,omitempty"`
	// When 'Updates were installed' last
	LastInstallationSuccessDate *int64 `protobuf:"varint,15,opt,name=lastInstallationSuccessDate" json:"lastInstallationSuccessDate,omitempty"`
	// 'Most recent check for updates'
	LastSearchSuccessDate *int64 `protobuf:"varint,16,opt,name=lastSearchSuccessDate" json:"lastSearchSuccessDate,omitempty"`
	// Non-Windows MS updates (like Office or Security Essentials)
	InstallMicrosoftUpdates *bool `protobuf:"varint,17,opt,name=installMicrosoftUpdates" json:"installMicrosoftUpdates,omitempty"`
	// The Windows Update Servers defined for the system are in another message - this is UUID to tie them together
	WUA_ServersGUID *string `protobuf:"bytes,18,opt,name=WUA_ServersGUID" json:"WUA_ServersGUID,omitempty"`
	SiteId          *string `protobuf:"bytes,19,opt,name=siteId" json:"siteId,omitempty"`
	// Count for Updates installed and available added to make server side code easier
	InstalledUpdates *int32  `protobuf:"varint,20,opt,name=installedUpdates" json:"installedUpdates,omitempty"`
	AvailableUpdates *int32  `protobuf:"varint,21,opt,name=availableUpdates" json:"availableUpdates,omitempty"`
	Uuid             *string `protobuf:"bytes,22,opt,name=uuid" json:"uuid,omitempty"`
	// This UUID is to group WindowsUpdate, WindowsUpdateAvailable, WindowsUpdateServers and WindowsUpdateSettings message
	WuaScanUUID      *string `protobuf:"bytes,23,opt,name=wuaScanUUID" json:"wuaScanUUID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WindowsUpdateSettings) Reset()                    { *m = WindowsUpdateSettings{} }
func (m *WindowsUpdateSettings) String() string            { return proto.CompactTextString(m) }
func (*WindowsUpdateSettings) ProtoMessage()               {}
func (*WindowsUpdateSettings) Descriptor() ([]byte, []int) { return fileDescriptor92, []int{0} }

func (m *WindowsUpdateSettings) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *WindowsUpdateSettings) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *WindowsUpdateSettings) GetServiceEnabled() bool {
	if m != nil && m.ServiceEnabled != nil {
		return *m.ServiceEnabled
	}
	return false
}

func (m *WindowsUpdateSettings) GetNotificationLevel() WindowsUpdateSettings_AutomaticUpdatesNotificationLevel {
	if m != nil && m.NotificationLevel != nil {
		return *m.NotificationLevel
	}
	return WindowsUpdateSettings_aunlNotConfigured
}

func (m *WindowsUpdateSettings) GetAutomaticUpdatesSettingsReadOnly() bool {
	if m != nil && m.AutomaticUpdatesSettingsReadOnly != nil {
		return *m.AutomaticUpdatesSettingsReadOnly
	}
	return false
}

func (m *WindowsUpdateSettings) GetAutomaticUpdateServiceRequired() bool {
	if m != nil && m.AutomaticUpdateServiceRequired != nil {
		return *m.AutomaticUpdateServiceRequired
	}
	return false
}

func (m *WindowsUpdateSettings) GetScheduledDayForUpdates() WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay {
	if m != nil && m.ScheduledDayForUpdates != nil {
		return *m.ScheduledDayForUpdates
	}
	return WindowsUpdateSettings_ausidEveryDay
}

func (m *WindowsUpdateSettings) GetScheduledInstallationTime() int32 {
	if m != nil && m.ScheduledInstallationTime != nil {
		return *m.ScheduledInstallationTime
	}
	return 0
}

func (m *WindowsUpdateSettings) GetIncludeRecommendedUpdates() bool {
	if m != nil && m.IncludeRecommendedUpdates != nil {
		return *m.IncludeRecommendedUpdates
	}
	return false
}

func (m *WindowsUpdateSettings) GetFeaturedUpdatesEnabled() bool {
	if m != nil && m.FeaturedUpdatesEnabled != nil {
		return *m.FeaturedUpdatesEnabled
	}
	return false
}

func (m *WindowsUpdateSettings) GetNonAdministratorsElevated() bool {
	if m != nil && m.NonAdministratorsElevated != nil {
		return *m.NonAdministratorsElevated
	}
	return false
}

func (m *WindowsUpdateSettings) GetWuaMajorVersion() int32 {
	if m != nil && m.WuaMajorVersion != nil {
		return *m.WuaMajorVersion
	}
	return 0
}

func (m *WindowsUpdateSettings) GetWuaMinorVersion() int32 {
	if m != nil && m.WuaMinorVersion != nil {
		return *m.WuaMinorVersion
	}
	return 0
}

func (m *WindowsUpdateSettings) GetWuaProductVersion() string {
	if m != nil && m.WuaProductVersion != nil {
		return *m.WuaProductVersion
	}
	return ""
}

func (m *WindowsUpdateSettings) GetLastInstallationSuccessDate() int64 {
	if m != nil && m.LastInstallationSuccessDate != nil {
		return *m.LastInstallationSuccessDate
	}
	return 0
}

func (m *WindowsUpdateSettings) GetLastSearchSuccessDate() int64 {
	if m != nil && m.LastSearchSuccessDate != nil {
		return *m.LastSearchSuccessDate
	}
	return 0
}

func (m *WindowsUpdateSettings) GetInstallMicrosoftUpdates() bool {
	if m != nil && m.InstallMicrosoftUpdates != nil {
		return *m.InstallMicrosoftUpdates
	}
	return false
}

func (m *WindowsUpdateSettings) GetWUA_ServersGUID() string {
	if m != nil && m.WUA_ServersGUID != nil {
		return *m.WUA_ServersGUID
	}
	return ""
}

func (m *WindowsUpdateSettings) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *WindowsUpdateSettings) GetInstalledUpdates() int32 {
	if m != nil && m.InstalledUpdates != nil {
		return *m.InstalledUpdates
	}
	return 0
}

func (m *WindowsUpdateSettings) GetAvailableUpdates() int32 {
	if m != nil && m.AvailableUpdates != nil {
		return *m.AvailableUpdates
	}
	return 0
}

func (m *WindowsUpdateSettings) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *WindowsUpdateSettings) GetWuaScanUUID() string {
	if m != nil && m.WuaScanUUID != nil {
		return *m.WuaScanUUID
	}
	return ""
}

func init() {
	proto.RegisterType((*WindowsUpdateSettings)(nil), "WindowsUpdateSettings")
	proto.RegisterEnum("WindowsUpdateSettings_AutomaticUpdatesNotificationLevel", WindowsUpdateSettings_AutomaticUpdatesNotificationLevel_name, WindowsUpdateSettings_AutomaticUpdatesNotificationLevel_value)
	proto.RegisterEnum("WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay", WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay_name, WindowsUpdateSettings_AutomaticUpdatesScheduledInstallationDay_value)
}

var fileDescriptor92 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x52, 0x13, 0x41,
	0x14, 0x35, 0x0f, 0x1e, 0x69, 0x20, 0x4c, 0x06, 0x12, 0x1a, 0x41, 0x0c, 0x59, 0x58, 0x59, 0x58,
	0x59, 0xb0, 0x72, 0x67, 0x11, 0x03, 0x16, 0x55, 0x46, 0x29, 0x86, 0xc8, 0x92, 0x6a, 0xa7, 0x3b,
	0xa1, 0xad, 0x49, 0x77, 0xec, 0x47, 0xa8, 0xb8, 0xf4, 0x77, 0x5c, 0xfb, 0x3d, 0x7e, 0x84, 0x3f,
	0xe0, 0xed, 0x9e, 0x0c, 0x24, 0x31, 0x55, 0xb2, 0x9c, 0x73, 0x4e, 0xdf, 0x7b, 0xfa, 0xde, 0xd3,
	0x83, 0x0e, 0x6e, 0xb8, 0xa0, 0xf2, 0x5e, 0xf7, 0x46, 0x94, 0x18, 0x16, 0x31, 0x63, 0xb8, 0x18,
	0xe8, 0xd6, 0x48, 0x49, 0x23, 0x9f, 0x87, 0x97, 0x52, 0x9b, 0x81, 0x62, 0xfa, 0x7a, 0x32, 0x62,
	0x29, 0xd6, 0xf8, 0x53, 0x42, 0xd5, 0xa5, 0x67, 0xc2, 0x3a, 0x2a, 0x19, 0x3e, 0x64, 0x91, 0x21,
	0xc3, 0x11, 0xce, 0xd5, 0xf3, 0xcd, 0x42, 0x7b, 0xeb, 0xc7, 0x2f, 0xec, 0x41, 0xed, 0xc0, 0xf0,
	0x00, 0x95, 0xc8, 0x80, 0x09, 0xf3, 0xbe, 0x77, 0xd1, 0xc1, 0x79, 0x50, 0x94, 0xda, 0xeb, 0xa0,
	0x28, 0x5a, 0xcb, 0x69, 0x58, 0x43, 0x65, 0xcd, 0xd4, 0x98, 0xc7, 0xec, 0x4c, 0x90, 0x2f, 0x09,
	0xa3, 0xb8, 0x50, 0xcf, 0x35, 0xd7, 0xc3, 0x08, 0x55, 0x84, 0x34, 0xbc, 0xcf, 0x63, 0x62, 0xb8,
	0x14, 0x1f, 0xd8, 0x98, 0x25, 0xb8, 0x08, 0x54, 0xf9, 0xe4, 0x4d, 0x6b, 0xb9, 0xfb, 0x53, 0x6b,
	0xe4, 0x10, 0xd4, 0x71, 0x8a, 0xeb, 0x8f, 0x8b, 0xe7, 0xc3, 0x26, 0xaa, 0x2f, 0x8a, 0xb2, 0xd3,
	0x57, 0x8c, 0xd0, 0x4f, 0x22, 0x99, 0xe0, 0x15, 0xdf, 0xfe, 0x15, 0x3a, 0x5a, 0x50, 0x46, 0xa9,
	0xcb, 0x2b, 0xf6, 0xcd, 0x72, 0x05, 0x36, 0x57, 0xbd, 0xee, 0x16, 0xd5, 0x74, 0x7c, 0xc7, 0xa8,
	0x05, 0xe7, 0x1d, 0x32, 0x39, 0x97, 0x6a, 0x5a, 0x17, 0xaf, 0x79, 0xaf, 0x6f, 0x9f, 0xe8, 0x35,
	0xca, 0x8a, 0x5c, 0x08, 0x18, 0x5a, 0x92, 0x78, 0xd3, 0x50, 0x30, 0x3c, 0x46, 0xfb, 0x7a, 0x19,
	0x77, 0x0d, 0xe3, 0xc5, 0xeb, 0xd0, 0x63, 0xc5, 0x49, 0xb8, 0x88, 0x13, 0x4b, 0xc1, 0x5c, 0x2c,
	0x87, 0x43, 0x26, 0x28, 0xa3, 0x99, 0x8d, 0x92, 0xb7, 0x79, 0x84, 0x6a, 0x7d, 0x46, 0x8c, 0x55,
	0x0f, 0x44, 0x36, 0x6d, 0xe4, 0x79, 0x28, 0x21, 0xa4, 0x38, 0xa5, 0x43, 0x2e, 0xb8, 0x36, 0x8a,
	0x18, 0xa9, 0xf4, 0x59, 0xc2, 0xc6, 0xa0, 0xa4, 0x78, 0xc3, 0x4b, 0xf6, 0xd0, 0xf6, 0xbd, 0x25,
	0x5d, 0xf2, 0x55, 0xaa, 0xcf, 0x4c, 0x69, 0xb0, 0x80, 0x37, 0x7d, 0xfb, 0x29, 0xc1, 0xc5, 0x23,
	0xb1, 0xe5, 0x89, 0x7d, 0x54, 0x01, 0xe2, 0x52, 0x49, 0x6a, 0x63, 0x93, 0x51, 0x65, 0xa0, 0x4a,
	0xe1, 0x09, 0x3a, 0x48, 0x88, 0x36, 0xb3, 0x17, 0x8a, 0x6c, 0x1c, 0x33, 0xad, 0x3b, 0xd0, 0x12,
	0x6f, 0x83, 0xe8, 0x9f, 0x18, 0xbd, 0x46, 0x55, 0x77, 0x26, 0x62, 0x44, 0xc5, 0x77, 0xb3, 0xea,
	0x60, 0x99, 0xfa, 0x25, 0xda, 0xe3, 0x69, 0xf5, 0x2e, 0x8f, 0x95, 0xd4, 0xb2, 0x6f, 0xb2, 0x91,
	0x54, 0xb2, 0xfb, 0xdc, 0xf4, 0x4e, 0x6f, 0xdd, 0x5a, 0xc1, 0x9a, 0xcf, 0x66, 0xe8, 0xbd, 0x95,
	0xd1, 0xaa, 0xe6, 0x86, 0x5d, 0x50, 0xbc, 0xe3, 0xbf, 0x31, 0x0a, 0xa6, 0x95, 0x1e, 0xa7, 0xba,
	0xeb, 0x2f, 0x08, 0x0c, 0x19, 0x13, 0x9e, 0xb8, 0x49, 0x66, 0x4c, 0xd5, 0x33, 0x35, 0xe4, 0xd3,
	0x8d, 0x6b, 0xae, 0xc2, 0x4c, 0xda, 0x5f, 0xa0, 0x0d, 0x18, 0x49, 0x14, 0x13, 0xd1, 0x73, 0x0d,
	0xf7, 0xe6, 0xe9, 0xc6, 0xcf, 0x1c, 0x3a, 0xfe, 0x7f, 0x8a, 0xab, 0xa8, 0x42, 0xac, 0x48, 0x80,
	0x78, 0x27, 0x45, 0x9f, 0x0f, 0xdc, 0x56, 0x83, 0x67, 0x61, 0x80, 0x36, 0x1d, 0xdc, 0xe1, 0xda,
	0x6f, 0x36, 0xc8, 0x85, 0x87, 0x08, 0x4f, 0x85, 0xbc, 0x3f, 0x69, 0xb3, 0xbe, 0x54, 0xac, 0x23,
	0xef, 0x45, 0x22, 0x09, 0x0d, 0xf2, 0xf0, 0x70, 0x0f, 0x17, 0xd9, 0xd9, 0x7d, 0x04, 0x05, 0x70,
	0xbb, 0xef, 0x14, 0x4b, 0xb3, 0x19, 0x14, 0x1b, 0xbf, 0x73, 0xa8, 0xf9, 0xe4, 0x1c, 0x57, 0xd0,
	0x16, 0xb1, 0x9a, 0xd3, 0x33, 0x98, 0xf6, 0x04, 0x00, 0x30, 0xbc, 0x0b, 0xe3, 0x7b, 0x80, 0x22,
	0x2b, 0x28, 0xa0, 0xb9, 0x79, 0xb4, 0x2b, 0x3d, 0x9a, 0x4f, 0xef, 0x9c, 0xa1, 0xd7, 0x96, 0x69,
	0x07, 0x17, 0x60, 0x89, 0x3b, 0x8f, 0xf0, 0x0d, 0xa3, 0x22, 0x25, 0x8a, 0xb0, 0x80, 0x70, 0x46,
	0x7f, 0x67, 0x95, 0xc7, 0x57, 0xe6, 0xab, 0x9f, 0x2b, 0xee, 0xd0, 0xd5, 0x79, 0x75, 0xe4, 0xde,
	0x89, 0xc3, 0xd7, 0xda, 0x6d, 0xd4, 0x80, 0x07, 0xd5, 0xfa, 0xce, 0xfb, 0x86, 0x89, 0x96, 0xf6,
	0x51, 0x49, 0x7f, 0x88, 0xb1, 0x4c, 0x5a, 0x10, 0x35, 0x0d, 0x3f, 0xb6, 0xf6, 0xe1, 0xd2, 0x27,
	0xde, 0x4d, 0xd9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x1d, 0x95, 0x83, 0x6b, 0x05, 0x00,
	0x00,
}
