// Code generated by protoc-gen-go.
// source: OSXUpdateSettings.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OSXUpdateSettings_AutomaticUpdatesNotificationLevel int32

const (
	OSXUpdateSettings_aunlNotConfigured            OSXUpdateSettings_AutomaticUpdatesNotificationLevel = 0
	OSXUpdateSettings_aunlDisabled                 OSXUpdateSettings_AutomaticUpdatesNotificationLevel = 1
	OSXUpdateSettings_aunlNotifyBeforeDownload     OSXUpdateSettings_AutomaticUpdatesNotificationLevel = 2
	OSXUpdateSettings_aunlNotifyBeforeInstallation OSXUpdateSettings_AutomaticUpdatesNotificationLevel = 3
	OSXUpdateSettings_aunlScheduledInstallation    OSXUpdateSettings_AutomaticUpdatesNotificationLevel = 4
)

var OSXUpdateSettings_AutomaticUpdatesNotificationLevel_name = map[int32]string{
	0: "aunlNotConfigured",
	1: "aunlDisabled",
	2: "aunlNotifyBeforeDownload",
	3: "aunlNotifyBeforeInstallation",
	4: "aunlScheduledInstallation",
}
var OSXUpdateSettings_AutomaticUpdatesNotificationLevel_value = map[string]int32{
	"aunlNotConfigured":            0,
	"aunlDisabled":                 1,
	"aunlNotifyBeforeDownload":     2,
	"aunlNotifyBeforeInstallation": 3,
	"aunlScheduledInstallation":    4,
}

func (x OSXUpdateSettings_AutomaticUpdatesNotificationLevel) Enum() *OSXUpdateSettings_AutomaticUpdatesNotificationLevel {
	p := new(OSXUpdateSettings_AutomaticUpdatesNotificationLevel)
	*p = x
	return p
}
func (x OSXUpdateSettings_AutomaticUpdatesNotificationLevel) String() string {
	return proto.EnumName(OSXUpdateSettings_AutomaticUpdatesNotificationLevel_name, int32(x))
}
func (x *OSXUpdateSettings_AutomaticUpdatesNotificationLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OSXUpdateSettings_AutomaticUpdatesNotificationLevel_value, data, "OSXUpdateSettings_AutomaticUpdatesNotificationLevel")
	if err != nil {
		return err
	}
	*x = OSXUpdateSettings_AutomaticUpdatesNotificationLevel(value)
	return nil
}
func (OSXUpdateSettings_AutomaticUpdatesNotificationLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor62, []int{0, 0}
}

type OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay int32

const (
	OSXUpdateSettings_ausidEveryDay       OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 0
	OSXUpdateSettings_ausidEverySunday    OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 1
	OSXUpdateSettings_ausidEveryMonday    OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 2
	OSXUpdateSettings_ausidEveryTuesday   OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 3
	OSXUpdateSettings_ausidEveryWednesday OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 4
	OSXUpdateSettings_ausidEveryThursday  OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 5
	OSXUpdateSettings_ausidEveryFriday    OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 6
	OSXUpdateSettings_ausidEverySaturday  OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay = 7
)

var OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay_name = map[int32]string{
	0: "ausidEveryDay",
	1: "ausidEverySunday",
	2: "ausidEveryMonday",
	3: "ausidEveryTuesday",
	4: "ausidEveryWednesday",
	5: "ausidEveryThursday",
	6: "ausidEveryFriday",
	7: "ausidEverySaturday",
}
var OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay_value = map[string]int32{
	"ausidEveryDay":       0,
	"ausidEverySunday":    1,
	"ausidEveryMonday":    2,
	"ausidEveryTuesday":   3,
	"ausidEveryWednesday": 4,
	"ausidEveryThursday":  5,
	"ausidEveryFriday":    6,
	"ausidEverySaturday":  7,
}

func (x OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay) Enum() *OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay {
	p := new(OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay)
	*p = x
	return p
}
func (x OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay) String() string {
	return proto.EnumName(OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay_name, int32(x))
}
func (x *OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay_value, data, "OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay")
	if err != nil {
		return err
	}
	*x = OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay(value)
	return nil
}
func (OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor62, []int{0, 1}
}

// Message requiring an agent to change one of its settings
type OSXUpdateSettings struct {
	// The time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Is the "software_update_service" process is launched?
	ServiceEnabled *bool `protobuf:"varint,3,opt,name=serviceEnabled" json:"serviceEnabled,omitempty"`
	// User or AD forced notification level for updates
	NotificationLevel *OSXUpdateSettings_AutomaticUpdatesNotificationLevel `protobuf:"varint,4,opt,name=notificationLevel,enum=OSXUpdateSettings_AutomaticUpdatesNotificationLevel" json:"notificationLevel,omitempty"`
	// Can Update Settings be changed?
	AutomaticUpdatesSettingsReadOnly *bool `protobuf:"varint,5,opt,name=AutomaticUpdatesSettingsReadOnly" json:"AutomaticUpdatesSettingsReadOnly,omitempty"`
	// Is the software update service required to be running?
	AutomaticUpdateServiceRequired *bool `protobuf:"varint,6,opt,name=AutomaticUpdateServiceRequired" json:"AutomaticUpdateServiceRequired,omitempty"`
	// Schedule to check for updates
	ScheduledDayForUpdates *OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay `protobuf:"varint,7,opt,name=scheduledDayForUpdates,enum=OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay" json:"scheduledDayForUpdates,omitempty"`
	// Scheduled hour (0..23) to check for updates
	ScheduledInstallationTime *int32 `protobuf:"varint,8,opt,name=scheduledInstallationTime" json:"scheduledInstallationTime,omitempty"`
	// Should recommended updates be selected automatically?
	IncludeRecommendedUpdates *bool `protobuf:"varint,9,opt,name=includeRecommendedUpdates" json:"includeRecommendedUpdates,omitempty"`
	// 'Show me detailed notifications when new software is available'
	FeaturedUpdatesEnabled *bool `protobuf:"varint,10,opt,name=featuredUpdatesEnabled" json:"featuredUpdatesEnabled,omitempty"`
	// 'Allow all users to install updates on this computer'
	NonAdministratorsElevated *bool `protobuf:"varint,11,opt,name=nonAdministratorsElevated" json:"nonAdministratorsElevated,omitempty"`
	// Major/Minor version of "Software Update.app"
	WuaMajorVersion *int32 `protobuf:"varint,12,opt,name=wuaMajorVersion" json:"wuaMajorVersion,omitempty"`
	WuaMinorVersion *int32 `protobuf:"varint,13,opt,name=wuaMinorVersion" json:"wuaMinorVersion,omitempty"`
	// "Software Update.app" version in text, but does NOT normally reflect the values above
	WuaProductVersion *string `protobuf:"bytes,14,opt,name=wuaProductVersion" json:"wuaProductVersion,omitempty"`
	// When 'Updates were installed' last
	LastInstallationSuccessDate *int64 `protobuf:"varint,15,opt,name=lastInstallationSuccessDate" json:"lastInstallationSuccessDate,omitempty"`
	// 'Most recent check for updates'
	LastSearchSuccessDate *int64 `protobuf:"varint,16,opt,name=lastSearchSuccessDate" json:"lastSearchSuccessDate,omitempty"`
	// Non-OSX updates (like Office or Security Essentials)
	InstallMicrosoftUpdates *bool `protobuf:"varint,17,opt,name=installMicrosoftUpdates" json:"installMicrosoftUpdates,omitempty"`
	// The OSX Update Servers defined for the system are in another message - this is UUID to tie them together
	WUA_ServersGUID *string `protobuf:"bytes,18,opt,name=WUA_ServersGUID" json:"WUA_ServersGUID,omitempty"`
	SiteId          *string `protobuf:"bytes,19,opt,name=siteId" json:"siteId,omitempty"`
	// Count for Updates installed and available added to make server side code easier
	InstalledUpdates *int32  `protobuf:"varint,20,opt,name=installedUpdates" json:"installedUpdates,omitempty"`
	AvailableUpdates *int32  `protobuf:"varint,21,opt,name=availableUpdates" json:"availableUpdates,omitempty"`
	Uuid             *string `protobuf:"bytes,22,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OSXUpdateSettings) Reset()                    { *m = OSXUpdateSettings{} }
func (m *OSXUpdateSettings) String() string            { return proto.CompactTextString(m) }
func (*OSXUpdateSettings) ProtoMessage()               {}
func (*OSXUpdateSettings) Descriptor() ([]byte, []int) { return fileDescriptor62, []int{0} }

func (m *OSXUpdateSettings) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *OSXUpdateSettings) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *OSXUpdateSettings) GetServiceEnabled() bool {
	if m != nil && m.ServiceEnabled != nil {
		return *m.ServiceEnabled
	}
	return false
}

func (m *OSXUpdateSettings) GetNotificationLevel() OSXUpdateSettings_AutomaticUpdatesNotificationLevel {
	if m != nil && m.NotificationLevel != nil {
		return *m.NotificationLevel
	}
	return OSXUpdateSettings_aunlNotConfigured
}

func (m *OSXUpdateSettings) GetAutomaticUpdatesSettingsReadOnly() bool {
	if m != nil && m.AutomaticUpdatesSettingsReadOnly != nil {
		return *m.AutomaticUpdatesSettingsReadOnly
	}
	return false
}

func (m *OSXUpdateSettings) GetAutomaticUpdateServiceRequired() bool {
	if m != nil && m.AutomaticUpdateServiceRequired != nil {
		return *m.AutomaticUpdateServiceRequired
	}
	return false
}

func (m *OSXUpdateSettings) GetScheduledDayForUpdates() OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay {
	if m != nil && m.ScheduledDayForUpdates != nil {
		return *m.ScheduledDayForUpdates
	}
	return OSXUpdateSettings_ausidEveryDay
}

func (m *OSXUpdateSettings) GetScheduledInstallationTime() int32 {
	if m != nil && m.ScheduledInstallationTime != nil {
		return *m.ScheduledInstallationTime
	}
	return 0
}

func (m *OSXUpdateSettings) GetIncludeRecommendedUpdates() bool {
	if m != nil && m.IncludeRecommendedUpdates != nil {
		return *m.IncludeRecommendedUpdates
	}
	return false
}

func (m *OSXUpdateSettings) GetFeaturedUpdatesEnabled() bool {
	if m != nil && m.FeaturedUpdatesEnabled != nil {
		return *m.FeaturedUpdatesEnabled
	}
	return false
}

func (m *OSXUpdateSettings) GetNonAdministratorsElevated() bool {
	if m != nil && m.NonAdministratorsElevated != nil {
		return *m.NonAdministratorsElevated
	}
	return false
}

func (m *OSXUpdateSettings) GetWuaMajorVersion() int32 {
	if m != nil && m.WuaMajorVersion != nil {
		return *m.WuaMajorVersion
	}
	return 0
}

func (m *OSXUpdateSettings) GetWuaMinorVersion() int32 {
	if m != nil && m.WuaMinorVersion != nil {
		return *m.WuaMinorVersion
	}
	return 0
}

func (m *OSXUpdateSettings) GetWuaProductVersion() string {
	if m != nil && m.WuaProductVersion != nil {
		return *m.WuaProductVersion
	}
	return ""
}

func (m *OSXUpdateSettings) GetLastInstallationSuccessDate() int64 {
	if m != nil && m.LastInstallationSuccessDate != nil {
		return *m.LastInstallationSuccessDate
	}
	return 0
}

func (m *OSXUpdateSettings) GetLastSearchSuccessDate() int64 {
	if m != nil && m.LastSearchSuccessDate != nil {
		return *m.LastSearchSuccessDate
	}
	return 0
}

func (m *OSXUpdateSettings) GetInstallMicrosoftUpdates() bool {
	if m != nil && m.InstallMicrosoftUpdates != nil {
		return *m.InstallMicrosoftUpdates
	}
	return false
}

func (m *OSXUpdateSettings) GetWUA_ServersGUID() string {
	if m != nil && m.WUA_ServersGUID != nil {
		return *m.WUA_ServersGUID
	}
	return ""
}

func (m *OSXUpdateSettings) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *OSXUpdateSettings) GetInstalledUpdates() int32 {
	if m != nil && m.InstalledUpdates != nil {
		return *m.InstalledUpdates
	}
	return 0
}

func (m *OSXUpdateSettings) GetAvailableUpdates() int32 {
	if m != nil && m.AvailableUpdates != nil {
		return *m.AvailableUpdates
	}
	return 0
}

func (m *OSXUpdateSettings) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*OSXUpdateSettings)(nil), "OSXUpdateSettings")
	proto.RegisterEnum("OSXUpdateSettings_AutomaticUpdatesNotificationLevel", OSXUpdateSettings_AutomaticUpdatesNotificationLevel_name, OSXUpdateSettings_AutomaticUpdatesNotificationLevel_value)
	proto.RegisterEnum("OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay", OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay_name, OSXUpdateSettings_AutomaticUpdatesScheduledInstallationDay_value)
}

var fileDescriptor62 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x4e, 0x1b, 0x47,
	0x18, 0xad, 0x7f, 0xf8, 0xf1, 0x57, 0x30, 0xeb, 0x05, 0xcc, 0x50, 0x28, 0x35, 0xbe, 0xa8, 0x7c,
	0x51, 0xf9, 0x02, 0xf5, 0xae, 0x52, 0x25, 0x5c, 0x43, 0x85, 0x54, 0x17, 0xc4, 0x42, 0x88, 0x94,
	0x8b, 0x68, 0xb2, 0x33, 0x36, 0x13, 0xad, 0x67, 0x9c, 0xf9, 0x31, 0x72, 0x2e, 0xf3, 0x3a, 0xb9,
	0xce, 0x3b, 0xe4, 0x2d, 0xf2, 0x2a, 0xf9, 0x76, 0xd6, 0x8b, 0x8d, 0x8d, 0x14, 0x2e, 0xf7, 0x9c,
	0x33, 0xdf, 0x9c, 0x39, 0x73, 0x66, 0x61, 0xef, 0x32, 0x7a, 0x7d, 0x3b, 0x62, 0xd4, 0xf2, 0x88,
	0x5b, 0x2b, 0xe4, 0xc0, 0xb4, 0x47, 0x5a, 0x59, 0xf5, 0x4b, 0x78, 0xa5, 0x8c, 0x1d, 0x68, 0x6e,
	0x6e, 0x26, 0x23, 0x9e, 0x61, 0xcd, 0xaf, 0x15, 0xa8, 0x2d, 0xe9, 0xc3, 0x06, 0x54, 0xac, 0x18,
	0xf2, 0xc8, 0xd2, 0xe1, 0x88, 0x14, 0x1a, 0xc5, 0x56, 0xa9, 0xb3, 0xf9, 0xe9, 0x0b, 0xf1, 0xa0,
	0x49, 0xc1, 0xf0, 0x00, 0x2a, 0x74, 0xc0, 0xa5, 0xfd, 0xf7, 0xf6, 0xa2, 0x4b, 0x8a, 0xa8, 0xa8,
	0x74, 0xd6, 0x51, 0x51, 0x76, 0x4e, 0xb0, 0xb0, 0x0e, 0x55, 0xc3, 0xf5, 0x58, 0xc4, 0xfc, 0x4c,
	0xd2, 0x77, 0x09, 0x67, 0xa4, 0xd4, 0x28, 0xb4, 0xd6, 0xc3, 0x4b, 0xa8, 0x49, 0x65, 0x45, 0x5f,
	0xc4, 0xd4, 0x0a, 0x25, 0xff, 0xe3, 0x63, 0x9e, 0x90, 0x32, 0x52, 0xd5, 0x93, 0x3f, 0xdb, 0xcb,
	0xae, 0x4f, 0x9d, 0x55, 0x43, 0x54, 0xc6, 0x19, 0x6e, 0xfe, 0x5f, 0x5c, 0x1b, 0xb6, 0xa0, 0xb1,
	0x28, 0xca, 0x57, 0x5f, 0x73, 0xca, 0x2e, 0x65, 0x32, 0x21, 0x2b, 0x7e, 0xeb, 0xdf, 0xe1, 0x68,
	0x41, 0x19, 0x65, 0x0e, 0xaf, 0xf9, 0x07, 0x27, 0x34, 0x5a, 0x5c, 0xf5, 0xba, 0x37, 0x50, 0x37,
	0xf1, 0x3d, 0x67, 0x0e, 0x5d, 0x77, 0xe9, 0xe4, 0x5c, 0xe9, 0xe9, 0x5c, 0xb2, 0xe6, 0x7d, 0xfe,
	0xf5, 0x02, 0x9f, 0x51, 0x3e, 0xe0, 0x42, 0x62, 0x58, 0x49, 0xe2, 0x0d, 0xe3, 0xb0, 0xf0, 0x18,
	0xf6, 0xcd, 0x73, 0xdc, 0x0d, 0xc6, 0x4a, 0xd6, 0x71, 0xfe, 0x4a, 0x2a, 0x11, 0x32, 0x4e, 0x1c,
	0x43, 0x63, 0xb1, 0x1a, 0x0e, 0xb9, 0x64, 0x9c, 0xe5, 0x16, 0x2a, 0xde, 0xe2, 0x11, 0xd4, 0xfb,
	0x9c, 0x5a, 0xa7, 0x1f, 0x89, 0x3c, 0x65, 0xf0, 0x3c, 0x8e, 0x90, 0x4a, 0x9e, 0xb2, 0xa1, 0x90,
	0xc2, 0x58, 0x4d, 0xad, 0xd2, 0xe6, 0x2c, 0xe1, 0x63, 0x54, 0x32, 0xf2, 0xb3, 0x97, 0xec, 0xc1,
	0xd6, 0x83, 0xa3, 0x3d, 0xfa, 0x5e, 0xe9, 0x57, 0x5c, 0x1b, 0xb4, 0x40, 0x36, 0xfc, 0xf6, 0x53,
	0x42, 0xc8, 0x19, 0xb1, 0xe9, 0x89, 0x7d, 0xa8, 0x21, 0x71, 0xa5, 0x15, 0x73, 0xb1, 0xcd, 0xa9,
	0x2a, 0x52, 0x95, 0xf0, 0x04, 0x0e, 0x12, 0x6a, 0xec, 0xfc, 0x81, 0x22, 0x17, 0xc7, 0xdc, 0x98,
	0x2e, 0x6e, 0x49, 0xb6, 0x50, 0xb4, 0x54, 0x9f, 0x3f, 0x60, 0x37, 0x5d, 0x13, 0x71, 0xaa, 0xe3,
	0xfb, 0x79, 0x75, 0xf0, 0x9c, 0xfa, 0x37, 0xd8, 0x13, 0xd9, 0xf4, 0x9e, 0x88, 0xb5, 0x32, 0xaa,
	0x6f, 0xf3, 0x48, 0x6a, 0xf9, 0x79, 0xee, 0x6e, 0x4f, 0xdf, 0xa6, 0x57, 0x8a, 0xd6, 0x7c, 0x27,
	0x43, 0xef, 0xad, 0x0a, 0xab, 0x46, 0x58, 0x7e, 0xc1, 0xc8, 0xb6, 0xff, 0x26, 0x10, 0x4c, 0x27,
	0xcd, 0x52, 0xdd, 0xf1, 0x07, 0x44, 0x86, 0x8e, 0xa9, 0x48, 0xd2, 0x24, 0x73, 0x66, 0xd7, 0x33,
	0x75, 0xf0, 0xad, 0x26, 0xf5, 0x74, 0xc2, 0xac, 0xe5, 0xcd, 0xcf, 0x05, 0x38, 0xfe, 0x71, 0x45,
	0x77, 0xa1, 0x46, 0x9d, 0x4c, 0x90, 0xf8, 0x47, 0xc9, 0xbe, 0x18, 0xa4, 0xd7, 0x16, 0xfc, 0x14,
	0x06, 0xb0, 0x91, 0xc2, 0x5d, 0x61, 0xfc, 0xd5, 0x05, 0x85, 0xf0, 0x10, 0xc8, 0x54, 0x28, 0xfa,
	0x93, 0x0e, 0xef, 0x2b, 0xcd, 0xbb, 0xea, 0x41, 0x26, 0x8a, 0xb2, 0xa0, 0x88, 0x2f, 0xf2, 0x70,
	0x91, 0x9d, 0x0f, 0x3c, 0x28, 0x85, 0xbf, 0xc2, 0x7e, 0xaa, 0x78, 0xb6, 0x7c, 0x41, 0xb9, 0xf9,
	0xad, 0x00, 0xad, 0x17, 0x17, 0xb5, 0x06, 0x9b, 0xd4, 0x19, 0xc1, 0xce, 0x30, 0xce, 0x09, 0x02,
	0x68, 0x78, 0x07, 0xf3, 0x79, 0x84, 0x22, 0x27, 0x19, 0xa2, 0x85, 0xa7, 0x68, 0x4f, 0x79, 0xb4,
	0x98, 0x9d, 0x39, 0x47, 0x6f, 0x1c, 0x37, 0x29, 0x5c, 0xc2, 0x5b, 0xda, 0x9e, 0xc1, 0x77, 0x9c,
	0xc9, 0x8c, 0x28, 0x63, 0xc2, 0xe1, 0x9c, 0xfe, 0xde, 0x69, 0x8f, 0xaf, 0x3c, 0x9d, 0x7e, 0xae,
	0x45, 0x8a, 0xae, 0x3e, 0x55, 0x47, 0xe9, 0x43, 0x48, 0xf1, 0xb5, 0xce, 0xdf, 0xd0, 0xc4, 0x17,
	0xd3, 0xfe, 0x28, 0xfa, 0x96, 0xcb, 0xb6, 0xf1, 0x5d, 0xc8, 0xfe, 0x72, 0xb1, 0x4a, 0xda, 0xd8,
	0x25, 0x83, 0x7f, 0xac, 0x0e, 0x59, 0x7a, 0xbf, 0xbd, 0x8c, 0xf9, 0x1e, 0x00, 0x00, 0xff, 0xff,
	0x62, 0x7b, 0xb9, 0xf8, 0x38, 0x05, 0x00, 0x00,
}
