// Code generated by protoc-gen-go.
// source: LogonFailure.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogonFailure_LogonType int32

const (
	LogonFailure_LogonInteractive       LogonFailure_LogonType = 2
	LogonFailure_LogonNetwork           LogonFailure_LogonType = 3
	LogonFailure_LogonBatch             LogonFailure_LogonType = 4
	LogonFailure_LogonService           LogonFailure_LogonType = 5
	LogonFailure_LogonUnlock            LogonFailure_LogonType = 7
	LogonFailure_LogonNetworkCleartext  LogonFailure_LogonType = 8
	LogonFailure_LogonNewCredentials    LogonFailure_LogonType = 9
	LogonFailure_LogonRemoteInteractive LogonFailure_LogonType = 10
	LogonFailure_LogonCachedInteractive LogonFailure_LogonType = 11
)

var LogonFailure_LogonType_name = map[int32]string{
	2:  "LogonInteractive",
	3:  "LogonNetwork",
	4:  "LogonBatch",
	5:  "LogonService",
	7:  "LogonUnlock",
	8:  "LogonNetworkCleartext",
	9:  "LogonNewCredentials",
	10: "LogonRemoteInteractive",
	11: "LogonCachedInteractive",
}
var LogonFailure_LogonType_value = map[string]int32{
	"LogonInteractive":       2,
	"LogonNetwork":           3,
	"LogonBatch":             4,
	"LogonService":           5,
	"LogonUnlock":            7,
	"LogonNetworkCleartext":  8,
	"LogonNewCredentials":    9,
	"LogonRemoteInteractive": 10,
	"LogonCachedInteractive": 11,
}

func (x LogonFailure_LogonType) Enum() *LogonFailure_LogonType {
	p := new(LogonFailure_LogonType)
	*p = x
	return p
}
func (x LogonFailure_LogonType) String() string {
	return proto.EnumName(LogonFailure_LogonType_name, int32(x))
}
func (x *LogonFailure_LogonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogonFailure_LogonType_value, data, "LogonFailure_LogonType")
	if err != nil {
		return err
	}
	*x = LogonFailure_LogonType(value)
	return nil
}
func (LogonFailure_LogonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{0, 0} }

type LogonFailure_FailureType int32

const (
	LogonFailure_FailureUnknown                          LogonFailure_FailureType = 0
	LogonFailure_FailureUserNameDoesNotExist             LogonFailure_FailureType = 1
	LogonFailure_FailurePasswordIncorrect                LogonFailure_FailureType = 2
	LogonFailure_FailureUserLockedOut                    LogonFailure_FailureType = 3
	LogonFailure_FailureAccountCurrentlyLocked           LogonFailure_FailureType = 4
	LogonFailure_FailureUserOutsideTimeRestrictions      LogonFailure_FailureType = 5
	LogonFailure_FailureWorkstationRestriction           LogonFailure_FailureType = 6
	LogonFailure_FailureAccountExpiration                LogonFailure_FailureType = 7
	LogonFailure_FailurePasswordExpiration               LogonFailure_FailureType = 8
	LogonFailure_FailureClocksOutOfSync                  LogonFailure_FailureType = 9
	LogonFailure_FailureUserRequiredChangePassword       LogonFailure_FailureType = 10
	LogonFailure_FailureUserNotGrantedRequestedLogonType LogonFailure_FailureType = 11
)

var LogonFailure_FailureType_name = map[int32]string{
	0:  "FailureUnknown",
	1:  "FailureUserNameDoesNotExist",
	2:  "FailurePasswordIncorrect",
	3:  "FailureUserLockedOut",
	4:  "FailureAccountCurrentlyLocked",
	5:  "FailureUserOutsideTimeRestrictions",
	6:  "FailureWorkstationRestriction",
	7:  "FailureAccountExpiration",
	8:  "FailurePasswordExpiration",
	9:  "FailureClocksOutOfSync",
	10: "FailureUserRequiredChangePassword",
	11: "FailureUserNotGrantedRequestedLogonType",
}
var LogonFailure_FailureType_value = map[string]int32{
	"FailureUnknown":                          0,
	"FailureUserNameDoesNotExist":             1,
	"FailurePasswordIncorrect":                2,
	"FailureUserLockedOut":                    3,
	"FailureAccountCurrentlyLocked":           4,
	"FailureUserOutsideTimeRestrictions":      5,
	"FailureWorkstationRestriction":           6,
	"FailureAccountExpiration":                7,
	"FailurePasswordExpiration":               8,
	"FailureClocksOutOfSync":                  9,
	"FailureUserRequiredChangePassword":       10,
	"FailureUserNotGrantedRequestedLogonType": 11,
}

func (x LogonFailure_FailureType) Enum() *LogonFailure_FailureType {
	p := new(LogonFailure_FailureType)
	*p = x
	return p
}
func (x LogonFailure_FailureType) String() string {
	return proto.EnumName(LogonFailure_FailureType_name, int32(x))
}
func (x *LogonFailure_FailureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogonFailure_FailureType_value, data, "LogonFailure_FailureType")
	if err != nil {
		return err
	}
	*x = LogonFailure_FailureType(value)
	return nil
}
func (LogonFailure_FailureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor33, []int{0, 1} }

// This message is used by agent to report failure of someone trying to Log onto the system
type LogonFailure struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	SiteId    *string `protobuf:"bytes,3,opt,name=siteId" json:"siteId,omitempty"`
	Uuid      *string `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	// Type of logon that failed
	NLogonType    *LogonFailure_LogonType   `protobuf:"varint,5,req,name=nLogonType,enum=LogonFailure_LogonType" json:"nLogonType,omitempty"`
	NFailureType  *LogonFailure_FailureType `protobuf:"varint,6,req,name=nFailureType,enum=LogonFailure_FailureType" json:"nFailureType,omitempty"`
	StatusCode    *string                   `protobuf:"bytes,7,opt,name=StatusCode" json:"StatusCode,omitempty"`
	SubstatusCode *string                   `protobuf:"bytes,8,opt,name=SubstatusCode" json:"SubstatusCode,omitempty"`
	AccountName   *string                   `protobuf:"bytes,9,req,name=AccountName" json:"AccountName,omitempty"`
	DomainName    *string                   `protobuf:"bytes,10,req,name=DomainName" json:"DomainName,omitempty"`
	// true=Console logon/logoff, false=Remote logon/logoff
	IsConsole        *bool   `protobuf:"varint,11,req,name=isConsole" json:"isConsole,omitempty"`
	WorkstationName  *string `protobuf:"bytes,12,req,name=workstationName" json:"workstationName,omitempty"`
	ProcessUUID      *string `protobuf:"bytes,13,req,name=processUUID" json:"processUUID,omitempty"`
	IPAddress        *string `protobuf:"bytes,14,opt,name=IPAddress" json:"IPAddress,omitempty"`
	IPPort           *string `protobuf:"bytes,15,opt,name=IPPort" json:"IPPort,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogonFailure) Reset()                    { *m = LogonFailure{} }
func (m *LogonFailure) String() string            { return proto.CompactTextString(m) }
func (*LogonFailure) ProtoMessage()               {}
func (*LogonFailure) Descriptor() ([]byte, []int) { return fileDescriptor33, []int{0} }

func (m *LogonFailure) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *LogonFailure) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *LogonFailure) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *LogonFailure) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *LogonFailure) GetNLogonType() LogonFailure_LogonType {
	if m != nil && m.NLogonType != nil {
		return *m.NLogonType
	}
	return LogonFailure_LogonInteractive
}

func (m *LogonFailure) GetNFailureType() LogonFailure_FailureType {
	if m != nil && m.NFailureType != nil {
		return *m.NFailureType
	}
	return LogonFailure_FailureUnknown
}

func (m *LogonFailure) GetStatusCode() string {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return ""
}

func (m *LogonFailure) GetSubstatusCode() string {
	if m != nil && m.SubstatusCode != nil {
		return *m.SubstatusCode
	}
	return ""
}

func (m *LogonFailure) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *LogonFailure) GetDomainName() string {
	if m != nil && m.DomainName != nil {
		return *m.DomainName
	}
	return ""
}

func (m *LogonFailure) GetIsConsole() bool {
	if m != nil && m.IsConsole != nil {
		return *m.IsConsole
	}
	return false
}

func (m *LogonFailure) GetWorkstationName() string {
	if m != nil && m.WorkstationName != nil {
		return *m.WorkstationName
	}
	return ""
}

func (m *LogonFailure) GetProcessUUID() string {
	if m != nil && m.ProcessUUID != nil {
		return *m.ProcessUUID
	}
	return ""
}

func (m *LogonFailure) GetIPAddress() string {
	if m != nil && m.IPAddress != nil {
		return *m.IPAddress
	}
	return ""
}

func (m *LogonFailure) GetIPPort() string {
	if m != nil && m.IPPort != nil {
		return *m.IPPort
	}
	return ""
}

func init() {
	proto.RegisterType((*LogonFailure)(nil), "LogonFailure")
	proto.RegisterEnum("LogonFailure_LogonType", LogonFailure_LogonType_name, LogonFailure_LogonType_value)
	proto.RegisterEnum("LogonFailure_FailureType", LogonFailure_FailureType_name, LogonFailure_FailureType_value)
}

var fileDescriptor33 = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x54, 0xdd, 0x4e, 0x1b, 0x3d,
	0x10, 0xfd, 0x42, 0xf8, 0xc9, 0x4e, 0x20, 0xec, 0x67, 0xfe, 0x16, 0x28, 0x2a, 0x44, 0x6a, 0x8b,
	0x84, 0x94, 0x4a, 0xbd, 0xeb, 0x25, 0x09, 0x14, 0x45, 0xa2, 0x10, 0x11, 0xa2, 0x5e, 0x6f, 0xbd,
	0x43, 0xb0, 0xd8, 0xd8, 0xa9, 0xed, 0xe5, 0xa7, 0x97, 0x7d, 0x87, 0x3e, 0x4a, 0x5f, 0xa4, 0x4f,
	0xd3, 0xcb, 0x8e, 0x9d, 0x25, 0x31, 0xbd, 0xf4, 0x99, 0x33, 0xe3, 0x33, 0xe7, 0xac, 0x17, 0xd8,
	0xb9, 0x1a, 0x2a, 0xf9, 0x29, 0x15, 0x79, 0xa1, 0xb1, 0x35, 0xd6, 0xca, 0xaa, 0x1d, 0xd6, 0x53,
	0xc6, 0x0e, 0x35, 0x9a, 0xeb, 0xa7, 0x71, 0x89, 0x35, 0xff, 0x2c, 0xc1, 0x72, 0x48, 0x65, 0xfb,
	0x10, 0x59, 0x31, 0xc2, 0xbe, 0x4d, 0x47, 0xe3, 0xa4, 0xb2, 0x3f, 0x77, 0x58, 0x6d, 0xaf, 0xfc,
	0xf8, 0x95, 0x78, 0xd0, 0x38, 0x90, 0xed, 0x42, 0x94, 0x0e, 0x51, 0xda, 0xb3, 0x41, 0xf7, 0x24,
	0x99, 0x23, 0x46, 0xd4, 0xae, 0x11, 0x63, 0xbe, 0x28, 0x44, 0xc6, 0x1a, 0xb0, 0x68, 0x84, 0xc5,
	0x6e, 0x96, 0x54, 0xf7, 0x2b, 0x87, 0x11, 0xdb, 0x04, 0x8f, 0x27, 0xf3, 0xee, 0x14, 0xf0, 0x8e,
	0x00, 0xa4, 0xbf, 0xd7, 0x69, 0x49, 0x16, 0x68, 0x4a, 0xe3, 0xc3, 0x56, 0xeb, 0x85, 0xe8, 0x69,
	0x99, 0xbd, 0x87, 0xe5, 0x67, 0xd4, 0xd3, 0x17, 0x3d, 0x7d, 0xfb, 0x25, 0x3d, 0x20, 0x30, 0x06,
	0x40, 0x0b, 0xd8, 0xc2, 0x74, 0x54, 0x86, 0xc9, 0x92, 0x57, 0xb2, 0x01, 0x2b, 0xfd, 0xe2, 0xab,
	0x99, 0xc1, 0x35, 0x0f, 0xaf, 0x41, 0xfd, 0x98, 0x73, 0x55, 0x48, 0x7b, 0x91, 0x8e, 0x30, 0x89,
	0xdc, 0x3e, 0xae, 0xff, 0x44, 0x8d, 0x52, 0x21, 0x3d, 0x06, 0x1e, 0xfb, 0x1f, 0x22, 0x41, 0x8d,
	0xd2, 0xa8, 0x1c, 0x93, 0x3a, 0x41, 0x35, 0xb6, 0x05, 0xab, 0x0f, 0x4a, 0xdf, 0xb9, 0x99, 0x42,
	0x4d, 0xb8, 0xcb, 0x9e, 0x4b, 0x43, 0xc9, 0x5e, 0x8e, 0xc6, 0x0c, 0x9c, 0x49, 0x2b, 0xcf, 0x03,
	0xba, 0xbd, 0xe3, 0x2c, 0xa3, 0x00, 0x4c, 0xd2, 0xf0, 0x97, 0x93, 0x5b, 0xdd, 0x5e, 0x4f, 0x69,
	0x9b, 0xac, 0xba, 0x73, 0xf3, 0x77, 0x05, 0xa2, 0xd9, 0xda, 0xeb, 0x10, 0xfb, 0x43, 0x57, 0x5a,
	0xd4, 0x29, 0xb7, 0xe2, 0x1e, 0xe3, 0x39, 0x16, 0x97, 0x81, 0x5d, 0xa0, 0x75, 0x97, 0xc7, 0x55,
	0x9a, 0x02, 0x1e, 0x69, 0xa7, 0x96, 0xdf, 0xc6, 0xf3, 0x53, 0x46, 0x1f, 0xf5, 0xbd, 0xe0, 0x18,
	0x2f, 0xb0, 0x55, 0xa8, 0x7b, 0x64, 0x20, 0x73, 0xc5, 0xef, 0xe2, 0x25, 0xb6, 0x0d, 0x1b, 0xe1,
	0x90, 0x4e, 0x8e, 0xa9, 0xb6, 0xf8, 0x68, 0x63, 0xb7, 0xd4, 0x5a, 0x59, 0x7a, 0xe8, 0x68, 0xcc,
	0x28, 0x68, 0x91, 0xe6, 0x26, 0x8e, 0xd8, 0x0e, 0x6c, 0xfa, 0xc2, 0x15, 0x8e, 0x14, 0x25, 0x1c,
	0x88, 0x82, 0x69, 0xad, 0x93, 0xf2, 0x5b, 0xcc, 0xc2, 0x5a, 0xbd, 0xf9, 0xb3, 0x0a, 0xf5, 0x97,
	0xe1, 0x34, 0xca, 0xe3, 0x40, 0xde, 0x49, 0xf5, 0x20, 0xe3, 0xff, 0xd8, 0x6b, 0xd8, 0x7d, 0xc6,
	0x0c, 0x6a, 0xe7, 0xe4, 0x89, 0x42, 0x73, 0xa1, 0xec, 0xe9, 0xa3, 0x30, 0x36, 0xae, 0xb0, 0x57,
	0x90, 0x94, 0x84, 0x5e, 0x6a, 0x0c, 0x69, 0xa6, 0x4b, 0xb8, 0xd2, 0x1a, 0xb9, 0x25, 0x4f, 0x12,
	0x58, 0x0f, 0xda, 0xcf, 0x69, 0x47, 0xcc, 0x2e, 0x0b, 0x4b, 0xde, 0x1c, 0xc0, 0x5e, 0x59, 0x29,
	0x53, 0xee, 0x14, 0xd4, 0x24, 0x6d, 0xfe, 0x34, 0x61, 0x91, 0x5d, 0x6f, 0xa1, 0x19, 0x34, 0x53,
	0x9b, 0x11, 0x19, 0x5e, 0xd3, 0xe7, 0x7e, 0x45, 0x1f, 0xbc, 0x16, 0xdc, 0x65, 0x6b, 0xc8, 0xc4,
	0xd9, 0xa8, 0x2f, 0xb3, 0xd0, 0x03, 0x4e, 0xbc, 0x18, 0xa8, 0x2c, 0x6f, 0x3b, 0x7d, 0x1c, 0x0b,
	0xed, 0x89, 0x64, 0xfa, 0x1e, 0x6c, 0xff, 0xb3, 0x43, 0x50, 0xae, 0x39, 0x0f, 0xcb, 0x72, 0xc7,
	0xa5, 0x64, 0x48, 0xc9, 0xe5, 0x4d, 0xff, 0x49, 0x72, 0xf2, 0xfe, 0x0d, 0x1c, 0x04, 0x1a, 0xaf,
	0xf0, 0x5b, 0x21, 0x28, 0x9b, 0xce, 0x6d, 0x2a, 0x87, 0xd3, 0x61, 0x14, 0xc3, 0x11, 0xbc, 0x0b,
	0x6d, 0x54, 0xf6, 0x4c, 0xa7, 0x94, 0x45, 0xe6, 0x1a, 0x48, 0x28, 0x66, 0xd3, 0x8f, 0x2b, 0xae,
	0xb7, 0x3f, 0x42, 0x93, 0xab, 0x51, 0xeb, 0xbb, 0xb8, 0xb1, 0x28, 0x5b, 0xc4, 0xbf, 0x47, 0x3d,
	0xf9, 0x2b, 0x70, 0x95, 0xb7, 0xe8, 0xb5, 0x1b, 0x7a, 0xe6, 0xed, 0xb5, 0xf0, 0x91, 0x7d, 0x9e,
	0x80, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x9a, 0xfd, 0xa7, 0x5e, 0x04, 0x00, 0x00,
}
