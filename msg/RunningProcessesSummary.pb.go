// Code generated by protoc-gen-go.
// source: RunningProcessesSummary.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This message is used to send a summary of running processes within a specified period of time to the server.
// Processes are grouped by the combination of full imageFilepath, account name and domain (given user).
type RunningProcessesSummary struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// MD5 of the server name we are reporting to
	SiteId *string `protobuf:"bytes,3,opt,name=siteId" json:"siteId,omitempty"`
	// Timestamp for beginning of process monitoring for this message
	StartMonitorPeriod *int64 `protobuf:"varint,4,req,name=startMonitorPeriod" json:"startMonitorPeriod,omitempty"`
	// Timestamp for end of process monitoring for this message
	EndMonitorPeriod *int64 `protobuf:"varint,5,req,name=endMonitorPeriod" json:"endMonitorPeriod,omitempty"`
	// Fully qualified path to file
	ImageFilepath []string `protobuf:"bytes,6,rep,name=imageFilepath" json:"imageFilepath,omitempty"`
	// MD5 of the File Contents to double check file validity and pattern matching
	ImageFileMD5 []string `protobuf:"bytes,7,rep,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	// Timestamp when first instance of process seen OR first launched (whichever is later)
	FirstSeen []int64 `protobuf:"varint,8,rep,name=FirstSeen" json:"FirstSeen,omitempty"`
	// Timestamp when the last instance of the process terminated OR end of time period
	LastSeen []int64 `protobuf:"varint,9,rep,name=LastSeen" json:"LastSeen,omitempty"`
	// How many instances of this process were already running at the start of the time period
	NumInstancesSeenAtStart []int32 `protobuf:"varint,10,rep,name=NumInstancesSeenAtStart" json:"NumInstancesSeenAtStart,omitempty"`
	// How many instances of this process were still running at the end of the time period
	NumInstancesStillRunningAtEnd []int32 `protobuf:"varint,11,rep,name=NumInstancesStillRunningAtEnd" json:"NumInstancesStillRunningAtEnd,omitempty"`
	// How many instances of this process were created during this time period
	NumInstancesCreatedDuring []int32 `protobuf:"varint,12,rep,name=NumInstancesCreatedDuring" json:"NumInstancesCreatedDuring,omitempty"`
	// How many instances of this process were terminated during this time period
	NumInstancesTerminatedDuring []int32 `protobuf:"varint,13,rep,name=NumInstancesTerminatedDuring" json:"NumInstancesTerminatedDuring,omitempty"`
	// User name tied to the process creation
	AccountName []string `protobuf:"bytes,14,rep,name=accountName" json:"accountName,omitempty"`
	// Domain name tied to the process creation
	Domain []string `protobuf:"bytes,15,rep,name=domain" json:"domain,omitempty"`
	Uuid   *string  `protobuf:"bytes,16,opt,name=uuid" json:"uuid,omitempty"`
	// This UUID is to group RunningProcessSummary messages in queries on the server
	RpsUUID          *string `protobuf:"bytes,19,opt,name=rpsUUID" json:"rpsUUID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RunningProcessesSummary) Reset()                    { *m = RunningProcessesSummary{} }
func (m *RunningProcessesSummary) String() string            { return proto.CompactTextString(m) }
func (*RunningProcessesSummary) ProtoMessage()               {}
func (*RunningProcessesSummary) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{0} }

func (m *RunningProcessesSummary) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *RunningProcessesSummary) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *RunningProcessesSummary) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *RunningProcessesSummary) GetStartMonitorPeriod() int64 {
	if m != nil && m.StartMonitorPeriod != nil {
		return *m.StartMonitorPeriod
	}
	return 0
}

func (m *RunningProcessesSummary) GetEndMonitorPeriod() int64 {
	if m != nil && m.EndMonitorPeriod != nil {
		return *m.EndMonitorPeriod
	}
	return 0
}

func (m *RunningProcessesSummary) GetImageFilepath() []string {
	if m != nil {
		return m.ImageFilepath
	}
	return nil
}

func (m *RunningProcessesSummary) GetImageFileMD5() []string {
	if m != nil {
		return m.ImageFileMD5
	}
	return nil
}

func (m *RunningProcessesSummary) GetFirstSeen() []int64 {
	if m != nil {
		return m.FirstSeen
	}
	return nil
}

func (m *RunningProcessesSummary) GetLastSeen() []int64 {
	if m != nil {
		return m.LastSeen
	}
	return nil
}

func (m *RunningProcessesSummary) GetNumInstancesSeenAtStart() []int32 {
	if m != nil {
		return m.NumInstancesSeenAtStart
	}
	return nil
}

func (m *RunningProcessesSummary) GetNumInstancesStillRunningAtEnd() []int32 {
	if m != nil {
		return m.NumInstancesStillRunningAtEnd
	}
	return nil
}

func (m *RunningProcessesSummary) GetNumInstancesCreatedDuring() []int32 {
	if m != nil {
		return m.NumInstancesCreatedDuring
	}
	return nil
}

func (m *RunningProcessesSummary) GetNumInstancesTerminatedDuring() []int32 {
	if m != nil {
		return m.NumInstancesTerminatedDuring
	}
	return nil
}

func (m *RunningProcessesSummary) GetAccountName() []string {
	if m != nil {
		return m.AccountName
	}
	return nil
}

func (m *RunningProcessesSummary) GetDomain() []string {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *RunningProcessesSummary) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *RunningProcessesSummary) GetRpsUUID() string {
	if m != nil && m.RpsUUID != nil {
		return *m.RpsUUID
	}
	return ""
}

func init() {
	proto.RegisterType((*RunningProcessesSummary)(nil), "RunningProcessesSummary")
}

var fileDescriptor77 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xd5, 0x26, 0x6d, 0xe3, 0x69, 0x53, 0x2a, 0x17, 0xe8, 0x06, 0x08, 0x98, 0x08, 0x44,
	0x78, 0xf1, 0x1b, 0x07, 0x88, 0x31, 0x41, 0x91, 0x48, 0x14, 0xe1, 0xe4, 0x00, 0x2b, 0x7b, 0x08,
	0x2b, 0x79, 0x77, 0xad, 0xdd, 0x31, 0x52, 0x78, 0xe4, 0x0e, 0x1c, 0x85, 0xfb, 0xb1, 0xde, 0x44,
	0xc8, 0x11, 0xc9, 0xe3, 0xfe, 0xf3, 0xcd, 0xd8, 0xf3, 0xff, 0x03, 0xc3, 0xaf, 0xb5, 0x52, 0x42,
	0x6d, 0x96, 0x46, 0xe7, 0x68, 0x2d, 0xda, 0xac, 0x96, 0x92, 0x9b, 0x6d, 0x5c, 0x19, 0x4d, 0xfa,
	0x59, 0xb8, 0xd4, 0x96, 0x36, 0x06, 0xed, 0x6a, 0x5b, 0xe1, 0x4e, 0x1b, 0xfd, 0xee, 0xc2, 0xc3,
	0x89, 0xae, 0x30, 0x82, 0x80, 0x84, 0xc4, 0x8c, 0xb8, 0xac, 0xd8, 0x59, 0x74, 0x3e, 0xee, 0x24,
	0xfd, 0x5f, 0x7f, 0x98, 0x17, 0x6d, 0x23, 0x86, 0xcf, 0x21, 0xe0, 0x1b, 0x54, 0xf4, 0x79, 0x3d,
	0x4b, 0xd9, 0xb9, 0x23, 0x82, 0xa4, 0xe7, 0x88, 0x6e, 0x5d, 0x8b, 0x22, 0xbc, 0x85, 0x4b, 0x2b,
	0x08, 0x67, 0x05, 0xeb, 0x44, 0x67, 0xe3, 0x20, 0x7c, 0x0f, 0xa1, 0xeb, 0x32, 0x34, 0xd7, 0x4a,
	0x90, 0x36, 0x4b, 0x34, 0x42, 0x17, 0xac, 0x7b, 0x6c, 0xee, 0x3b, 0xb8, 0x43, 0x55, 0x1c, 0x82,
	0x17, 0xc7, 0xc0, 0x27, 0xd0, 0x17, 0xd2, 0xfd, 0xc2, 0x54, 0x94, 0x58, 0x71, 0xfa, 0xce, 0x2e,
	0xa3, 0x8e, 0xfb, 0xd4, 0x63, 0xb8, 0xf9, 0x27, 0xcf, 0xd3, 0x0f, 0xec, 0xca, 0xab, 0x6e, 0x9f,
	0xa9, 0x30, 0x96, 0x32, 0x44, 0xc5, 0x7a, 0x4e, 0xfa, 0x6f, 0xdc, 0x2b, 0xe8, 0x7d, 0xe1, 0x7b,
	0x20, 0x38, 0x0e, 0x3c, 0x2c, 0x6a, 0x39, 0x53, 0xee, 0xa5, 0x9c, 0x59, 0x0d, 0x38, 0xa1, 0xac,
	0xd9, 0x8a, 0x81, 0xe3, 0x2f, 0xc2, 0xb7, 0x30, 0x3c, 0x00, 0x48, 0x94, 0xe5, 0xde, 0xdf, 0x09,
	0x7d, 0x52, 0x05, 0xbb, 0xf6, 0xd8, 0x6b, 0x18, 0xb4, 0xb1, 0x8f, 0x06, 0x39, 0x61, 0x91, 0xd6,
	0xc6, 0x71, 0xec, 0xc6, 0x23, 0x6f, 0xe0, 0x45, 0x1b, 0x59, 0xa1, 0x91, 0x42, 0xb5, 0xa8, 0xbe,
	0xa7, 0xee, 0xe1, 0x9a, 0xe7, 0xb9, 0xae, 0x15, 0x2d, 0xb8, 0x44, 0x76, 0xeb, 0x17, 0x75, 0xce,
	0x17, 0x5a, 0x72, 0xa1, 0xd8, 0x23, 0xff, 0x7e, 0x0a, 0x3e, 0x11, 0x76, 0xd7, 0xe4, 0xd0, 0x4a,
	0x68, 0x00, 0x57, 0xa6, 0xb2, 0xeb, 0x26, 0xbc, 0xfb, 0xc3, 0x52, 0x92, 0xc2, 0x28, 0xd7, 0x32,
	0xfe, 0x29, 0xbe, 0x11, 0xaa, 0xd8, 0xa2, 0xf9, 0x81, 0x66, 0x77, 0x32, 0xb9, 0x2e, 0x63, 0x67,
	0x87, 0x75, 0xf6, 0x26, 0x2f, 0x4f, 0x9c, 0xce, 0x7c, 0x57, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x9f, 0xe8, 0xa0, 0x33, 0x91, 0x02, 0x00, 0x00,
}
