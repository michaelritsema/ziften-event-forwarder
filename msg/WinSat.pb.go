// Code generated by protoc-gen-go.
// source: WinSat.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WinSat struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// As of Jan 25, 2013 ... these are the 5 possible values for assessmentState
	// 	  WINSAT_ASSESSMENT_STATE_UNKNOWN                   = 0,
	// 	  WINSAT_ASSESSMENT_STATE_VALID                     = 1,
	// 	  WINSAT_ASSESSMENT_STATE_INCOHERENT_WITH_HARDWARE  = 2,
	// 	  WINSAT_ASSESSMENT_STATE_NOT_AVAILABLE             = 3,
	// 	  WINSAT_ASSESSMENT_STATE_INVALID                   = 4,
	AssessmentState *int32 `protobuf:"varint,3,req,name=assessmentState" json:"assessmentState,omitempty"`
	// See Windows System Assessment Tool for more information
	// http://msdn.microsoft.com/en-us/library/cc948912(v=vs.85).aspx
	AssessmentTime   *int64   `protobuf:"varint,4,req,name=assessmentTime" json:"assessmentTime,omitempty"`
	CpuScore         *float32 `protobuf:"fixed32,5,req,name=cpuScore" json:"cpuScore,omitempty"`
	MemoryScore      *float32 `protobuf:"fixed32,6,req,name=memoryScore" json:"memoryScore,omitempty"`
	DiskScore        *float32 `protobuf:"fixed32,7,req,name=diskScore" json:"diskScore,omitempty"`
	D3DScore         *float32 `protobuf:"fixed32,8,req,name=d3dScore" json:"d3dScore,omitempty"`
	GraphicsScore    *float32 `protobuf:"fixed32,9,req,name=graphicsScore" json:"graphicsScore,omitempty"`
	SiteId           *string  `protobuf:"bytes,10,opt,name=siteId" json:"siteId,omitempty"`
	Uuid             *string  `protobuf:"bytes,11,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *WinSat) Reset()                    { *m = WinSat{} }
func (m *WinSat) String() string            { return proto.CompactTextString(m) }
func (*WinSat) ProtoMessage()               {}
func (*WinSat) Descriptor() ([]byte, []int) { return fileDescriptor88, []int{0} }

func (m *WinSat) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *WinSat) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *WinSat) GetAssessmentState() int32 {
	if m != nil && m.AssessmentState != nil {
		return *m.AssessmentState
	}
	return 0
}

func (m *WinSat) GetAssessmentTime() int64 {
	if m != nil && m.AssessmentTime != nil {
		return *m.AssessmentTime
	}
	return 0
}

func (m *WinSat) GetCpuScore() float32 {
	if m != nil && m.CpuScore != nil {
		return *m.CpuScore
	}
	return 0
}

func (m *WinSat) GetMemoryScore() float32 {
	if m != nil && m.MemoryScore != nil {
		return *m.MemoryScore
	}
	return 0
}

func (m *WinSat) GetDiskScore() float32 {
	if m != nil && m.DiskScore != nil {
		return *m.DiskScore
	}
	return 0
}

func (m *WinSat) GetD3DScore() float32 {
	if m != nil && m.D3DScore != nil {
		return *m.D3DScore
	}
	return 0
}

func (m *WinSat) GetGraphicsScore() float32 {
	if m != nil && m.GraphicsScore != nil {
		return *m.GraphicsScore
	}
	return 0
}

func (m *WinSat) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *WinSat) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*WinSat)(nil), "WinSat")
}

var fileDescriptor88 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0xd0, 0xbf, 0x4e, 0xfb, 0x30,
	0x10, 0x07, 0x70, 0x35, 0xfd, 0xf3, 0xab, 0xaf, 0xbf, 0x14, 0x30, 0x02, 0x2c, 0x58, 0xa2, 0x4e,
	0x9d, 0xb2, 0xf4, 0x0d, 0x22, 0x24, 0xd4, 0x01, 0x09, 0x29, 0x45, 0xcc, 0x51, 0x72, 0x04, 0x0b,
	0x1c, 0x47, 0x3e, 0x07, 0xa9, 0x8c, 0xf0, 0x4c, 0xbc, 0x1f, 0x17, 0x7b, 0xe8, 0x78, 0x1f, 0x7f,
	0x7d, 0xba, 0x3b, 0xf8, 0xff, 0xa2, 0xbb, 0xb2, 0xf2, 0x79, 0xef, 0xac, 0xb7, 0xb7, 0xf2, 0xc9,
	0x92, 0x6f, 0x1d, 0xd2, 0xe1, 0xd8, 0x63, 0xb4, 0xcd, 0x4f, 0x02, 0x8b, 0x18, 0x92, 0x19, 0x08,
	0xaf, 0x0d, 0x96, 0xbe, 0x32, 0xbd, 0x9a, 0x64, 0xc9, 0x76, 0x5a, 0xa4, 0xdf, 0xbf, 0x2a, 0x20,
	0x8d, 0x28, 0xef, 0x40, 0x54, 0x2d, 0x76, 0xfe, 0xe1, 0x79, 0x7f, 0xaf, 0x12, 0x4e, 0x88, 0x62,
	0xc9, 0x89, 0xd9, 0x30, 0xe8, 0x46, 0xde, 0xc0, 0x59, 0x45, 0x84, 0x44, 0x86, 0x13, 0xdc, 0xc4,
	0xa3, 0x9a, 0x72, 0x64, 0x2e, 0xaf, 0x61, 0x7d, 0x7a, 0x38, 0x70, 0x33, 0x35, 0x1b, 0x9b, 0xcb,
	0x73, 0x58, 0xd6, 0xfd, 0x50, 0xd6, 0xd6, 0xa1, 0x9a, 0xb3, 0x24, 0xf2, 0x12, 0x56, 0x06, 0x8d,
	0x75, 0xc7, 0x88, 0x8b, 0x80, 0x17, 0x20, 0x1a, 0x4d, 0xef, 0x91, 0xfe, 0x05, 0xe2, 0x9f, 0xcd,
	0xae, 0x89, 0xb2, 0x0c, 0x72, 0x05, 0x69, 0xeb, 0xaa, 0xfe, 0x4d, 0xd7, 0x14, 0x59, 0x04, 0x5e,
	0xc3, 0x82, 0xb4, 0xc7, 0x7d, 0xa3, 0x20, 0x9b, 0x6c, 0x05, 0x8f, 0x12, 0x66, 0x55, 0xab, 0xb1,
	0x3a, 0xcd, 0x5e, 0xec, 0x60, 0x53, 0x5b, 0x93, 0x7f, 0xe9, 0x57, 0x8f, 0x5d, 0x4e, 0xe8, 0x3e,
	0xd1, 0xc5, 0x03, 0xd5, 0xf6, 0x23, 0xe7, 0xf5, 0x89, 0xf7, 0x2e, 0xd2, 0x78, 0xa8, 0xc7, 0x58,
	0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x20, 0x49, 0x69, 0xa5, 0x5d, 0x01, 0x00, 0x00,
}
