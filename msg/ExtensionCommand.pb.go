// Code generated by protoc-gen-go.
// source: ExtensionCommand.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExtensionCommand_ExtensionCommandType int32

const (
	ExtensionCommand_Install ExtensionCommand_ExtensionCommandType = 1
	ExtensionCommand_Remove  ExtensionCommand_ExtensionCommandType = 2
	ExtensionCommand_Enable  ExtensionCommand_ExtensionCommandType = 3
	ExtensionCommand_Disable ExtensionCommand_ExtensionCommandType = 4
	ExtensionCommand_Update  ExtensionCommand_ExtensionCommandType = 5
)

var ExtensionCommand_ExtensionCommandType_name = map[int32]string{
	1: "Install",
	2: "Remove",
	3: "Enable",
	4: "Disable",
	5: "Update",
}
var ExtensionCommand_ExtensionCommandType_value = map[string]int32{
	"Install": 1,
	"Remove":  2,
	"Enable":  3,
	"Disable": 4,
	"Update":  5,
}

func (x ExtensionCommand_ExtensionCommandType) Enum() *ExtensionCommand_ExtensionCommandType {
	p := new(ExtensionCommand_ExtensionCommandType)
	*p = x
	return p
}
func (x ExtensionCommand_ExtensionCommandType) String() string {
	return proto.EnumName(ExtensionCommand_ExtensionCommandType_name, int32(x))
}
func (x *ExtensionCommand_ExtensionCommandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExtensionCommand_ExtensionCommandType_value, data, "ExtensionCommand_ExtensionCommandType")
	if err != nil {
		return err
	}
	*x = ExtensionCommand_ExtensionCommandType(value)
	return nil
}
func (ExtensionCommand_ExtensionCommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor21, []int{0, 0}
}

// the type of object of this script; determines execution method, and platform relevance
type ExtensionCommand_ExtensionType int32

const (
	ExtensionCommand_PowerShellScript ExtensionCommand_ExtensionType = 1
	ExtensionCommand_BashShellScript  ExtensionCommand_ExtensionType = 2
	ExtensionCommand_PerlScript       ExtensionCommand_ExtensionType = 3
	ExtensionCommand_PythonScript     ExtensionCommand_ExtensionType = 4
	ExtensionCommand_RubyScript       ExtensionCommand_ExtensionType = 5
)

var ExtensionCommand_ExtensionType_name = map[int32]string{
	1: "PowerShellScript",
	2: "BashShellScript",
	3: "PerlScript",
	4: "PythonScript",
	5: "RubyScript",
}
var ExtensionCommand_ExtensionType_value = map[string]int32{
	"PowerShellScript": 1,
	"BashShellScript":  2,
	"PerlScript":       3,
	"PythonScript":     4,
	"RubyScript":       5,
}

func (x ExtensionCommand_ExtensionType) Enum() *ExtensionCommand_ExtensionType {
	p := new(ExtensionCommand_ExtensionType)
	*p = x
	return p
}
func (x ExtensionCommand_ExtensionType) String() string {
	return proto.EnumName(ExtensionCommand_ExtensionType_name, int32(x))
}
func (x *ExtensionCommand_ExtensionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExtensionCommand_ExtensionType_value, data, "ExtensionCommand_ExtensionType")
	if err != nil {
		return err
	}
	*x = ExtensionCommand_ExtensionType(value)
	return nil
}
func (ExtensionCommand_ExtensionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor21, []int{0, 1}
}

// Extension run hosting; what is running it
type ExtensionCommand_RunHosting int32

const (
	ExtensionCommand_Service   ExtensionCommand_RunHosting = 1
	ExtensionCommand_UserProxy ExtensionCommand_RunHosting = 2
)

var ExtensionCommand_RunHosting_name = map[int32]string{
	1: "Service",
	2: "UserProxy",
}
var ExtensionCommand_RunHosting_value = map[string]int32{
	"Service":   1,
	"UserProxy": 2,
}

func (x ExtensionCommand_RunHosting) Enum() *ExtensionCommand_RunHosting {
	p := new(ExtensionCommand_RunHosting)
	*p = x
	return p
}
func (x ExtensionCommand_RunHosting) String() string {
	return proto.EnumName(ExtensionCommand_RunHosting_name, int32(x))
}
func (x *ExtensionCommand_RunHosting) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExtensionCommand_RunHosting_value, data, "ExtensionCommand_RunHosting")
	if err != nil {
		return err
	}
	*x = ExtensionCommand_RunHosting(value)
	return nil
}
func (ExtensionCommand_RunHosting) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor21, []int{0, 2}
}

// Extension run lifetime; if relevant (for spawned processes, etc.)
type ExtensionCommand_RunLifetime int32

const (
	ExtensionCommand_Ephemeral  ExtensionCommand_RunLifetime = 1
	ExtensionCommand_Persistent ExtensionCommand_RunLifetime = 2
)

var ExtensionCommand_RunLifetime_name = map[int32]string{
	1: "Ephemeral",
	2: "Persistent",
}
var ExtensionCommand_RunLifetime_value = map[string]int32{
	"Ephemeral":  1,
	"Persistent": 2,
}

func (x ExtensionCommand_RunLifetime) Enum() *ExtensionCommand_RunLifetime {
	p := new(ExtensionCommand_RunLifetime)
	*p = x
	return p
}
func (x ExtensionCommand_RunLifetime) String() string {
	return proto.EnumName(ExtensionCommand_RunLifetime_name, int32(x))
}
func (x *ExtensionCommand_RunLifetime) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExtensionCommand_RunLifetime_value, data, "ExtensionCommand_RunLifetime")
	if err != nil {
		return err
	}
	*x = ExtensionCommand_RunLifetime(value)
	return nil
}
func (ExtensionCommand_RunLifetime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor21, []int{0, 3}
}

// Extension run type; under what circumstances do we run?
type ExtensionCommand_RunType int32

const (
	ExtensionCommand_Once         ExtensionCommand_RunType = 1
	ExtensionCommand_OnBoot       ExtensionCommand_RunType = 2
	ExtensionCommand_OnIdle       ExtensionCommand_RunType = 3
	ExtensionCommand_Periodically ExtensionCommand_RunType = 4
	ExtensionCommand_OnDemand     ExtensionCommand_RunType = 5
	ExtensionCommand_OnLogin      ExtensionCommand_RunType = 6
)

var ExtensionCommand_RunType_name = map[int32]string{
	1: "Once",
	2: "OnBoot",
	3: "OnIdle",
	4: "Periodically",
	5: "OnDemand",
	6: "OnLogin",
}
var ExtensionCommand_RunType_value = map[string]int32{
	"Once":         1,
	"OnBoot":       2,
	"OnIdle":       3,
	"Periodically": 4,
	"OnDemand":     5,
	"OnLogin":      6,
}

func (x ExtensionCommand_RunType) Enum() *ExtensionCommand_RunType {
	p := new(ExtensionCommand_RunType)
	*p = x
	return p
}
func (x ExtensionCommand_RunType) String() string {
	return proto.EnumName(ExtensionCommand_RunType_name, int32(x))
}
func (x *ExtensionCommand_RunType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExtensionCommand_RunType_value, data, "ExtensionCommand_RunType")
	if err != nil {
		return err
	}
	*x = ExtensionCommand_RunType(value)
	return nil
}
func (ExtensionCommand_RunType) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{0, 4} }

// Message instructing the agent to alter state of an 'extension' (e.g. install/uninstall/enable/disable/modify)
type ExtensionCommand struct {
	// The standard fields
	// The time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp       *int64  `protobuf:"varint,1,opt,name=timeStamp" json:"timeStamp,omitempty"`
	SiteId          *string `protobuf:"bytes,2,opt,name=siteId" json:"siteId,omitempty"`
	ServerUUID      *string `protobuf:"bytes,3,opt,name=serverUUID" json:"serverUUID,omitempty"`
	ServerJobID     *int64  `protobuf:"varint,4,opt,name=serverJobID" json:"serverJobID,omitempty"`
	CorrelationUUID *string `protobuf:"bytes,5,opt,name=correlationUUID" json:"correlationUUID,omitempty"`
	MessageVersion  *int32  `protobuf:"varint,6,opt,name=messageVersion,def=1" json:"messageVersion,omitempty"`
	// Distinctly identifies this extension object; used to refer to this particular script for various operations
	ExtensionUUID *string                                `protobuf:"bytes,7,opt,name=extensionUUID" json:"extensionUUID,omitempty"`
	Command       *ExtensionCommand_ExtensionCommandType `protobuf:"varint,8,opt,name=command,enum=ExtensionCommand_ExtensionCommandType" json:"command,omitempty"`
	ExtensionType *ExtensionCommand_ExtensionType        `protobuf:"varint,9,opt,name=extensionType,enum=ExtensionCommand_ExtensionType" json:"extensionType,omitempty"`
	// the extension object;
	ExtensionObject []byte `protobuf:"bytes,10,opt,name=extensionObject" json:"extensionObject,omitempty"`
	// the command line parameters
	ExtensionParameters []string                      `protobuf:"bytes,11,rep,name=extensionParameters" json:"extensionParameters,omitempty"`
	RunHosting          *ExtensionCommand_RunHosting  `protobuf:"varint,12,opt,name=runHosting,enum=ExtensionCommand_RunHosting,def=1" json:"runHosting,omitempty"`
	RunLifetime         *ExtensionCommand_RunLifetime `protobuf:"varint,13,opt,name=runLifetime,enum=ExtensionCommand_RunLifetime,def=1" json:"runLifetime,omitempty"`
	RunType             *ExtensionCommand_RunType     `protobuf:"varint,14,opt,name=runType,enum=ExtensionCommand_RunType" json:"runType,omitempty"`
	// If RunPeriodically then number of seconds between runs
	RunPeriodicallySec *int32  `protobuf:"varint,15,opt,name=runPeriodicallySec" json:"runPeriodicallySec,omitempty"`
	Uuid               *string `protobuf:"bytes,16,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *ExtensionCommand) Reset()                    { *m = ExtensionCommand{} }
func (m *ExtensionCommand) String() string            { return proto.CompactTextString(m) }
func (*ExtensionCommand) ProtoMessage()               {}
func (*ExtensionCommand) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

const Default_ExtensionCommand_MessageVersion int32 = 1
const Default_ExtensionCommand_RunHosting ExtensionCommand_RunHosting = ExtensionCommand_Service
const Default_ExtensionCommand_RunLifetime ExtensionCommand_RunLifetime = ExtensionCommand_Ephemeral

func (m *ExtensionCommand) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *ExtensionCommand) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *ExtensionCommand) GetServerUUID() string {
	if m != nil && m.ServerUUID != nil {
		return *m.ServerUUID
	}
	return ""
}

func (m *ExtensionCommand) GetServerJobID() int64 {
	if m != nil && m.ServerJobID != nil {
		return *m.ServerJobID
	}
	return 0
}

func (m *ExtensionCommand) GetCorrelationUUID() string {
	if m != nil && m.CorrelationUUID != nil {
		return *m.CorrelationUUID
	}
	return ""
}

func (m *ExtensionCommand) GetMessageVersion() int32 {
	if m != nil && m.MessageVersion != nil {
		return *m.MessageVersion
	}
	return Default_ExtensionCommand_MessageVersion
}

func (m *ExtensionCommand) GetExtensionUUID() string {
	if m != nil && m.ExtensionUUID != nil {
		return *m.ExtensionUUID
	}
	return ""
}

func (m *ExtensionCommand) GetCommand() ExtensionCommand_ExtensionCommandType {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return ExtensionCommand_Install
}

func (m *ExtensionCommand) GetExtensionType() ExtensionCommand_ExtensionType {
	if m != nil && m.ExtensionType != nil {
		return *m.ExtensionType
	}
	return ExtensionCommand_PowerShellScript
}

func (m *ExtensionCommand) GetExtensionObject() []byte {
	if m != nil {
		return m.ExtensionObject
	}
	return nil
}

func (m *ExtensionCommand) GetExtensionParameters() []string {
	if m != nil {
		return m.ExtensionParameters
	}
	return nil
}

func (m *ExtensionCommand) GetRunHosting() ExtensionCommand_RunHosting {
	if m != nil && m.RunHosting != nil {
		return *m.RunHosting
	}
	return Default_ExtensionCommand_RunHosting
}

func (m *ExtensionCommand) GetRunLifetime() ExtensionCommand_RunLifetime {
	if m != nil && m.RunLifetime != nil {
		return *m.RunLifetime
	}
	return Default_ExtensionCommand_RunLifetime
}

func (m *ExtensionCommand) GetRunType() ExtensionCommand_RunType {
	if m != nil && m.RunType != nil {
		return *m.RunType
	}
	return ExtensionCommand_Once
}

func (m *ExtensionCommand) GetRunPeriodicallySec() int32 {
	if m != nil && m.RunPeriodicallySec != nil {
		return *m.RunPeriodicallySec
	}
	return 0
}

func (m *ExtensionCommand) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*ExtensionCommand)(nil), "ExtensionCommand")
	proto.RegisterEnum("ExtensionCommand_ExtensionCommandType", ExtensionCommand_ExtensionCommandType_name, ExtensionCommand_ExtensionCommandType_value)
	proto.RegisterEnum("ExtensionCommand_ExtensionType", ExtensionCommand_ExtensionType_name, ExtensionCommand_ExtensionType_value)
	proto.RegisterEnum("ExtensionCommand_RunHosting", ExtensionCommand_RunHosting_name, ExtensionCommand_RunHosting_value)
	proto.RegisterEnum("ExtensionCommand_RunLifetime", ExtensionCommand_RunLifetime_name, ExtensionCommand_RunLifetime_value)
	proto.RegisterEnum("ExtensionCommand_RunType", ExtensionCommand_RunType_name, ExtensionCommand_RunType_value)
}

var fileDescriptor21 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xdd, 0x6e, 0x13, 0x3d,
	0x10, 0x55, 0xfe, 0x93, 0xc9, 0xdf, 0xca, 0xad, 0xfa, 0x6d, 0xfb, 0x15, 0x35, 0xec, 0x05, 0xaa,
	0x00, 0x45, 0x82, 0x0b, 0x10, 0x95, 0x7a, 0xb3, 0xb4, 0x12, 0x41, 0x45, 0x89, 0x9a, 0x06, 0x71,
	0xeb, 0x6c, 0xa6, 0x89, 0xd1, 0xae, 0x1d, 0x79, 0x9d, 0xd2, 0x70, 0xc9, 0x3b, 0xf1, 0x40, 0xbc,
	0x09, 0x63, 0x6f, 0x12, 0xa5, 0x69, 0xc5, 0xdd, 0xfa, 0xcc, 0x39, 0x9e, 0x33, 0x67, 0xd6, 0x70,
	0x70, 0x79, 0x6f, 0x50, 0xa6, 0x42, 0xc9, 0x8f, 0x2a, 0x49, 0xb8, 0x9c, 0x74, 0xe7, 0x5a, 0x19,
	0x75, 0xc4, 0x06, 0x2a, 0x35, 0x53, 0x8d, 0xe9, 0xcd, 0x72, 0x8e, 0x19, 0x16, 0xfc, 0xa9, 0x80,
	0xb7, 0x4b, 0x67, 0x1d, 0xa8, 0x19, 0x91, 0xe0, 0xd0, 0xf0, 0x64, 0xee, 0xe7, 0x3a, 0xb9, 0xd3,
	0x42, 0xd8, 0xfc, 0xf5, 0xdb, 0x77, 0x60, 0x6a, 0x41, 0xd6, 0x82, 0x72, 0x2a, 0x0c, 0xf6, 0x26,
	0x7e, 0x9e, 0xca, 0x35, 0x76, 0x0c, 0x90, 0xa2, 0xbe, 0x43, 0x3d, 0x1a, 0xf5, 0x2e, 0xfc, 0x82,
	0xc5, 0xc2, 0x2a, 0x49, 0x8a, 0x8b, 0x85, 0x98, 0xb0, 0x3d, 0xa8, 0x67, 0xd5, 0xcf, 0x6a, 0x4c,
	0xe5, 0xa2, 0xbd, 0x91, 0x3d, 0x87, 0x76, 0xa4, 0xb4, 0xc6, 0x98, 0x1b, 0x6a, 0xed, 0x74, 0xa5,
	0x1d, 0xdd, 0x21, 0xb4, 0xa8, 0x61, 0xca, 0xa7, 0xf8, 0x15, 0xb5, 0x35, 0xe8, 0x97, 0x89, 0x51,
	0x3a, 0xcb, 0xbd, 0x61, 0x27, 0xd0, 0xc4, 0xb5, 0x6d, 0xa7, 0xad, 0xec, 0x68, 0xdf, 0x43, 0x25,
	0xca, 0xc6, 0xf1, 0xab, 0x54, 0x6a, 0xbd, 0x7d, 0xd1, 0x7d, 0x14, 0xcb, 0x2e, 0x60, 0x73, 0x61,
	0xef, 0xb6, 0x6e, 0xb6, 0x80, 0x5f, 0x73, 0xf2, 0x93, 0x7f, 0xc8, 0x9d, 0xee, 0x15, 0xb4, 0x37,
	0xba, 0xfe, 0xf8, 0x3b, 0x46, 0xc6, 0x07, 0x52, 0x36, 0x42, 0x46, 0x9e, 0x5a, 0xb1, 0x92, 0xd3,
	0xce, 0x1d, 0xd7, 0x63, 0x21, 0xb9, 0x5e, 0xb2, 0xff, 0x61, 0x6f, 0x43, 0x1e, 0x70, 0xcd, 0x13,
	0x34, 0x34, 0xa1, 0x5f, 0xef, 0x14, 0x28, 0xcc, 0x0f, 0x00, 0x7a, 0x21, 0x3f, 0xd1, 0xb2, 0x84,
	0x9c, 0xfa, 0x0d, 0xd7, 0xfe, 0xf8, 0x71, 0xfb, 0xeb, 0x0d, 0xe7, 0xac, 0x32, 0xa4, 0x78, 0x45,
	0x84, 0xec, 0x1c, 0xea, 0x24, 0xbd, 0x12, 0xb7, 0x68, 0x77, 0xe5, 0x37, 0x9d, 0xf6, 0xd9, 0x93,
	0xda, 0x35, 0xe9, 0xac, 0x76, 0x39, 0x9f, 0x61, 0x82, 0x9a, 0xc7, 0xec, 0x25, 0x54, 0x48, 0xee,
	0xa6, 0x6e, 0x39, 0xe9, 0xe1, 0x93, 0x52, 0x37, 0xef, 0x11, 0x30, 0xe2, 0x0e, 0x50, 0x0b, 0x35,
	0x11, 0x11, 0x8f, 0xe3, 0xe5, 0x10, 0x23, 0xbf, 0x6d, 0x17, 0xc4, 0x0e, 0xc0, 0x2d, 0xc1, 0xf7,
	0x1e, 0x2e, 0x25, 0xb8, 0x81, 0xfd, 0x27, 0x33, 0xaf, 0x43, 0xa5, 0x27, 0xe9, 0xcf, 0x8a, 0x63,
	0x2f, 0xc7, 0x00, 0xca, 0xd7, 0x98, 0xa8, 0x3b, 0xf4, 0xf2, 0xf6, 0xfb, 0x52, 0xf2, 0x71, 0x8c,
	0x5e, 0xc1, 0x92, 0x2e, 0x44, 0xea, 0x0e, 0x45, 0x5b, 0x18, 0xcd, 0x27, 0xdc, 0xa0, 0x57, 0x0a,
	0x62, 0x68, 0x3e, 0x5c, 0xc5, 0x3e, 0x78, 0x03, 0xf5, 0x03, 0xf5, 0x70, 0x86, 0x71, 0x3c, 0x8c,
	0xb4, 0x98, 0x1b, 0xba, 0x77, 0x0f, 0xda, 0x21, 0x4f, 0x67, 0xdb, 0x60, 0x9e, 0x7e, 0x64, 0xa0,
	0x11, 0xd6, 0xe7, 0x02, 0xf3, 0xa0, 0x31, 0x58, 0x9a, 0x99, 0x92, 0x2b, 0xa4, 0x68, 0x19, 0xd7,
	0x8b, 0xf1, 0x72, 0x75, 0x2e, 0x05, 0xa7, 0xf6, 0xbc, 0x4e, 0xde, 0x9a, 0x5a, 0x65, 0x4f, 0x1d,
	0x9a, 0x50, 0x1b, 0xd1, 0x8f, 0x3e, 0xd0, 0xea, 0x7e, 0xe9, 0xe5, 0x83, 0xd7, 0x50, 0xdf, 0xca,
	0xd9, 0x56, 0x37, 0x49, 0x13, 0x39, 0xeb, 0x9c, 0x8a, 0x94, 0x9c, 0x93, 0x93, 0xe0, 0x1b, 0x54,
	0xd6, 0xd1, 0x56, 0xa1, 0xd8, 0x97, 0xee, 0x46, 0x1a, 0xb3, 0x2f, 0x43, 0xa5, 0x4c, 0x96, 0x45,
	0x5f, 0xf6, 0x26, 0x2e, 0x0b, 0x6b, 0x73, 0x2b, 0x79, 0xb2, 0xd9, 0x80, 0x6a, 0x5f, 0x5e, 0xa0,
	0x8d, 0xd4, 0x2b, 0x59, 0x5b, 0x7d, 0x79, 0xa5, 0xa6, 0x42, 0x7a, 0xe5, 0xf0, 0x1c, 0x02, 0x7a,
	0x0a, 0xdd, 0x9f, 0xe2, 0x96, 0x5a, 0x75, 0xb3, 0x97, 0x98, 0x3d, 0xff, 0x48, 0xc5, 0xdd, 0xd5,
	0x0b, 0x0b, 0xff, 0xdb, 0xdd, 0xcc, 0x97, 0xac, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xea,
	0x97, 0x9c, 0x4f, 0x04, 0x00, 0x00,
}
