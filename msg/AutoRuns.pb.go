// Code generated by protoc-gen-go.
// source: AutoRuns.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Message reporting information about an executable registered in the registry that is 'autorun' by Windows on the client machine
type AutoRuns struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Autorun Attribute
	RegistryKey *string `protobuf:"bytes,3,req,name=registryKey" json:"registryKey,omitempty"`
	// Autorun Attribute
	RegistryValue *string `protobuf:"bytes,4,req,name=registryValue" json:"registryValue,omitempty"`
	// Autorun Attribute
	RegistryValueData *string `protobuf:"bytes,5,req,name=registryValueData" json:"registryValueData,omitempty"`
	// The fully qualified filename of the binary: i.e. 'c:\windows\system32\binary.exe'
	ImageFilepath *string `protobuf:"bytes,6,req,name=imageFilepath" json:"imageFilepath,omitempty"`
	// Whether or not the object was disabled by Ziften agent
	IsDisabled *int32 `protobuf:"varint,7,opt,name=isDisabled" json:"isDisabled,omitempty"`
	// MD5 for imageFilepath
	ImageFileMD5 *string `protobuf:"bytes,8,opt,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	SiteId       *string `protobuf:"bytes,9,opt,name=siteId" json:"siteId,omitempty"`
	Uuid         *string `protobuf:"bytes,10,opt,name=uuid" json:"uuid,omitempty"`
	// Tie this to the actual system boot (uses UUID)
	BootAnalysisGUID *string `protobuf:"bytes,11,opt,name=bootAnalysisGUID" json:"bootAnalysisGUID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AutoRuns) Reset()                    { *m = AutoRuns{} }
func (m *AutoRuns) String() string            { return proto.CompactTextString(m) }
func (*AutoRuns) ProtoMessage()               {}
func (*AutoRuns) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *AutoRuns) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *AutoRuns) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *AutoRuns) GetRegistryKey() string {
	if m != nil && m.RegistryKey != nil {
		return *m.RegistryKey
	}
	return ""
}

func (m *AutoRuns) GetRegistryValue() string {
	if m != nil && m.RegistryValue != nil {
		return *m.RegistryValue
	}
	return ""
}

func (m *AutoRuns) GetRegistryValueData() string {
	if m != nil && m.RegistryValueData != nil {
		return *m.RegistryValueData
	}
	return ""
}

func (m *AutoRuns) GetImageFilepath() string {
	if m != nil && m.ImageFilepath != nil {
		return *m.ImageFilepath
	}
	return ""
}

func (m *AutoRuns) GetIsDisabled() int32 {
	if m != nil && m.IsDisabled != nil {
		return *m.IsDisabled
	}
	return 0
}

func (m *AutoRuns) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *AutoRuns) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *AutoRuns) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *AutoRuns) GetBootAnalysisGUID() string {
	if m != nil && m.BootAnalysisGUID != nil {
		return *m.BootAnalysisGUID
	}
	return ""
}

func init() {
	proto.RegisterType((*AutoRuns)(nil), "AutoRuns")
}

var fileDescriptor9 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xcb, 0x4e, 0xeb, 0x30,
	0x10, 0x86, 0xd5, 0xeb, 0x69, 0xa6, 0xa7, 0x05, 0xcc, 0x45, 0x06, 0x36, 0x55, 0x57, 0x5d, 0x65,
	0xd7, 0x07, 0x68, 0x14, 0x81, 0x2a, 0x54, 0x09, 0x71, 0xdb, 0xbb, 0xed, 0x10, 0x2c, 0x25, 0x71,
	0xe4, 0x99, 0x20, 0x85, 0x25, 0xef, 0xc1, 0x63, 0xf0, 0x7e, 0x38, 0x8e, 0x82, 0xe8, 0x72, 0x3e,
	0x7f, 0xd6, 0xfc, 0xf3, 0xc3, 0x74, 0x55, 0xb2, 0x79, 0x28, 0x73, 0x0a, 0x0b, 0x6b, 0xd8, 0x5c,
	0x89, 0x7b, 0x43, 0x9c, 0x58, 0xa4, 0xa7, 0xaa, 0xc0, 0x86, 0xcd, 0xbf, 0xba, 0x30, 0x6a, 0x35,
	0x31, 0x83, 0x80, 0x75, 0x86, 0x8f, 0xac, 0xb2, 0x42, 0x76, 0x66, 0xdd, 0x45, 0x2f, 0x9a, 0x7c,
	0x7e, 0x4b, 0x0f, 0xa9, 0x86, 0xe2, 0x1a, 0x02, 0x95, 0x60, 0xce, 0xb7, 0xcf, 0xeb, 0x58, 0x76,
	0x9d, 0x11, 0x44, 0x23, 0x67, 0xf4, 0xcb, 0x52, 0xef, 0xc5, 0x29, 0x8c, 0x2d, 0x26, 0x9a, 0xd8,
	0x56, 0x77, 0x58, 0xc9, 0x5e, 0xfd, 0x2c, 0xce, 0x61, 0xd2, 0xc2, 0x17, 0x95, 0x96, 0x28, 0xfb,
	0x1e, 0x5f, 0xc2, 0xc9, 0x01, 0x8e, 0x15, 0x2b, 0x39, 0x68, 0x7f, 0xe8, 0xcc, 0x6d, 0xb9, 0xd1,
	0x29, 0x16, 0x8a, 0xdf, 0xe4, 0xd0, 0x63, 0x01, 0xa0, 0x29, 0xd6, 0xa4, 0xb6, 0x29, 0xee, 0xe5,
	0xbf, 0x59, 0x67, 0x31, 0x10, 0x67, 0xf0, 0xff, 0x57, 0xdd, 0xc4, 0x4b, 0x39, 0x72, 0x34, 0x10,
	0x53, 0x18, 0x92, 0x66, 0x5c, 0xef, 0x65, 0xe0, 0xe7, 0x0b, 0xf0, 0xf9, 0x24, 0xd4, 0xd3, 0x9f,
	0xbc, 0x73, 0x38, 0xde, 0x1a, 0xc3, 0xab, 0x5c, 0xa5, 0x15, 0x69, 0xf2, 0x37, 0x8d, 0x0f, 0x9d,
	0x68, 0x09, 0xf3, 0x9d, 0xc9, 0xc2, 0x0f, 0xfd, 0xca, 0x98, 0x87, 0x84, 0xf6, 0x1d, 0x6d, 0x53,
	0xdd, 0xce, 0xa4, 0xa1, 0xab, 0x85, 0xdc, 0xfa, 0xe8, 0xa8, 0xad, 0x70, 0xd3, 0x80, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd3, 0xa4, 0x65, 0x77, 0x7b, 0x01, 0x00, 0x00,
}
