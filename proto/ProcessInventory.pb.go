// Code generated by protoc-gen-go.
// source: ProcessInventory.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProcessInventory struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// The fully qualified file name of the binary: i.e. 'c:\windows\system32\binary.exe'
	ImageFilepath *string `protobuf:"bytes,3,req,name=imageFilepath" json:"imageFilepath,omitempty"`
	// Derived from VERSION block of the RESOURCE section of the binary file
	// Version information is stored in an executable file's resources.
	// The binary format of this data is complex and is not described here. Conceptually though, version information contains a record that provides
	// a machine-readable binary description of a file (fixed file information) and one or more string tables that provide human-readable information.
	//
	// Reflecting the organisation discussed above, version information is structured in three main parts:
	// 1. Fixed file information
	// ... omitted ...
	// 2. Variable file information
	// According to the Windows documentation this section can be user-defined. However, in practise it always contains a table of "translation"
	// information. Each entry in the table is a pair of language and character set identifiers that together provide a key used to specify a
	// string table.
	// 3. String file information
	// This section stores a string table for each "translation" listed in the variable file information section. The entries in string tables are
	// name / value pairs i.e. the string values are accessed by specifying a string name. Windows defines several standard names:
	//      Comments
	// 		CompanyName
	// 		FileDescription
	// 		FileVersion
	// 		InternalName
	// 		LegalCopyright
	// 		LegalTrademarks
	// 		OriginalFilename
	// 		PrivateBuild
	// 		ProductName
	// 		ProductVersion
	// 		SpecialBuild
	//  The intended purpose and restrictions on use of these names are set out in the Windows API help file under the "VERSIONINFO resource" topic.
	//  User defined names are also permitted.
	//  These different sections of the resource are accessed using an addressing system that is similar to a file path. The "paths" are:
	//  i.e. the "root" path
	//  Accesses fixed file information.
	//  \VarFileInfo\Translation
	//  Accesses the "translation" table. The table is a sequence of TTransRec records.
	//  \StringFileInfo\<translation-code>\<string-name>
	//  Accesses a named entry in a given string table. <translation-code> is made up of the hexadecimal representation of the translation's language
	//  code and character set code. Unsurprisingly <string-name> is the name of the desired string value.
	//  For example to access the "ProductName" string in the string table associated with translation "040904E4" the "path" is
	//  \StringFileInfo\040904E4\ProductName.
	FileVersion      *string `protobuf:"bytes,4,req,name=fileVersion" json:"fileVersion,omitempty"`
	FileDescription  *string `protobuf:"bytes,5,req,name=fileDescription" json:"fileDescription,omitempty"`
	CompanyName      *string `protobuf:"bytes,6,req,name=companyName" json:"companyName,omitempty"`
	ProductName      *string `protobuf:"bytes,7,req,name=productName" json:"productName,omitempty"`
	InternalName     *string `protobuf:"bytes,8,req,name=internalName" json:"internalName,omitempty"`
	LegalCopyright   *string `protobuf:"bytes,9,req,name=legalCopyright" json:"legalCopyright,omitempty"`
	LegalTrademarks  *string `protobuf:"bytes,10,req,name=legalTrademarks" json:"legalTrademarks,omitempty"`
	OriginalFilename *string `protobuf:"bytes,11,req,name=originalFilename" json:"originalFilename,omitempty"`
	ProductVersion   *string `protobuf:"bytes,12,req,name=productVersion" json:"productVersion,omitempty"`
	// The MD5 hash of the binary
	ImageFileMD5       *string `protobuf:"bytes,13,req,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	FileTextVersion    *string `protobuf:"bytes,14,opt,name=fileTextVersion" json:"fileTextVersion,omitempty"`
	ProductTextVersion *string `protobuf:"bytes,15,opt,name=productTextVersion" json:"productTextVersion,omitempty"`
	// This string identifies (through its message) the agent module that saw a given process running on a give filepath
	// In Ziften Version 4.1, sourceModuleMessage can have one of the following values:
	// AppStartTime, NetworkConnect, ProcessEnd, ResourceUsage, AutoRuns, AutoStarts, ActiveX, NetworkDataPID,
	// OfficePlugins, Services, EventLogRecord, BootAnalysis, PolicyStatus
	SourceModuleMessage *string `protobuf:"bytes,16,opt,name=sourceModuleMessage" json:"sourceModuleMessage,omitempty"`
	SiteId              *string `protobuf:"bytes,17,opt,name=siteId" json:"siteId,omitempty"`
	// Whether or not this binary is disabled. We collect running processes, but also autostarts (Messages: AutoRuns, AutoStarts, ActiveX, Services)
	// Autostart can be disabled. For example, a Windows Service can be disabled.
	IsDisabled *bool `protobuf:"varint,18,opt,name=isDisabled,def=0" json:"isDisabled,omitempty"`
	// If this process message relates to a service, the following two fields are filled out, otherwise they will be NOT set
	ServiceName        *string `protobuf:"bytes,19,opt,name=serviceName" json:"serviceName,omitempty"`
	ServiceDisplayName *string `protobuf:"bytes,20,opt,name=serviceDisplayName" json:"serviceDisplayName,omitempty"`
	FileLength         *int64  `protobuf:"varint,21,opt,name=fileLength" json:"fileLength,omitempty"`
	Uuid               *string `protobuf:"bytes,22,opt,name=uuid" json:"uuid,omitempty"`
	// The executable is signed (but can be invalid if certificate used to sign is invalid)
	IsSigned *bool `protobuf:"varint,23,opt,name=IsSigned" json:"IsSigned,omitempty"`
	// Signature is valid, certificate used to sign the exectuable is valid
	ValidSignature *bool `protobuf:"varint,24,opt,name=ValidSignature" json:"ValidSignature,omitempty"`
	// Who signed the certificate used to sign the executable
	SignerIssuerName *string `protobuf:"bytes,25,opt,name=SignerIssuerName" json:"SignerIssuerName,omitempty"`
	// Thumprint of the certificate used to sign the executable
	Thumbprint *string `protobuf:"bytes,26,opt,name=Thumbprint" json:"Thumbprint,omitempty"`
	// Subject name of the certificate used to sign the executable
	SubjectName *string `protobuf:"bytes,27,opt,name=SubjectName" json:"SubjectName,omitempty"`
	// This field is not used
	TimestampIssuerName *string `protobuf:"bytes,28,opt,name=TimestampIssuerName" json:"TimestampIssuerName,omitempty"`
	// This field is not used
	TimestampThumbprint *string `protobuf:"bytes,29,opt,name=TimestampThumbprint" json:"TimestampThumbprint,omitempty"`
	// This field is not used
	TimestampSubjectName *string `protobuf:"bytes,30,opt,name=TimestampSubjectName" json:"TimestampSubjectName,omitempty"`
	// This field is not used
	DateOfTimestamp *int64 `protobuf:"varint,31,opt,name=DateOfTimestamp" json:"DateOfTimestamp,omitempty"`
	// Error code for certificate used to sign the executable
	// 0x00000000 ERROR_SUCCESS: The file contains a valid signature.
	// 0x800B0100 TRUST_E_NOSIGNATURE: The file is not signed.
	// 0x800B0004 TRUST_E_SUBJECT_NOT_TRUSTED: The subject failed the specified verification action.
	// 0x800B0001 TRUST_E_PROVIDER_UNKNOWN: The trust provider is not recognized on this system.
	// 0x800B0002 TRUST_E_ACTION_UNKNOWN: The trust provider does not support the specified action.
	// 0x800B0003 TRUST_E_SUBJECT_FORM_UNKNOWN: The form specified for the subject is not one supported or known by the specified trust provider.
	// 0x800B0008 DIGSIG_E_CRYPTO: Unspecified cryptographic failure on file.
	// 0x800B0101 CERT_E_EXPIRED: Certificate used for signing is expired.
	// 0x800B0102 CERT_E_VALIDITYPERIODNESTING: The validity periods of the certification chain do not nest correctly.
	// 0x800B0103 CERT_E_ROLE: A certificate that can only be used as an end-entity is being used as a CA or visa versa.
	// 0x800B0105 CERT_E_CRITICAL: A certificate contains an unknown extension that is marked 'critical'.
	// 0x800B0106 CERT_E_PURPOSE: A certificate being used for a purpose other than the ones specified by its CA.
	// 0x800B0107 CERT_E_ISSUERCHAINING: A parent of a given certificate in fact did not issue that child certificate.
	// 0x800B0108 CERT_E_MALFORMED: A certificate is missing or has an empty value for an important field, such as a subject or issuer name.
	// 0x800B010D CERT_E_UNTRUSTEDROOT: A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.
	// 0x800B010A CERT_E_CHAINING: A certificate chain could not be built to a trusted root authority.
	// 0x800B010C CERT_E_REVOKED: A certificate was explicitly revoked by its issuer.
	SignatureError *int32 `protobuf:"varint,32,opt,name=SignatureError" json:"SignatureError,omitempty"`
	// English description of the error code for the certificate used to sign the executable
	SignatureErrorDescription *string `protobuf:"bytes,33,opt,name=SignatureErrorDescription" json:"SignatureErrorDescription,omitempty"`
	// The Operating System when this executable was sen running
	// It should be set to one of the following values: 'Windows', 'Linux', 'OS X'
	// For compatibility with old Windows agents, if the value is not set the executable will be assumed to be running on Windows
	OperatingSystem  *string `protobuf:"bytes,34,opt,name=OperatingSystem" json:"OperatingSystem,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProcessInventory) Reset()                    { *m = ProcessInventory{} }
func (m *ProcessInventory) String() string            { return proto1.CompactTextString(m) }
func (*ProcessInventory) ProtoMessage()               {}
func (*ProcessInventory) Descriptor() ([]byte, []int) { return fileDescriptor71, []int{0} }

const Default_ProcessInventory_IsDisabled bool = false

func (m *ProcessInventory) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *ProcessInventory) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *ProcessInventory) GetImageFilepath() string {
	if m != nil && m.ImageFilepath != nil {
		return *m.ImageFilepath
	}
	return ""
}

func (m *ProcessInventory) GetFileVersion() string {
	if m != nil && m.FileVersion != nil {
		return *m.FileVersion
	}
	return ""
}

func (m *ProcessInventory) GetFileDescription() string {
	if m != nil && m.FileDescription != nil {
		return *m.FileDescription
	}
	return ""
}

func (m *ProcessInventory) GetCompanyName() string {
	if m != nil && m.CompanyName != nil {
		return *m.CompanyName
	}
	return ""
}

func (m *ProcessInventory) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *ProcessInventory) GetInternalName() string {
	if m != nil && m.InternalName != nil {
		return *m.InternalName
	}
	return ""
}

func (m *ProcessInventory) GetLegalCopyright() string {
	if m != nil && m.LegalCopyright != nil {
		return *m.LegalCopyright
	}
	return ""
}

func (m *ProcessInventory) GetLegalTrademarks() string {
	if m != nil && m.LegalTrademarks != nil {
		return *m.LegalTrademarks
	}
	return ""
}

func (m *ProcessInventory) GetOriginalFilename() string {
	if m != nil && m.OriginalFilename != nil {
		return *m.OriginalFilename
	}
	return ""
}

func (m *ProcessInventory) GetProductVersion() string {
	if m != nil && m.ProductVersion != nil {
		return *m.ProductVersion
	}
	return ""
}

func (m *ProcessInventory) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *ProcessInventory) GetFileTextVersion() string {
	if m != nil && m.FileTextVersion != nil {
		return *m.FileTextVersion
	}
	return ""
}

func (m *ProcessInventory) GetProductTextVersion() string {
	if m != nil && m.ProductTextVersion != nil {
		return *m.ProductTextVersion
	}
	return ""
}

func (m *ProcessInventory) GetSourceModuleMessage() string {
	if m != nil && m.SourceModuleMessage != nil {
		return *m.SourceModuleMessage
	}
	return ""
}

func (m *ProcessInventory) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *ProcessInventory) GetIsDisabled() bool {
	if m != nil && m.IsDisabled != nil {
		return *m.IsDisabled
	}
	return Default_ProcessInventory_IsDisabled
}

func (m *ProcessInventory) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *ProcessInventory) GetServiceDisplayName() string {
	if m != nil && m.ServiceDisplayName != nil {
		return *m.ServiceDisplayName
	}
	return ""
}

func (m *ProcessInventory) GetFileLength() int64 {
	if m != nil && m.FileLength != nil {
		return *m.FileLength
	}
	return 0
}

func (m *ProcessInventory) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *ProcessInventory) GetIsSigned() bool {
	if m != nil && m.IsSigned != nil {
		return *m.IsSigned
	}
	return false
}

func (m *ProcessInventory) GetValidSignature() bool {
	if m != nil && m.ValidSignature != nil {
		return *m.ValidSignature
	}
	return false
}

func (m *ProcessInventory) GetSignerIssuerName() string {
	if m != nil && m.SignerIssuerName != nil {
		return *m.SignerIssuerName
	}
	return ""
}

func (m *ProcessInventory) GetThumbprint() string {
	if m != nil && m.Thumbprint != nil {
		return *m.Thumbprint
	}
	return ""
}

func (m *ProcessInventory) GetSubjectName() string {
	if m != nil && m.SubjectName != nil {
		return *m.SubjectName
	}
	return ""
}

func (m *ProcessInventory) GetTimestampIssuerName() string {
	if m != nil && m.TimestampIssuerName != nil {
		return *m.TimestampIssuerName
	}
	return ""
}

func (m *ProcessInventory) GetTimestampThumbprint() string {
	if m != nil && m.TimestampThumbprint != nil {
		return *m.TimestampThumbprint
	}
	return ""
}

func (m *ProcessInventory) GetTimestampSubjectName() string {
	if m != nil && m.TimestampSubjectName != nil {
		return *m.TimestampSubjectName
	}
	return ""
}

func (m *ProcessInventory) GetDateOfTimestamp() int64 {
	if m != nil && m.DateOfTimestamp != nil {
		return *m.DateOfTimestamp
	}
	return 0
}

func (m *ProcessInventory) GetSignatureError() int32 {
	if m != nil && m.SignatureError != nil {
		return *m.SignatureError
	}
	return 0
}

func (m *ProcessInventory) GetSignatureErrorDescription() string {
	if m != nil && m.SignatureErrorDescription != nil {
		return *m.SignatureErrorDescription
	}
	return ""
}

func (m *ProcessInventory) GetOperatingSystem() string {
	if m != nil && m.OperatingSystem != nil {
		return *m.OperatingSystem
	}
	return ""
}

func init() {
	proto1.RegisterType((*ProcessInventory)(nil), "ProcessInventory")
}

var fileDescriptor71 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x93, 0xcb, 0x8e, 0x12, 0x4f,
	0x14, 0xc6, 0x33, 0x37, 0xfe, 0x70, 0x66, 0xb8, 0xfc, 0x1b, 0x06, 0x0a, 0x18, 0x95, 0x61, 0x61,
	0x5c, 0xb1, 0x73, 0x63, 0xe2, 0x06, 0x51, 0x43, 0xe2, 0x38, 0x93, 0x80, 0xb3, 0x2f, 0xba, 0x0f,
	0x4d, 0x69, 0x77, 0x55, 0xa7, 0xaa, 0x7a, 0x22, 0x2e, 0x7d, 0x27, 0x5f, 0xca, 0xa7, 0xf0, 0x54,
	0x41, 0x93, 0x16, 0x97, 0xfc, 0xbe, 0x8f, 0xf3, 0xd5, 0xb9, 0x34, 0x74, 0x1f, 0xb4, 0x0a, 0xd1,
	0x98, 0xb9, 0x7c, 0x42, 0x69, 0x95, 0xde, 0x4e, 0x32, 0xad, 0xac, 0x1a, 0x04, 0x0f, 0xca, 0xd8,
	0x58, 0xa3, 0x59, 0x6e, 0x33, 0xdc, 0xb1, 0xf1, 0xef, 0x0a, 0xb4, 0x8e, 0xed, 0xc1, 0x08, 0x6a,
	0x56, 0xa4, 0xb8, 0xb0, 0x3c, 0xcd, 0xd8, 0xc9, 0xe8, 0xf4, 0xd5, 0xd9, 0xb4, 0xfe, 0xf3, 0x17,
	0xf3, 0xd0, 0x38, 0x18, 0x0c, 0xa1, 0xc6, 0x63, 0x72, 0x7f, 0xfc, 0x32, 0x9f, 0xb1, 0x53, 0x72,
	0xd4, 0xa6, 0x55, 0x72, 0x9c, 0xe7, 0xb9, 0x88, 0x82, 0x6b, 0xa8, 0x8b, 0x94, 0xe4, 0x0f, 0x22,
	0xc1, 0x8c, 0xdb, 0x0d, 0x3b, 0x73, 0x86, 0xa0, 0x0d, 0x97, 0x6b, 0x22, 0x8f, 0xa8, 0x8d, 0x50,
	0x92, 0x9d, 0x7b, 0xd8, 0x83, 0xa6, 0x83, 0x33, 0x34, 0xa1, 0x16, 0x99, 0x75, 0xc2, 0x45, 0xe1,
	0x0e, 0x55, 0x9a, 0x71, 0xb9, 0xfd, 0xcc, 0x53, 0x64, 0x95, 0x02, 0xd2, 0xb3, 0xa3, 0x3c, 0xb4,
	0x1e, 0xfe, 0xe7, 0x61, 0x07, 0xae, 0x84, 0xb4, 0xa8, 0x25, 0x4f, 0x3c, 0xad, 0x7a, 0xda, 0x85,
	0x46, 0x82, 0x31, 0x4f, 0xde, 0xa9, 0x6c, 0xab, 0x45, 0xbc, 0xb1, 0xac, 0x56, 0x04, 0x7a, 0xbe,
	0xd4, 0x3c, 0xc2, 0x94, 0xeb, 0x6f, 0x86, 0x81, 0x17, 0x18, 0xb4, 0x14, 0x19, 0x05, 0x95, 0x71,
	0x0f, 0x97, 0xae, 0xd4, 0x65, 0x51, 0x6a, 0x9f, 0x5a, 0xbc, 0xfd, 0xea, 0x10, 0x5c, 0xf4, 0x79,
	0x37, 0x7b, 0xcd, 0xea, 0xe5, 0x8e, 0x96, 0xf8, 0xfd, 0x60, 0x6f, 0x8c, 0x4e, 0x48, 0x18, 0x40,
	0xb0, 0x2f, 0x53, 0xd6, 0x9a, 0x5e, 0x1b, 0x42, 0xdb, 0xa8, 0x5c, 0x87, 0x78, 0x47, 0x06, 0xaa,
	0x46, 0xeb, 0xa0, 0xc2, 0xac, 0xe5, 0xc5, 0x06, 0x54, 0x8c, 0xb0, 0x38, 0x8f, 0xd8, 0xff, 0xfe,
	0x77, 0x1f, 0x40, 0x98, 0x99, 0x30, 0x7c, 0x95, 0x60, 0xc4, 0x02, 0x62, 0xd5, 0x37, 0x17, 0x6b,
	0x9e, 0x18, 0x74, 0x03, 0x32, 0xa8, 0x9f, 0x44, 0x88, 0x7e, 0x14, 0xed, 0x22, 0x78, 0x0f, 0xe9,
	0x4f, 0x59, 0xc2, 0x77, 0x13, 0xed, 0x78, 0x2d, 0x00, 0x70, 0xaf, 0xfd, 0x84, 0x32, 0xa6, 0x45,
	0x5d, 0x13, 0x3b, 0xa3, 0x7e, 0xfd, 0x1e, 0x59, 0xd7, 0x39, 0x4a, 0x7b, 0x6d, 0x41, 0x75, 0x6e,
	0x16, 0x22, 0x96, 0x94, 0xda, 0x73, 0xa9, 0x6e, 0x32, 0x8f, 0x3c, 0x11, 0x91, 0x83, 0xdc, 0xe6,
	0x1a, 0x19, 0xf3, 0x9c, 0x66, 0xe9, 0x7d, 0x7a, 0x6e, 0x4c, 0x8e, 0xda, 0xe7, 0xf5, 0x8b, 0xbc,
	0xe5, 0x26, 0x4f, 0x57, 0x99, 0xa6, 0x9d, 0xb1, 0x81, 0x67, 0xf4, 0xe8, 0x45, 0xbe, 0xfa, 0x8a,
	0xfb, 0xad, 0x0e, 0x8b, 0x89, 0x2c, 0x8b, 0x73, 0x2b, 0x55, 0xb9, 0xf9, 0x47, 0x2c, 0x95, 0x7b,
	0xe6, 0xc5, 0x1b, 0xe8, 0x1c, 0xc4, 0x72, 0xdd, 0xe7, 0x5e, 0x7d, 0x09, 0xcd, 0x19, 0xb7, 0x78,
	0xbf, 0x3e, 0x78, 0xd8, 0x0b, 0xd7, 0xf5, 0xf1, 0x85, 0x53, 0x6b, 0x87, 0xae, 0xde, 0x6b, 0xad,
	0x34, 0x1b, 0x91, 0xed, 0x22, 0xb8, 0x85, 0xfe, 0xdf, 0xbc, 0x7c, 0xba, 0xb7, 0x3e, 0x82, 0x2e,
	0xe0, 0x3e, 0x43, 0xcd, 0xad, 0x90, 0xf1, 0x62, 0x6b, 0x2c, 0xa6, 0x6c, 0xec, 0x47, 0xf9, 0x16,
	0xc6, 0x74, 0xd3, 0x93, 0x1f, 0x62, 0x6d, 0x51, 0x4e, 0xdc, 0x4e, 0x50, 0xef, 0xbe, 0xc3, 0x50,
	0x25, 0x93, 0x74, 0xb7, 0xf4, 0x69, 0xef, 0xf8, 0x7b, 0xdc, 0x5f, 0xc3, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x69, 0x85, 0xab, 0xab, 0xd8, 0x03, 0x00, 0x00,
}
