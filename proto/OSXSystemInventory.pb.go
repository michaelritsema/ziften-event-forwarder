// Code generated by protoc-gen-go.
// source: OSXSystemInventory.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Message reporting hardware information of a client
type OSXSystemInventory struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// OSX computer name (e.g. "My Macbook")
	ComputerName *string `protobuf:"bytes,3,req,name=computerName" json:"computerName,omitempty"`
	// total count of cores (e.g. 2)
	NumberOfCores *int32 `protobuf:"varint,4,req,name=numberOfCores" json:"numberOfCores,omitempty"`
	// e.g. 1
	NumberOfLogicalProcessors *int32 `protobuf:"varint,5,req,name=numberOfLogicalProcessors" json:"numberOfLogicalProcessors,omitempty"`
	// e.g. Intel
	ProcessorManufacturer *string `protobuf:"bytes,6,req,name=processorManufacturer" json:"processorManufacturer,omitempty"`
	// e.g. Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz
	ProcessorDescription *string `protobuf:"bytes,7,req,name=processorDescription" json:"processorDescription,omitempty"`
	// e.g. 2377
	MaxClockSpeed *int32 `protobuf:"varint,8,req,name=maxClockSpeed" json:"maxClockSpeed,omitempty"`
	// e.g. Intel
	ProcessorName *string `protobuf:"bytes,9,req,name=processorName" json:"processorName,omitempty"`
	// e.g. 2147483648
	TotalVisibleMemorySize *string `protobuf:"bytes,10,req,name=totalVisibleMemorySize" json:"totalVisibleMemorySize,omitempty"`
	// e.g. 2147483648
	TotalVirtualMemorySize *string `protobuf:"bytes,11,req,name=totalVirtualMemorySize" json:"totalVirtualMemorySize,omitempty"`
	// e.g. Snow Leopard
	OSname *string `protobuf:"bytes,12,req,name=OSname" json:"OSname,omitempty"`
	// e.g. Version 10.6.8 (Build 10K549)
	OSversion *string `protobuf:"bytes,13,req,name=OSversion" json:"OSversion,omitempty"`
	// e.g. Darwin
	KernName *string `protobuf:"bytes,14,req,name=kernName" json:"kernName,omitempty"`
	// e.g. 10.8.0
	KernVersion *string `protobuf:"bytes,15,req,name=kernVersion" json:"kernVersion,omitempty"`
	// e.g. root
	UserName *string `protobuf:"bytes,16,req,name=userName" json:"userName,omitempty"`
	// e.g. MacBookPro5,1
	ComputerModel *string `protobuf:"bytes,17,req,name=computerModel" json:"computerModel,omitempty"`
	// GUID that helps join this message with associated SystemInventoryNetworkAdapters message
	NetworkAdaptersGUID *string `protobuf:"bytes,18,req,name=networkAdaptersGUID" json:"networkAdaptersGUID,omitempty"`
	// GUID that helps join this message with associated SystemInventoryDiskDrives message
	DiskdrivesGUID       *string `protobuf:"bytes,19,req,name=diskdrivesGUID" json:"diskdrivesGUID,omitempty"`
	SiteId               *string `protobuf:"bytes,20,opt,name=siteId" json:"siteId,omitempty"`
	OSSKU                *int32  `protobuf:"varint,21,opt,name=OSSKU" json:"OSSKU,omitempty"`
	OSInstallDate        *string `protobuf:"bytes,22,opt,name=OSInstallDate" json:"OSInstallDate,omitempty"`
	ComputerManufacturer *string `protobuf:"bytes,23,opt,name=computerManufacturer" json:"computerManufacturer,omitempty"`
	VideoControllerName  *string `protobuf:"bytes,24,opt,name=videoControllerName" json:"videoControllerName,omitempty"`
	// The version of the ziften agent i.e. 4.1.1.123
	ZiftenAgentVersion    *string `protobuf:"bytes,25,opt,name=ziftenAgentVersion" json:"ziftenAgentVersion,omitempty"`
	AddressWidth          *int32  `protobuf:"varint,26,opt,name=addressWidth" json:"addressWidth,omitempty"`
	Domain                *string `protobuf:"bytes,27,opt,name=domain" json:"domain,omitempty"`
	BaseBoardManufacturer *string `protobuf:"bytes,28,opt,name=baseBoardManufacturer" json:"baseBoardManufacturer,omitempty"`
	BaseBoardProduct      *string `protobuf:"bytes,29,opt,name=baseBoardProduct" json:"baseBoardProduct,omitempty"`
	SerialNumber          *string `protobuf:"bytes,30,opt,name=serialNumber" json:"serialNumber,omitempty"`
	Uuid                  *string `protobuf:"bytes,31,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *OSXSystemInventory) Reset()                    { *m = OSXSystemInventory{} }
func (m *OSXSystemInventory) String() string            { return proto1.CompactTextString(m) }
func (*OSXSystemInventory) ProtoMessage()               {}
func (*OSXSystemInventory) Descriptor() ([]byte, []int) { return fileDescriptor56, []int{0} }

func (m *OSXSystemInventory) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *OSXSystemInventory) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *OSXSystemInventory) GetComputerName() string {
	if m != nil && m.ComputerName != nil {
		return *m.ComputerName
	}
	return ""
}

func (m *OSXSystemInventory) GetNumberOfCores() int32 {
	if m != nil && m.NumberOfCores != nil {
		return *m.NumberOfCores
	}
	return 0
}

func (m *OSXSystemInventory) GetNumberOfLogicalProcessors() int32 {
	if m != nil && m.NumberOfLogicalProcessors != nil {
		return *m.NumberOfLogicalProcessors
	}
	return 0
}

func (m *OSXSystemInventory) GetProcessorManufacturer() string {
	if m != nil && m.ProcessorManufacturer != nil {
		return *m.ProcessorManufacturer
	}
	return ""
}

func (m *OSXSystemInventory) GetProcessorDescription() string {
	if m != nil && m.ProcessorDescription != nil {
		return *m.ProcessorDescription
	}
	return ""
}

func (m *OSXSystemInventory) GetMaxClockSpeed() int32 {
	if m != nil && m.MaxClockSpeed != nil {
		return *m.MaxClockSpeed
	}
	return 0
}

func (m *OSXSystemInventory) GetProcessorName() string {
	if m != nil && m.ProcessorName != nil {
		return *m.ProcessorName
	}
	return ""
}

func (m *OSXSystemInventory) GetTotalVisibleMemorySize() string {
	if m != nil && m.TotalVisibleMemorySize != nil {
		return *m.TotalVisibleMemorySize
	}
	return ""
}

func (m *OSXSystemInventory) GetTotalVirtualMemorySize() string {
	if m != nil && m.TotalVirtualMemorySize != nil {
		return *m.TotalVirtualMemorySize
	}
	return ""
}

func (m *OSXSystemInventory) GetOSname() string {
	if m != nil && m.OSname != nil {
		return *m.OSname
	}
	return ""
}

func (m *OSXSystemInventory) GetOSversion() string {
	if m != nil && m.OSversion != nil {
		return *m.OSversion
	}
	return ""
}

func (m *OSXSystemInventory) GetKernName() string {
	if m != nil && m.KernName != nil {
		return *m.KernName
	}
	return ""
}

func (m *OSXSystemInventory) GetKernVersion() string {
	if m != nil && m.KernVersion != nil {
		return *m.KernVersion
	}
	return ""
}

func (m *OSXSystemInventory) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *OSXSystemInventory) GetComputerModel() string {
	if m != nil && m.ComputerModel != nil {
		return *m.ComputerModel
	}
	return ""
}

func (m *OSXSystemInventory) GetNetworkAdaptersGUID() string {
	if m != nil && m.NetworkAdaptersGUID != nil {
		return *m.NetworkAdaptersGUID
	}
	return ""
}

func (m *OSXSystemInventory) GetDiskdrivesGUID() string {
	if m != nil && m.DiskdrivesGUID != nil {
		return *m.DiskdrivesGUID
	}
	return ""
}

func (m *OSXSystemInventory) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *OSXSystemInventory) GetOSSKU() int32 {
	if m != nil && m.OSSKU != nil {
		return *m.OSSKU
	}
	return 0
}

func (m *OSXSystemInventory) GetOSInstallDate() string {
	if m != nil && m.OSInstallDate != nil {
		return *m.OSInstallDate
	}
	return ""
}

func (m *OSXSystemInventory) GetComputerManufacturer() string {
	if m != nil && m.ComputerManufacturer != nil {
		return *m.ComputerManufacturer
	}
	return ""
}

func (m *OSXSystemInventory) GetVideoControllerName() string {
	if m != nil && m.VideoControllerName != nil {
		return *m.VideoControllerName
	}
	return ""
}

func (m *OSXSystemInventory) GetZiftenAgentVersion() string {
	if m != nil && m.ZiftenAgentVersion != nil {
		return *m.ZiftenAgentVersion
	}
	return ""
}

func (m *OSXSystemInventory) GetAddressWidth() int32 {
	if m != nil && m.AddressWidth != nil {
		return *m.AddressWidth
	}
	return 0
}

func (m *OSXSystemInventory) GetDomain() string {
	if m != nil && m.Domain != nil {
		return *m.Domain
	}
	return ""
}

func (m *OSXSystemInventory) GetBaseBoardManufacturer() string {
	if m != nil && m.BaseBoardManufacturer != nil {
		return *m.BaseBoardManufacturer
	}
	return ""
}

func (m *OSXSystemInventory) GetBaseBoardProduct() string {
	if m != nil && m.BaseBoardProduct != nil {
		return *m.BaseBoardProduct
	}
	return ""
}

func (m *OSXSystemInventory) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *OSXSystemInventory) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*OSXSystemInventory)(nil), "OSXSystemInventory")
}

var fileDescriptor56 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x53, 0xdd, 0x4e, 0x1b, 0x3d,
	0x10, 0x15, 0x7f, 0xf9, 0xc8, 0x40, 0xf8, 0x60, 0x03, 0xd4, 0xfc, 0xb5, 0x29, 0x52, 0xa5, 0xaa,
	0x17, 0x79, 0x85, 0x8a, 0x80, 0x54, 0x45, 0x6d, 0x58, 0xa4, 0x2d, 0xb4, 0xb7, 0xce, 0x7a, 0x48,
	0xad, 0x78, 0xed, 0x95, 0xed, 0x4d, 0x0b, 0x97, 0x7d, 0xa7, 0xde, 0xf5, 0xe1, 0x3a, 0x3b, 0x61,
	0x53, 0x0a, 0x97, 0x3e, 0xe7, 0x78, 0xe6, 0xcc, 0x1f, 0x88, 0x34, 0xfb, 0x9a, 0xdd, 0x85, 0x88,
	0xc5, 0xd0, 0xce, 0xd0, 0x46, 0xe7, 0xef, 0xfa, 0xa5, 0x77, 0xd1, 0x1d, 0x26, 0x57, 0x2e, 0xc4,
	0x89, 0xc7, 0xf0, 0xf9, 0xae, 0xc4, 0x39, 0x76, 0xfa, 0xbb, 0x05, 0xc9, 0xf3, 0x0f, 0x49, 0x0f,
	0xda, 0x51, 0x17, 0x98, 0x45, 0x59, 0x94, 0x62, 0xa9, 0xb7, 0xfc, 0x76, 0x65, 0xd0, 0xf9, 0xf9,
	0x4b, 0x30, 0x18, 0x6a, 0x30, 0x39, 0x82, 0xb6, 0x9c, 0x90, 0xfa, 0xc3, 0xf5, 0xf0, 0x42, 0x2c,
	0x93, 0xa2, 0x3d, 0x58, 0x27, 0xc5, 0x6a, 0x55, 0x69, 0x95, 0xec, 0xc2, 0x66, 0xee, 0x8a, 0xb2,
	0x8a, 0xe8, 0x2f, 0x65, 0x81, 0x62, 0xa5, 0xe6, 0x93, 0x3d, 0xe8, 0xd8, 0xaa, 0x18, 0xa3, 0x4f,
	0x6f, 0xcf, 0x1d, 0xd9, 0x10, 0xab, 0x04, 0xaf, 0x25, 0xaf, 0xe1, 0xa0, 0x81, 0x3f, 0xb9, 0x89,
	0xce, 0xa5, 0xb9, 0xf2, 0x2e, 0xc7, 0x10, 0x9c, 0x0f, 0x62, 0x8d, 0x25, 0x27, 0xb0, 0x57, 0x36,
	0xd8, 0x48, 0xda, 0xea, 0x56, 0xe6, 0xb1, 0xf2, 0xe8, 0x45, 0x8b, 0x03, 0x1f, 0xc3, 0xee, 0x82,
	0xbe, 0xc0, 0x90, 0x7b, 0x5d, 0x46, 0xed, 0xac, 0xf8, 0xaf, 0x49, 0x5b, 0xc8, 0x1f, 0xe7, 0xc6,
	0xe5, 0xd3, 0xac, 0x44, 0x54, 0x62, 0x9d, 0x63, 0x12, 0xbc, 0xf8, 0xc4, 0x26, 0xdb, 0xac, 0x7e,
	0x07, 0xfb, 0xd1, 0x45, 0x69, 0x6e, 0x74, 0xd0, 0x63, 0x83, 0x23, 0x2c, 0xa8, 0x1f, 0x99, 0xbe,
	0x47, 0x01, 0x5c, 0x24, 0x50, 0x91, 0xad, 0xb1, 0x9e, 0x68, 0x1b, 0x1f, 0x69, 0x7d, 0xac, 0xa4,
	0x79, 0xa4, 0xdd, 0x78, 0xa6, 0xdd, 0x82, 0x56, 0x9a, 0xd9, 0x3a, 0xcf, 0x26, 0xe7, 0xd9, 0x81,
	0x76, 0x9a, 0xcd, 0xd0, 0x87, 0xda, 0x68, 0x87, 0xa1, 0x6d, 0x58, 0x9f, 0xa2, 0xb7, 0x6c, 0x66,
	0x8b, 0x91, 0x2e, 0x6c, 0xd4, 0xc8, 0xcd, 0x83, 0xec, 0xff, 0x46, 0x56, 0x85, 0x87, 0xc6, 0x6e,
	0x37, 0x15, 0x36, 0xed, 0x1e, 0x39, 0x85, 0x46, 0xec, 0x30, 0xfc, 0x06, 0xba, 0x16, 0xe3, 0x77,
	0xe7, 0xa7, 0x67, 0x4a, 0x96, 0x44, 0x06, 0x1e, 0x56, 0xf2, 0x64, 0x58, 0x3d, 0xd8, 0x52, 0x3a,
	0x4c, 0x95, 0xd7, 0x33, 0x9c, 0x2b, 0xba, 0x4f, 0x14, 0xe4, 0x3d, 0xe8, 0x88, 0x43, 0x25, 0x76,
	0x7b, 0x4b, 0x14, 0xb8, 0x03, 0x6b, 0x69, 0x96, 0x7d, 0xbc, 0x16, 0x7b, 0xf4, 0xe4, 0x4e, 0xa6,
	0xd9, 0xd0, 0xd2, 0x5e, 0x18, 0x73, 0x21, 0x23, 0x8a, 0x7d, 0x56, 0xd1, 0x54, 0x16, 0xae, 0x1e,
	0xcf, 0xec, 0x05, 0xb3, 0x47, 0xd0, 0x9d, 0x69, 0x85, 0xee, 0xdc, 0xd9, 0xe8, 0x9d, 0x31, 0x0f,
	0x05, 0x09, 0x26, 0x0f, 0x21, 0xb9, 0xd7, 0xb7, 0x11, 0xed, 0x59, 0xbd, 0x62, 0x4d, 0xf9, 0x07,
	0xcc, 0xd1, 0x6e, 0x49, 0xa5, 0x68, 0x7d, 0xc2, 0x17, 0xad, 0xe2, 0x37, 0x71, 0xc8, 0x1e, 0xc8,
	0xa2, 0x72, 0x85, 0xd4, 0x56, 0x1c, 0xb1, 0x8a, 0x36, 0x66, 0x2c, 0x03, 0x0e, 0x9c, 0xf4, 0xea,
	0x9f, 0xec, 0xc7, 0x4c, 0x0b, 0xd8, 0x5e, 0xd0, 0xb4, 0x6d, 0xaa, 0xca, 0xa3, 0x38, 0x69, 0xc2,
	0x53, 0x73, 0xb5, 0x34, 0x97, 0xbc, 0x93, 0xe2, 0x25, 0xa3, 0xfb, 0xc0, 0x9d, 0x10, 0xaf, 0xea,
	0xd7, 0xdf, 0xce, 0x0c, 0xde, 0xc3, 0x29, 0xd5, 0xd8, 0x9f, 0x9b, 0xed, 0xd3, 0x47, 0x9a, 0xe8,
	0xfc, 0xb2, 0x72, 0x67, 0xfa, 0x74, 0x2b, 0x81, 0x8e, 0x64, 0x70, 0xf0, 0xfc, 0xc2, 0x46, 0x73,
	0xea, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x77, 0x6c, 0x9a, 0xae, 0x03, 0x00, 0x00,
}
