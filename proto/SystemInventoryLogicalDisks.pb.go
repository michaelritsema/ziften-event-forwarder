// Code generated by protoc-gen-go.
// source: SystemInventoryLogicalDisks.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SystemInventoryLogicalDisks struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Unique identifier for this message
	LogicalDrivesGUID *string  `protobuf:"bytes,3,req,name=logicalDrivesGUID" json:"logicalDrivesGUID,omitempty"`
	DriveMapping      []string `protobuf:"bytes,4,rep,name=driveMapping" json:"driveMapping,omitempty"`
	FreeSpace         []int64  `protobuf:"varint,5,rep,name=freeSpace" json:"freeSpace,omitempty"`
	Size              []int64  `protobuf:"varint,6,rep,name=size" json:"size,omitempty"`
	// The following two ID's will help uniquely tie a logical drive to the physical drive
	PnpDeviceID []string `protobuf:"bytes,7,rep,name=pnpDeviceID" json:"pnpDeviceID,omitempty"`
	SerialNum   []string `protobuf:"bytes,8,rep,name=serialNum" json:"serialNum,omitempty"`
	SiteId      *string  `protobuf:"bytes,9,opt,name=siteId" json:"siteId,omitempty"`
	// 'C:' or appropriate letter followed by colon ':'
	DriveLetter []string `protobuf:"bytes,10,rep,name=driveLetter" json:"driveLetter,omitempty"`
	// These values taken from GetProtectionStatus method at https://msdn.microsoft.com/en-us/library/windows/desktop/aa376448(v=vs.85).aspx
	// 0=Protection is off
	// 1=Protection is on
	// 2=Protection status cannot be determined
	ProtectionStatus []int32 `protobuf:"varint,11,rep,name=ProtectionStatus" json:"ProtectionStatus,omitempty"`
	// These values taken from GetEncryptionMethod method at https://msdn.microsoft.com/en-us/library/windows/desktop/aa376434(v=vs.85).aspx
	// -1=The volume has been fully or partially encrypted with an unknown algorithm and key size.
	//  0=The volume is not encrypted.
	//  1=The volume has been fully or partially encrypted with the Advanced Encryption Standard (AES) algorithm enhanced with a diffuser layer, using an AES key size of 128 bits.
	//  2=The volume has been fully or partially encrypted with the Advanced Encryption Standard (AES) algorithm enhanced with a diffuser layer, using an AES key size of 256 bits.
	//  3=The volume has been fully or partially encrypted with the Advanced Encryption Standard (AES) algorithm, using an AES key size of 128 bits.
	//  4=The volume has been fully or partially encrypted with the Advanced Encryption Standard (AES) algorithm, using an AES key size of 256 bits.
	//  5=The volume has been fully or partially encrypted by using the hardware capabilities of the drive.
	//  6=This is not actually defined in documentation, but it IS being returned by some systems.  Use description above for #5 for the current time
	EncryptionMethod []int32 `protobuf:"varint,12,rep,name=EncryptionMethod" json:"EncryptionMethod,omitempty"`
	// Normally empty, filled for some custom encryptions
	SelfEncryptionDriveEncryptionMethod []string `protobuf:"bytes,13,rep,name=SelfEncryptionDriveEncryptionMethod" json:"SelfEncryptionDriveEncryptionMethod,omitempty"`
	// These values taken from GetConversionStatus at https://msdn.microsoft.com/en-us/library/windows/desktop/aa376433(v=vs.85).aspx
	// -1=This value is not actually defined in documentation.  Please used "Volume encryption state cannot be determined"
	//  0=The volume is fully decrypted
	//  1=The volume is fully encrypted
	//  2=The volume is partially encrypted (Encryption in progress)
	//  3=The volume is partially encrypted (Decryption in progress)
	//  4=The volume has been paused during the encryption process.  The volume is partially encrypted
	//  5=The volume has been paused during the decryption progress. The volume is partially encrypted.
	ConversionStatus []int32 `protobuf:"varint,14,rep,name=ConversionStatus" json:"ConversionStatus,omitempty"`
	// 0..100
	EncryptionPercentage []int32 `protobuf:"varint,15,rep,name=EncryptionPercentage" json:"EncryptionPercentage,omitempty"`
	// 0=FreeSpaceNotWiped, 1=FreeSpaceWiped, 2=FreeSpaceWipingInProgress, 3=FreeSpaceWipingPaused
	WipingStatus []int32 `protobuf:"varint,16,rep,name=WipingStatus" json:"WipingStatus,omitempty"`
	// 0..100, Percentage of free space that has been wiped
	WipingPercentage []int32 `protobuf:"varint,17,rep,name=WipingPercentage" json:"WipingPercentage,omitempty"`
	// 0..4 that specifies precision level
	PrecisionFactor []int32 `protobuf:"varint,18,rep,name=PrecisionFactor" json:"PrecisionFactor,omitempty"`
	// One of these: "", "OK","Error","Degraded","Unknown","Pred Fail","Starting","Stopping","Service","Stressed","NonRecover","No Contact","Lost Comm"
	Status           []string `protobuf:"bytes,19,rep,name=Status" json:"Status,omitempty"`
	Uuid             *string  `protobuf:"bytes,20,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SystemInventoryLogicalDisks) Reset()                    { *m = SystemInventoryLogicalDisks{} }
func (m *SystemInventoryLogicalDisks) String() string            { return proto1.CompactTextString(m) }
func (*SystemInventoryLogicalDisks) ProtoMessage()               {}
func (*SystemInventoryLogicalDisks) Descriptor() ([]byte, []int) { return fileDescriptor82, []int{0} }

func (m *SystemInventoryLogicalDisks) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *SystemInventoryLogicalDisks) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *SystemInventoryLogicalDisks) GetLogicalDrivesGUID() string {
	if m != nil && m.LogicalDrivesGUID != nil {
		return *m.LogicalDrivesGUID
	}
	return ""
}

func (m *SystemInventoryLogicalDisks) GetDriveMapping() []string {
	if m != nil {
		return m.DriveMapping
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetFreeSpace() []int64 {
	if m != nil {
		return m.FreeSpace
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetSize() []int64 {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetPnpDeviceID() []string {
	if m != nil {
		return m.PnpDeviceID
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetSerialNum() []string {
	if m != nil {
		return m.SerialNum
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *SystemInventoryLogicalDisks) GetDriveLetter() []string {
	if m != nil {
		return m.DriveLetter
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetProtectionStatus() []int32 {
	if m != nil {
		return m.ProtectionStatus
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetEncryptionMethod() []int32 {
	if m != nil {
		return m.EncryptionMethod
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetSelfEncryptionDriveEncryptionMethod() []string {
	if m != nil {
		return m.SelfEncryptionDriveEncryptionMethod
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetConversionStatus() []int32 {
	if m != nil {
		return m.ConversionStatus
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetEncryptionPercentage() []int32 {
	if m != nil {
		return m.EncryptionPercentage
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetWipingStatus() []int32 {
	if m != nil {
		return m.WipingStatus
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetWipingPercentage() []int32 {
	if m != nil {
		return m.WipingPercentage
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetPrecisionFactor() []int32 {
	if m != nil {
		return m.PrecisionFactor
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SystemInventoryLogicalDisks) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*SystemInventoryLogicalDisks)(nil), "SystemInventoryLogicalDisks")
}

var fileDescriptor82 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xdd, 0x6a, 0xdb, 0x30,
	0x14, 0xa6, 0xb5, 0xdb, 0xd5, 0xa7, 0xe9, 0x4f, 0xdc, 0xb0, 0x69, 0xeb, 0x2e, 0xbc, 0xec, 0x66,
	0x30, 0xf0, 0x43, 0x78, 0xd9, 0x4f, 0xa0, 0x19, 0x06, 0x6f, 0xec, 0xda, 0xc8, 0x27, 0x9e, 0x98,
	0x6d, 0x09, 0x49, 0x0e, 0xb8, 0x97, 0x83, 0x3d, 0xd2, 0xde, 0x6f, 0x47, 0x72, 0x82, 0x07, 0x85,
	0x5c, 0xea, 0xfb, 0x39, 0x9f, 0xf4, 0x1d, 0xc1, 0x9b, 0x62, 0x30, 0x16, 0xdb, 0x75, 0xb7, 0xc3,
	0xce, 0x4a, 0x3d, 0x3c, 0xc8, 0x5a, 0xf0, 0xb2, 0x59, 0x09, 0xf3, 0xcb, 0xa4, 0x4a, 0x4b, 0x2b,
	0x5f, 0xc5, 0xb9, 0x34, 0xb6, 0xd6, 0x68, 0xbe, 0x0d, 0x0a, 0x47, 0x6c, 0xf9, 0x27, 0x84, 0xfb,
	0x23, 0xce, 0x38, 0x81, 0xc8, 0x8a, 0x16, 0x0b, 0x5b, 0xb6, 0x8a, 0x9d, 0x24, 0xa7, 0xef, 0x82,
	0xec, 0xea, 0xf7, 0x5f, 0xe6, 0x41, 0xe3, 0xc0, 0xf8, 0x1e, 0xa2, 0xb2, 0x26, 0xe7, 0xe7, 0xef,
	0xeb, 0x15, 0x3b, 0x25, 0x45, 0x94, 0x5d, 0x90, 0x22, 0xec, 0x7b, 0x51, 0xc5, 0x2f, 0x61, 0xde,
	0xec, 0xc7, 0x69, 0xb1, 0x43, 0xe3, 0x45, 0x81, 0x13, 0xc5, 0x0b, 0x98, 0x55, 0x0e, 0xdb, 0x94,
	0x4a, 0x89, 0xae, 0x66, 0x61, 0x12, 0x10, 0x3a, 0x87, 0x68, 0xab, 0x11, 0x0b, 0x55, 0x72, 0x64,
	0x67, 0x04, 0x05, 0xf1, 0x0c, 0x42, 0x23, 0x1e, 0x91, 0x9d, 0xfb, 0xd3, 0x1d, 0x5c, 0xaa, 0x4e,
	0xad, 0x70, 0x27, 0x38, 0xd2, 0xac, 0x67, 0x07, 0x97, 0x41, 0x2d, 0xca, 0xe6, 0x6b, 0xdf, 0xb2,
	0x0b, 0x0f, 0x5d, 0xc3, 0xb9, 0x11, 0x16, 0xd7, 0x15, 0x8b, 0x92, 0x13, 0x3a, 0x93, 0xcf, 0xc7,
	0x3d, 0xa0, 0xb5, 0xa8, 0x19, 0x78, 0x11, 0x83, 0xdb, 0x9c, 0x6a, 0x40, 0x6e, 0x85, 0xec, 0xe8,
	0x8d, 0xb6, 0x37, 0xec, 0x92, 0x98, 0x33, 0xc7, 0x7c, 0xec, 0xb8, 0x1e, 0x94, 0x63, 0x36, 0x68,
	0x7f, 0xca, 0x8a, 0xcd, 0x3c, 0xf3, 0x1e, 0xde, 0x16, 0xd8, 0x6c, 0x27, 0xd6, 0xbf, 0xec, 0x89,
	0xf8, 0xea, 0x10, 0xf0, 0x41, 0x52, 0xb1, 0xda, 0x4c, 0x01, 0xd7, 0x7e, 0xcc, 0x6b, 0x58, 0x4c,
	0x9e, 0x1c, 0x35, 0xa7, 0x0a, 0xa9, 0x47, 0x76, 0xe3, 0x59, 0x2a, 0xe7, 0x87, 0x70, 0xb5, 0xec,
	0x3d, 0xb7, 0x87, 0x4b, 0x8d, 0xe8, 0x7f, 0xfa, 0xb9, 0x67, 0x5e, 0xc0, 0x4d, 0xae, 0x91, 0x0b,
	0x17, 0xf3, 0xa9, 0xe4, 0xb4, 0x46, 0x16, 0x7b, 0x82, 0x6a, 0xd8, 0x8f, 0xb8, 0xf3, 0x17, 0x7a,
	0x0e, 0x7e, 0x31, 0x6c, 0xe1, 0x4a, 0x99, 0x16, 0x95, 0x7d, 0x81, 0x25, 0x97, 0x6d, 0xfa, 0x28,
	0xb6, 0x16, 0xbb, 0x94, 0xca, 0xa4, 0x3b, 0x8f, 0x5f, 0x84, 0xcb, 0x26, 0xa5, 0x5d, 0x1b, 0x0a,
	0xcb, 0x96, 0x47, 0xbe, 0xca, 0x66, 0xd4, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x64, 0x6f, 0x66,
	0xe9, 0x89, 0x02, 0x00, 0x00,
}
