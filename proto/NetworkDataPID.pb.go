// Code generated by protoc-gen-go.
// source: NetworkDataPID.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Send performance metrics about traffic (TCP SEND/RECEIVE) of given processes
// Data is derived by ETW Network Trace
// @see http://msdn.microsoft.com/en-us/library/windows/desktop/aa364128(v=vs.85).aspx
type NetworkDataPID struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	PID       *int32  `protobuf:"varint,3,req,name=PID" json:"PID,omitempty"`
	// The fully qualified filename of the binary: i.e. 'c:\windows\system32\binary.exe'
	ImageFilepath   *string `protobuf:"bytes,4,req,name=imageFilepath" json:"imageFilepath,omitempty"`
	SentBytes       *int32  `protobuf:"varint,5,req,name=sentBytes" json:"sentBytes,omitempty"`
	ReceivedBytes   *int32  `protobuf:"varint,6,req,name=receivedBytes" json:"receivedBytes,omitempty"`
	SentBytesV2     *uint64 `protobuf:"varint,9,opt,name=sentBytes_v2" json:"sentBytes_v2,omitempty"`
	ReceivedBytesV2 *uint64 `protobuf:"varint,10,opt,name=receivedBytes_v2" json:"receivedBytes_v2,omitempty"`
	// MD5 for imageFilepath
	ImageFileMD5 *string `protobuf:"bytes,7,opt,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	SiteId       *string `protobuf:"bytes,8,opt,name=siteId" json:"siteId,omitempty"`
	// Indexes 9-10 are used above to remove the overflow problem
	Uuid *string `protobuf:"bytes,11,opt,name=uuid" json:"uuid,omitempty"`
	//
	ProcessUUID      *string `protobuf:"bytes,12,opt,name=processUUID" json:"processUUID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetworkDataPID) Reset()                    { *m = NetworkDataPID{} }
func (m *NetworkDataPID) String() string            { return proto1.CompactTextString(m) }
func (*NetworkDataPID) ProtoMessage()               {}
func (*NetworkDataPID) Descriptor() ([]byte, []int) { return fileDescriptor38, []int{0} }

func (m *NetworkDataPID) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *NetworkDataPID) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *NetworkDataPID) GetPID() int32 {
	if m != nil && m.PID != nil {
		return *m.PID
	}
	return 0
}

func (m *NetworkDataPID) GetImageFilepath() string {
	if m != nil && m.ImageFilepath != nil {
		return *m.ImageFilepath
	}
	return ""
}

func (m *NetworkDataPID) GetSentBytes() int32 {
	if m != nil && m.SentBytes != nil {
		return *m.SentBytes
	}
	return 0
}

func (m *NetworkDataPID) GetReceivedBytes() int32 {
	if m != nil && m.ReceivedBytes != nil {
		return *m.ReceivedBytes
	}
	return 0
}

func (m *NetworkDataPID) GetSentBytesV2() uint64 {
	if m != nil && m.SentBytesV2 != nil {
		return *m.SentBytesV2
	}
	return 0
}

func (m *NetworkDataPID) GetReceivedBytesV2() uint64 {
	if m != nil && m.ReceivedBytesV2 != nil {
		return *m.ReceivedBytesV2
	}
	return 0
}

func (m *NetworkDataPID) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *NetworkDataPID) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *NetworkDataPID) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *NetworkDataPID) GetProcessUUID() string {
	if m != nil && m.ProcessUUID != nil {
		return *m.ProcessUUID
	}
	return ""
}

func init() {
	proto1.RegisterType((*NetworkDataPID)(nil), "NetworkDataPID")
}

var fileDescriptor38 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x69, 0x92, 0xd6, 0xee, 0xa4, 0x2d, 0xba, 0xb4, 0xb2, 0x28, 0x42, 0xe8, 0xa9, 0xa7,
	0x1c, 0x04, 0x4f, 0xde, 0x42, 0x50, 0x72, 0xa8, 0x14, 0xb4, 0x67, 0x09, 0xc9, 0x58, 0x17, 0x9b,
	0x6e, 0xd8, 0xdd, 0x46, 0xea, 0xd1, 0xc7, 0xf1, 0xee, 0xfb, 0x39, 0x49, 0xb0, 0x34, 0xc7, 0xf9,
	0xfe, 0x2f, 0x99, 0xd9, 0x1f, 0xa6, 0x4f, 0x68, 0x3f, 0x95, 0xfe, 0x88, 0x53, 0x9b, 0xae, 0x92,
	0x38, 0x2c, 0xb5, 0xb2, 0xea, 0x8a, 0xaf, 0x94, 0xb1, 0x1b, 0x8d, 0xe6, 0xe5, 0x50, 0x62, 0xcb,
	0xe6, 0x3f, 0x0e, 0x4c, 0xba, 0x32, 0x0f, 0x80, 0x59, 0x59, 0xe0, 0xb3, 0x4d, 0x8b, 0x52, 0xf4,
	0x02, 0x67, 0xe1, 0x46, 0xe3, 0xef, 0x5f, 0xd1, 0x40, 0x53, 0x43, 0x7e, 0x0d, 0x2c, 0xdd, 0xe0,
	0xce, 0x3e, 0xae, 0x93, 0x58, 0x38, 0x64, 0xb0, 0x68, 0x48, 0x86, 0xb7, 0xdf, 0xcb, 0x9c, 0xfb,
	0xe0, 0xd2, 0x5f, 0x84, 0x4b, 0xb8, 0xcf, 0x67, 0x30, 0x96, 0x05, 0xb9, 0x0f, 0x72, 0x8b, 0x65,
	0x6a, 0xdf, 0x85, 0x57, 0xdb, 0xfc, 0x02, 0x98, 0xa1, 0xef, 0xa3, 0x83, 0x45, 0x23, 0xfa, 0xff,
	0xa6, 0xc6, 0x0c, 0x65, 0x85, 0x79, 0x8b, 0x07, 0x0d, 0x9e, 0xc2, 0xe8, 0x68, 0xbe, 0x56, 0xb7,
	0x82, 0x05, 0xbd, 0x85, 0xc7, 0x05, 0x9c, 0x77, 0xe4, 0x3a, 0x81, 0x26, 0x21, 0xff, 0xb8, 0x70,
	0x19, 0xdf, 0x89, 0x33, 0xa2, 0x8c, 0x4f, 0x60, 0x60, 0xa4, 0xc5, 0x24, 0x17, 0xc3, 0x66, 0xbe,
	0x84, 0xe6, 0x56, 0xe1, 0xd7, 0xd3, 0xc9, 0xed, 0x37, 0xe0, 0x53, 0x2d, 0x19, 0x1a, 0xb3, 0xae,
	0x9f, 0x36, 0xea, 0xc6, 0xd1, 0x3d, 0xcc, 0x33, 0x55, 0x84, 0x5f, 0xf2, 0xcd, 0xe2, 0x2e, 0x34,
	0xa8, 0x2b, 0xd4, 0x6d, 0x8f, 0x99, 0xda, 0x86, 0xd4, 0x8e, 0xa1, 0xcd, 0xd1, 0xac, 0xdb, 0xe7,
	0xb2, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0x43, 0x0e, 0xe2, 0x94, 0x01, 0x00, 0x00,
}
