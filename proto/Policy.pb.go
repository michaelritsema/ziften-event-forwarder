// Code generated by protoc-gen-go.
// source: Policy.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Flags to specify when this Rule is processed.
type Policy_RunRuleFlag int32

const (
	Policy_RUN_RULE_NEVER                  Policy_RunRuleFlag = 0
	Policy_RUN_RULE_STARTUP                Policy_RunRuleFlag = 1
	Policy_RUN_RULE_SHUTDOWN               Policy_RunRuleFlag = 2
	Policy_RUN_RULE_PROCESS_START          Policy_RunRuleFlag = 4
	Policy_RUN_RULE_PROCESS_END            Policy_RunRuleFlag = 8
	Policy_RUN_RULE_PROCESS_ENUMERATION    Policy_RunRuleFlag = 16
	Policy_RUN_RULE_NEW_NETWORK_CONNECTION Policy_RunRuleFlag = 32
	Policy_RUN_RULE_TIMER                  Policy_RunRuleFlag = 64
)

var Policy_RunRuleFlag_name = map[int32]string{
	0:  "RUN_RULE_NEVER",
	1:  "RUN_RULE_STARTUP",
	2:  "RUN_RULE_SHUTDOWN",
	4:  "RUN_RULE_PROCESS_START",
	8:  "RUN_RULE_PROCESS_END",
	16: "RUN_RULE_PROCESS_ENUMERATION",
	32: "RUN_RULE_NEW_NETWORK_CONNECTION",
	64: "RUN_RULE_TIMER",
}
var Policy_RunRuleFlag_value = map[string]int32{
	"RUN_RULE_NEVER":                  0,
	"RUN_RULE_STARTUP":                1,
	"RUN_RULE_SHUTDOWN":               2,
	"RUN_RULE_PROCESS_START":          4,
	"RUN_RULE_PROCESS_END":            8,
	"RUN_RULE_PROCESS_ENUMERATION":    16,
	"RUN_RULE_NEW_NETWORK_CONNECTION": 32,
	"RUN_RULE_TIMER":                  64,
}

func (x Policy_RunRuleFlag) Enum() *Policy_RunRuleFlag {
	p := new(Policy_RunRuleFlag)
	*p = x
	return p
}
func (x Policy_RunRuleFlag) String() string {
	return proto1.EnumName(Policy_RunRuleFlag_name, int32(x))
}
func (x *Policy_RunRuleFlag) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Policy_RunRuleFlag_value, data, "Policy_RunRuleFlag")
	if err != nil {
		return err
	}
	*x = Policy_RunRuleFlag(value)
	return nil
}
func (Policy_RunRuleFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor65, []int{0, 0} }

// Policy Flags to specify when to send PolicyStatus messages and on what states (Required program stops, or banned program starts, etc)
type Policy_PolicyFlags int32

const (
	Policy_SEND_NOTHING           Policy_PolicyFlags = 0
	Policy_SEND_IN_COMPLIANCE     Policy_PolicyFlags = 1
	Policy_SEND_OUT_COMPLIANCE    Policy_PolicyFlags = 2
	Policy_SEND_IN_OUT_COMPLIANCE Policy_PolicyFlags = 3
	Policy_SEND_IS_RUNNING        Policy_PolicyFlags = 4
	Policy_SEND_ISNOT_RUNNING     Policy_PolicyFlags = 8
	Policy_SEND_IS_ISNOT_RUNNING  Policy_PolicyFlags = 12
)

var Policy_PolicyFlags_name = map[int32]string{
	0:  "SEND_NOTHING",
	1:  "SEND_IN_COMPLIANCE",
	2:  "SEND_OUT_COMPLIANCE",
	3:  "SEND_IN_OUT_COMPLIANCE",
	4:  "SEND_IS_RUNNING",
	8:  "SEND_ISNOT_RUNNING",
	12: "SEND_IS_ISNOT_RUNNING",
}
var Policy_PolicyFlags_value = map[string]int32{
	"SEND_NOTHING":           0,
	"SEND_IN_COMPLIANCE":     1,
	"SEND_OUT_COMPLIANCE":    2,
	"SEND_IN_OUT_COMPLIANCE": 3,
	"SEND_IS_RUNNING":        4,
	"SEND_ISNOT_RUNNING":     8,
	"SEND_IS_ISNOT_RUNNING":  12,
}

func (x Policy_PolicyFlags) Enum() *Policy_PolicyFlags {
	p := new(Policy_PolicyFlags)
	*p = x
	return p
}
func (x Policy_PolicyFlags) String() string {
	return proto1.EnumName(Policy_PolicyFlags_name, int32(x))
}
func (x *Policy_PolicyFlags) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Policy_PolicyFlags_value, data, "Policy_PolicyFlags")
	if err != nil {
		return err
	}
	*x = Policy_PolicyFlags(value)
	return nil
}
func (Policy_PolicyFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor65, []int{0, 1} }

// This is the base message defining a single Policy.
type Policy struct {
	// Unique value to send as part of the compliance message to know which rule we are reporting on to the server (in-compliance or out-of-compliance)
	PolicyID *int32              `protobuf:"varint,1,opt,name=policyID,def=0" json:"policyID,omitempty"`
	RunFlags *Policy_RunRuleFlag `protobuf:"varint,2,opt,name=runFlags,enum=Policy_RunRuleFlag,def=64" json:"runFlags,omitempty"`
	// Name of method in code to call on the agent ("CHECK_PROCESS_LIST", "FORBIDDEN_PROCESS_LIST", etc.)
	// CHECK_PROCESS_LIST: One or more process names listed in dataString must be running to be in compliance
	// If none are found then we are out of compliance for this policy.
	// FORBIDDEN_PROCESS_LIST: None of the process names listed in dataString can be running to be in compliance
	// If none are found then we are in compliance for this policy.  If one or more are found then we
	// will send an OUT_OF_COMPLIANCE message if SEND_OUT_COMPLIANCE is set (or SEND_IN_OUT_COMPLIANCE)
	// If an unknown method name is specified then the agent does not generate and error - outputs a log line instead
	Method *string `protobuf:"bytes,3,opt,name=method,def=CHECK_PROCESS_LIST" json:"method,omitempty"`
	// Delineated string ('|') to support multiple strings being passed to the Method specified above
	// Example: notepad.exe|wordpad.exe
	// Please note that on the agent all names are converted to lower case and compared against lower case process names
	// Do NOT include path information.  The comparison is only with filenames and must include file extension
	DataString *string `protobuf:"bytes,4,opt,name=dataString,def=" json:"dataString,omitempty"`
	// Simple integer used by certain messages (and not used by others).  Default is 0.
	DataNum *int64 `protobuf:"varint,5,opt,name=dataNum,def=0" json:"dataNum,omitempty"`
	// ID/Key for server use (returned in PolicyStatus)
	DataID *int64 `protobuf:"varint,6,opt,name=dataID,def=0" json:"dataID,omitempty"`
	// Number of seconds involved in the compliance check.  This is Method dependent.  On the CHECK_PROCESS_LIST message,
	// this is the number of seconds we can have no match (no matching process running) before we generate an alert.
	// This value can be zero if there is no time dependence (like FORBIDDEN_PROCESS_LIST - alert immediately)
	TimeCheck           *int32              `protobuf:"varint,7,opt,name=timeCheck,def=0" json:"timeCheck,omitempty"`
	SendComplianceFlags *Policy_PolicyFlags `protobuf:"varint,8,opt,name=sendComplianceFlags,enum=Policy_PolicyFlags,def=3" json:"sendComplianceFlags,omitempty"`
	SiteId              *string             `protobuf:"bytes,9,opt,name=siteId" json:"siteId,omitempty"`
	Uuid                *string             `protobuf:"bytes,10,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized    []byte              `json:"-"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto1.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor65, []int{0} }

const Default_Policy_PolicyID int32 = 0
const Default_Policy_RunFlags Policy_RunRuleFlag = Policy_RUN_RULE_TIMER
const Default_Policy_Method string = "CHECK_PROCESS_LIST"
const Default_Policy_DataNum int64 = 0
const Default_Policy_DataID int64 = 0
const Default_Policy_TimeCheck int32 = 0
const Default_Policy_SendComplianceFlags Policy_PolicyFlags = Policy_SEND_IN_OUT_COMPLIANCE

func (m *Policy) GetPolicyID() int32 {
	if m != nil && m.PolicyID != nil {
		return *m.PolicyID
	}
	return Default_Policy_PolicyID
}

func (m *Policy) GetRunFlags() Policy_RunRuleFlag {
	if m != nil && m.RunFlags != nil {
		return *m.RunFlags
	}
	return Default_Policy_RunFlags
}

func (m *Policy) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return Default_Policy_Method
}

func (m *Policy) GetDataString() string {
	if m != nil && m.DataString != nil {
		return *m.DataString
	}
	return ""
}

func (m *Policy) GetDataNum() int64 {
	if m != nil && m.DataNum != nil {
		return *m.DataNum
	}
	return Default_Policy_DataNum
}

func (m *Policy) GetDataID() int64 {
	if m != nil && m.DataID != nil {
		return *m.DataID
	}
	return Default_Policy_DataID
}

func (m *Policy) GetTimeCheck() int32 {
	if m != nil && m.TimeCheck != nil {
		return *m.TimeCheck
	}
	return Default_Policy_TimeCheck
}

func (m *Policy) GetSendComplianceFlags() Policy_PolicyFlags {
	if m != nil && m.SendComplianceFlags != nil {
		return *m.SendComplianceFlags
	}
	return Default_Policy_SendComplianceFlags
}

func (m *Policy) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *Policy) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*Policy)(nil), "Policy")
	proto1.RegisterEnum("Policy_RunRuleFlag", Policy_RunRuleFlag_name, Policy_RunRuleFlag_value)
	proto1.RegisterEnum("Policy_PolicyFlags", Policy_PolicyFlags_name, Policy_PolicyFlags_value)
}

var fileDescriptor65 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x8e, 0xd3, 0x3e,
	0x14, 0xc6, 0xa7, 0xd3, 0xcb, 0xa4, 0xe7, 0xdf, 0x7f, 0xf1, 0xb8, 0x9d, 0x62, 0x46, 0x48, 0x54,
	0x65, 0xc3, 0xaa, 0x42, 0x20, 0x36, 0x5d, 0xd1, 0xa6, 0x81, 0x46, 0xd3, 0x3a, 0x51, 0xe2, 0xd0,
	0x65, 0x14, 0x25, 0xa6, 0x13, 0x91, 0x4b, 0x95, 0x0b, 0xd2, 0xb0, 0xe4, 0x99, 0xe0, 0x55, 0xd8,
	0xf2, 0x2a, 0x38, 0x09, 0xe9, 0x45, 0xcc, 0x22, 0x4a, 0xfc, 0x9d, 0xe3, 0x9c, 0xdf, 0xf7, 0xd9,
	0xd0, 0xd3, 0xe3, 0xc0, 0x77, 0x1f, 0xa6, 0xfb, 0x24, 0xce, 0xe2, 0x5b, 0xac, 0xc7, 0x69, 0xb6,
	0x4b, 0x78, 0xca, 0x1e, 0xf6, 0xbc, 0xd2, 0x26, 0xbf, 0xda, 0xd0, 0xa9, 0x9a, 0xf0, 0x00, 0xa4,
	0x7d, 0xf9, 0xa5, 0x2e, 0x49, 0x63, 0xdc, 0x78, 0xd5, 0x9e, 0x35, 0x5e, 0xe3, 0x77, 0x20, 0x25,
	0x79, 0xf4, 0x21, 0x70, 0x76, 0x29, 0xb9, 0x14, 0x62, 0xff, 0xcd, 0x60, 0xfa, 0xf7, 0xa7, 0x46,
	0x1e, 0x19, 0x79, 0xc0, 0x8b, 0xda, 0xac, 0x6f, 0x58, 0xd4, 0x36, 0xac, 0xb5, 0x62, 0x33, 0x75,
	0xa3, 0x18, 0x78, 0x02, 0x9d, 0x90, 0x67, 0xf7, 0xb1, 0x47, 0x9a, 0x62, 0x53, 0x77, 0x86, 0xe5,
	0x95, 0x22, 0xdf, 0xd9, 0xba, 0xa1, 0xc9, 0x8a, 0x69, 0xda, 0x6b, 0xd5, 0x64, 0x78, 0x08, 0xe0,
	0x39, 0x99, 0x63, 0x66, 0x89, 0x1f, 0xed, 0x48, 0xab, 0xec, 0xbb, 0xc0, 0x18, 0xae, 0x0a, 0x95,
	0xe6, 0x21, 0x69, 0x0b, 0xa9, 0x59, 0x40, 0x5c, 0x43, 0xa7, 0xd0, 0x04, 0x57, 0xa7, 0x96, 0x86,
	0xd0, 0xcd, 0xfc, 0x90, 0xcb, 0xf7, 0xdc, 0xfd, 0x42, 0xae, 0x6a, 0xda, 0x15, 0x0c, 0x52, 0x1e,
	0x79, 0x72, 0x1c, 0xee, 0x03, 0xdf, 0x89, 0x5c, 0x5e, 0x81, 0x4b, 0xe7, 0xe0, 0xd5, 0xab, 0x2c,
	0xcd, 0x46, 0xa6, 0x42, 0x97, 0xb6, 0x4a, 0x6d, 0xcd, 0x62, 0xb6, 0xac, 0x6d, 0xf4, 0xb5, 0x3a,
	0xa7, 0xb2, 0x82, 0xfb, 0xd0, 0x49, 0xfd, 0x8c, 0xab, 0x1e, 0xe9, 0x16, 0x60, 0x78, 0x04, 0xad,
	0x3c, 0xf7, 0x3d, 0x02, 0xc5, 0x6a, 0x21, 0x7d, 0xff, 0x49, 0xca, 0xf5, 0xe4, 0x77, 0x03, 0xfe,
	0x3b, 0x09, 0x42, 0xe0, 0x1f, 0xa3, 0xa0, 0xca, 0x27, 0xc5, 0x40, 0x17, 0x82, 0x15, 0x1d, 0x34,
	0x93, 0xcd, 0x0d, 0x66, 0xe9, 0xa8, 0x81, 0x6f, 0xe0, 0xfa, 0xa8, 0xae, 0x2c, 0xb6, 0xd4, 0xb6,
	0x14, 0x5d, 0xe2, 0x5b, 0x18, 0x1d, 0xe4, 0x3a, 0xae, 0x72, 0x13, 0x6a, 0x61, 0x02, 0xc3, 0x7f,
	0x6a, 0x02, 0x1f, 0x49, 0x78, 0x0c, 0xcf, 0x1f, 0xa9, 0x58, 0xe2, 0x28, 0xe6, 0x4c, 0xd5, 0x28,
	0x42, 0xf8, 0x25, 0xbc, 0x38, 0x01, 0xdb, 0x8a, 0x87, 0x6d, 0x35, 0xe3, 0x4e, 0x78, 0xa6, 0x54,
	0x91, 0xcb, 0xa6, 0xf1, 0x19, 0x7d, 0x79, 0x90, 0xe8, 0xfd, 0xe4, 0x87, 0x70, 0x78, 0x92, 0x18,
	0x46, 0xd0, 0x2b, 0x33, 0xa3, 0x1a, 0x5b, 0xa9, 0xf4, 0xa3, 0xf0, 0x37, 0x02, 0x5c, 0xa7, 0x78,
	0x4c, 0x50, 0x38, 0x7c, 0x0a, 0x83, 0x52, 0x3f, 0x8f, 0xb6, 0xf2, 0xf8, 0x78, 0xec, 0xa8, 0x29,
	0x6e, 0xe1, 0x93, 0xaa, 0x66, 0x0a, 0x0c, 0x4a, 0x8b, 0x09, 0xad, 0xe3, 0x04, 0x53, 0x4c, 0x3d,
	0xe8, 0x12, 0x7e, 0x06, 0x37, 0x75, 0xf3, 0x79, 0xa9, 0xb7, 0x78, 0x0b, 0x13, 0x37, 0x0e, 0xa7,
	0xdf, 0xfc, 0xcf, 0x19, 0x8f, 0xa6, 0x29, 0x4f, 0xbe, 0xf2, 0xa4, 0xba, 0xf3, 0x6e, 0x1c, 0x4c,
	0x43, 0x9e, 0xa6, 0xce, 0x8e, 0x2f, 0xfe, 0xaf, 0x9c, 0x6d, 0xaa, 0xe5, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x20, 0x60, 0x3f, 0xa9, 0x30, 0x03, 0x00, 0x00,
}
