// Code generated by protoc-gen-go.
// source: BootProfile.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// We process the ETL file to get the following information
type BootProfile struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Time required to boot to the system. The time the login panel was shown (gap time) is subtracted as well
	// as the 10 second IDLE time.  This INCLUDES the loginTime.  You should add the presmssTime to this - this
	// is NOT done already for you.
	// We follow the Microsoft methodology documented in:
	// Windows On/Off Transition Performance Analysis
	// http://msdn.microsoft.com/en-us/library/windows/hardware/gg463386.aspx
	BootTime *int64 `protobuf:"varint,3,req,name=bootTime" json:"bootTime,omitempty"`
	// Time required to login to the system.  This is from login to the end of the IDLE sequence we wait for
	LoginTime *int64 `protobuf:"varint,4,opt,name=loginTime" json:"loginTime,omitempty"`
	// To get the startup time PRIOR to the gap time (CTRL-ALT-DELETE screen seen), take bootTime and subtract
	// loginTime.
	// GUID that ties this message to the boot analysis message containing the info from the boot trace
	AnalysisGUID *string `protobuf:"bytes,5,opt,name=analysisGUID" json:"analysisGUID,omitempty"`
	// Time that passes BEFORE the launch of SMSS.exe.  This is roughly equivalent to the time required to load the Windows Device Drivers
	// and should be added to the bootTime
	PresmssTime *int64  `protobuf:"varint,6,opt,name=presmssTime" json:"presmssTime,omitempty"`
	SiteId      *string `protobuf:"bytes,7,opt,name=siteId" json:"siteId,omitempty"`
	// UTC Time when the system booted. This is the same as the timestamp of the first process (smss.exe) in the bootanalysis message.
	BootStartTime *int64  `protobuf:"varint,8,opt,name=bootStartTime" json:"bootStartTime,omitempty"`
	Uuid          *string `protobuf:"bytes,9,opt,name=uuid" json:"uuid,omitempty"`
	// Tie this to the actual system boot (uses UUID)
	BootAnalysisGUID *string `protobuf:"bytes,10,opt,name=bootAnalysisGUID" json:"bootAnalysisGUID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BootProfile) Reset()                    { *m = BootProfile{} }
func (m *BootProfile) String() string            { return proto1.CompactTextString(m) }
func (*BootProfile) ProtoMessage()               {}
func (*BootProfile) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *BootProfile) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *BootProfile) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *BootProfile) GetBootTime() int64 {
	if m != nil && m.BootTime != nil {
		return *m.BootTime
	}
	return 0
}

func (m *BootProfile) GetLoginTime() int64 {
	if m != nil && m.LoginTime != nil {
		return *m.LoginTime
	}
	return 0
}

func (m *BootProfile) GetAnalysisGUID() string {
	if m != nil && m.AnalysisGUID != nil {
		return *m.AnalysisGUID
	}
	return ""
}

func (m *BootProfile) GetPresmssTime() int64 {
	if m != nil && m.PresmssTime != nil {
		return *m.PresmssTime
	}
	return 0
}

func (m *BootProfile) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *BootProfile) GetBootStartTime() int64 {
	if m != nil && m.BootStartTime != nil {
		return *m.BootStartTime
	}
	return 0
}

func (m *BootProfile) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *BootProfile) GetBootAnalysisGUID() string {
	if m != nil && m.BootAnalysisGUID != nil {
		return *m.BootAnalysisGUID
	}
	return ""
}

func init() {
	proto1.RegisterType((*BootProfile)(nil), "BootProfile")
}

var fileDescriptor14 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x69, 0xda, 0xbf, 0x7f, 0xe6, 0xd6, 0x4a, 0x3b, 0x82, 0x0c, 0x0a, 0x12, 0x82, 0x0b,
	0x57, 0x59, 0xbb, 0x75, 0x10, 0xa4, 0x0b, 0xa1, 0x60, 0x7d, 0x80, 0xd8, 0x4e, 0xc3, 0x40, 0x92,
	0x1b, 0xe6, 0x4e, 0x85, 0xba, 0xf4, 0x29, 0x7c, 0x11, 0xdf, 0xcf, 0x3b, 0x13, 0x17, 0xb1, 0xdb,
	0x8f, 0xef, 0x9e, 0x73, 0xb8, 0xb0, 0xd4, 0x88, 0x7e, 0xed, 0x70, 0x6f, 0x6b, 0x53, 0x74, 0x0e,
	0x3d, 0x5e, 0xc9, 0x35, 0x92, 0xaf, 0x9c, 0xa1, 0xcd, 0xb1, 0xfb, 0x65, 0xf9, 0x57, 0x02, 0xb3,
	0x81, 0x29, 0x33, 0x10, 0xde, 0x36, 0xe6, 0xc5, 0x97, 0x4d, 0xa7, 0x46, 0x59, 0x72, 0x37, 0xd6,
	0xf3, 0xcf, 0x6f, 0x15, 0x21, 0x05, 0x28, 0xaf, 0x41, 0x94, 0x95, 0x69, 0xfd, 0xd3, 0xeb, 0xea,
	0x51, 0x25, 0x6c, 0x08, 0x9d, 0xb2, 0x31, 0x39, 0x1c, 0xec, 0x4e, 0x2e, 0x20, 0x7d, 0xe3, 0xb4,
	0x0d, 0xdb, 0x6a, 0x1c, 0xae, 0xe5, 0x12, 0x44, 0x8d, 0x95, 0x6d, 0x23, 0x9a, 0x64, 0x23, 0x46,
	0x37, 0x70, 0x56, 0xb6, 0x65, 0x7d, 0x24, 0x4b, 0x31, 0xe4, 0x1f, 0xd3, 0x61, 0xc8, 0x05, 0xcc,
	0x3a, 0x5e, 0xd9, 0x10, 0xc5, 0xa3, 0x69, 0x3c, 0x3a, 0x87, 0x29, 0x59, 0x6f, 0x56, 0x3b, 0xf5,
	0x3f, 0xe8, 0xf2, 0x16, 0xe6, 0xa1, 0x89, 0x87, 0xba, 0xbe, 0x2e, 0x0d, 0xda, 0xe9, 0xd8, 0x4b,
	0x88, 0x91, 0x4a, 0x9c, 0x54, 0xe4, 0xb0, 0x08, 0xd7, 0x0f, 0xc3, 0x19, 0xf0, 0xd7, 0xd1, 0xf7,
	0x90, 0x6f, 0xb1, 0x29, 0x3e, 0xec, 0xde, 0x9b, 0xb6, 0x20, 0xe3, 0xde, 0x8d, 0xeb, 0xbf, 0xb6,
	0xc5, 0xba, 0xe0, 0x06, 0xe2, 0x3f, 0x68, 0x39, 0xf8, 0xde, 0x73, 0xcf, 0x7e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xbd, 0x74, 0xb1, 0xc6, 0x7c, 0x01, 0x00, 0x00,
}
