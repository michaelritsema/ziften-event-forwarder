// Code generated by protoc-gen-go.
// source: LogonNotifications.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This message is used by agent to report Users Logging On and Off the system
type LogonNotifications struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// true=Logon, false=Logoff
	IsLogon *bool `protobuf:"varint,3,req,name=isLogon" json:"isLogon,omitempty"`
	// true=Console logon/logoff, false=Remote logon/logoff
	IsConsole *bool `protobuf:"varint,4,req,name=isConsole" json:"isConsole,omitempty"`
	// Getting User information, see http://msdn.microsoft.com/en-us/library/windows/desktop/ms724435(v=vs.85).aspx
	// We use GetUserNameEx with various identifiers
	// User name, parsed from fullName
	AccountName *string `protobuf:"bytes,5,req,name=accountName" json:"accountName,omitempty"`
	// User domain, parsed from fullName
	DomainName *string `protobuf:"bytes,6,req,name=domainName" json:"domainName,omitempty"`
	// Provided by GetNameUser(NameFullyQualifiedDN) - 'CN=David Stidolph,OU=people,DC=ziften,DC=local'
	OuName *string `protobuf:"bytes,7,req,name=ouName" json:"ouName,omitempty"`
	// Provided by GetNameUser(NameSamCompatible) - 'ZIFTEN\david.stidolph'
	FullName *string `protobuf:"bytes,8,req,name=fullName" json:"fullName,omitempty"`
	// using GetNameUserEx(NameDisplay) - 'David Stidolph'
	DisplayName *string `protobuf:"bytes,9,req,name=displayName" json:"displayName,omitempty"`
	// using GetNameUserEx(NameUniqueId) - '{902b1e9f-a064-4650-a320-b73a307bd654}'
	Guid *string `protobuf:"bytes,10,req,name=guid" json:"guid,omitempty"`
	// using GetNameUserEx(NameServicePrincipal) - ''
	PrincipalName *string `protobuf:"bytes,11,req,name=principalName" json:"principalName,omitempty"`
	// using GetNameUserEx(NameCanonical) - 'ziften.local/people/David Stidolph'
	CanonicalName    *string `protobuf:"bytes,12,req,name=canonicalName" json:"canonicalName,omitempty"`
	SiteId           *string `protobuf:"bytes,13,opt,name=siteId" json:"siteId,omitempty"`
	Uuid             *string `protobuf:"bytes,14,opt,name=uuid" json:"uuid,omitempty"`
	IsLocalAdmin     *bool   `protobuf:"varint,15,opt,name=isLocalAdmin" json:"isLocalAdmin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogonNotifications) Reset()                    { *m = LogonNotifications{} }
func (m *LogonNotifications) String() string            { return proto1.CompactTextString(m) }
func (*LogonNotifications) ProtoMessage()               {}
func (*LogonNotifications) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{0} }

func (m *LogonNotifications) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *LogonNotifications) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *LogonNotifications) GetIsLogon() bool {
	if m != nil && m.IsLogon != nil {
		return *m.IsLogon
	}
	return false
}

func (m *LogonNotifications) GetIsConsole() bool {
	if m != nil && m.IsConsole != nil {
		return *m.IsConsole
	}
	return false
}

func (m *LogonNotifications) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *LogonNotifications) GetDomainName() string {
	if m != nil && m.DomainName != nil {
		return *m.DomainName
	}
	return ""
}

func (m *LogonNotifications) GetOuName() string {
	if m != nil && m.OuName != nil {
		return *m.OuName
	}
	return ""
}

func (m *LogonNotifications) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *LogonNotifications) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *LogonNotifications) GetGuid() string {
	if m != nil && m.Guid != nil {
		return *m.Guid
	}
	return ""
}

func (m *LogonNotifications) GetPrincipalName() string {
	if m != nil && m.PrincipalName != nil {
		return *m.PrincipalName
	}
	return ""
}

func (m *LogonNotifications) GetCanonicalName() string {
	if m != nil && m.CanonicalName != nil {
		return *m.CanonicalName
	}
	return ""
}

func (m *LogonNotifications) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *LogonNotifications) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *LogonNotifications) GetIsLocalAdmin() bool {
	if m != nil && m.IsLocalAdmin != nil {
		return *m.IsLocalAdmin
	}
	return false
}

func init() {
	proto1.RegisterType((*LogonNotifications)(nil), "LogonNotifications")
}

var fileDescriptor34 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0xdd, 0x4a, 0xfb, 0x40,
	0x10, 0xc5, 0xe9, 0xc7, 0xbf, 0x4d, 0xa6, 0x5f, 0x7f, 0xd7, 0x0f, 0x56, 0xbd, 0x29, 0xbd, 0xf2,
	0x2a, 0xaf, 0x20, 0x46, 0x41, 0x0a, 0x5a, 0x04, 0xf5, 0x01, 0x96, 0xcd, 0x26, 0x0c, 0x24, 0x3b,
	0x21, 0xbb, 0x11, 0xea, 0xa5, 0xef, 0xe4, 0x83, 0xf8, 0x46, 0x6e, 0x26, 0x14, 0x84, 0x5e, 0x9e,
	0xdf, 0xcc, 0x9c, 0xdd, 0x73, 0x40, 0x3e, 0x51, 0x41, 0x76, 0x47, 0x1e, 0x73, 0xd4, 0xca, 0x23,
	0x59, 0x97, 0xd4, 0x0d, 0x79, 0xba, 0x12, 0x2f, 0xe4, 0x7c, 0xd1, 0x18, 0xf7, 0xb6, 0xaf, 0x4d,
	0xcf, 0x36, 0x3f, 0x43, 0x10, 0xc7, 0x07, 0x62, 0x0d, 0xb1, 0xc7, 0xca, 0xbc, 0x7a, 0x55, 0xd5,
	0x72, 0xb0, 0x1e, 0xde, 0x8c, 0xd2, 0xc5, 0xd7, 0xb7, 0x64, 0xe8, 0x3a, 0x28, 0xae, 0x21, 0x56,
	0x85, 0xb1, 0xfe, 0xf1, 0x7d, 0xfb, 0x20, 0x87, 0x61, 0x23, 0x4e, 0xa3, 0xb0, 0x31, 0x6e, 0x5b,
	0xcc, 0xc4, 0x0a, 0xa6, 0xe8, 0xd8, 0x56, 0x8e, 0xc2, 0x28, 0x12, 0x27, 0x10, 0xa3, 0xbb, 0x0f,
	0xce, 0x54, 0x1a, 0x39, 0x66, 0x74, 0x0a, 0x33, 0xa5, 0x35, 0xb5, 0xd6, 0xef, 0x54, 0x65, 0xe4,
	0xbf, 0xce, 0x42, 0x08, 0x80, 0x8c, 0x2a, 0x85, 0x96, 0xd9, 0x84, 0xd9, 0x12, 0x26, 0xd4, 0xb2,
	0x9e, 0xb2, 0xfe, 0x0f, 0x51, 0xde, 0x96, 0x25, 0x93, 0x88, 0x49, 0xb0, 0xca, 0xd0, 0xd5, 0xa5,
	0xda, 0x33, 0x8c, 0x19, 0xce, 0x61, 0x5c, 0x84, 0xbf, 0x48, 0x60, 0x75, 0x0e, 0x8b, 0xba, 0x41,
	0xab, 0xb1, 0x56, 0xfd, 0xe5, 0xec, 0x80, 0xb5, 0xb2, 0x64, 0x43, 0xf0, 0x1e, 0xcf, 0x0f, 0x4f,
	0x3a, 0xf4, 0x66, 0x9b, 0xc9, 0xc5, 0x7a, 0x10, 0xf4, 0x05, 0x70, 0x2e, 0xb9, 0xec, 0xd4, 0x9f,
	0x9c, 0x67, 0x30, 0xef, 0x72, 0x86, 0xe3, 0xbb, 0xac, 0x42, 0x2b, 0x57, 0x61, 0x1e, 0xa5, 0xb7,
	0xb0, 0xd1, 0x54, 0x25, 0x9f, 0x98, 0x7b, 0x63, 0x13, 0x67, 0x9a, 0x0f, 0xd3, 0xf4, 0x75, 0x6b,
	0x2a, 0x93, 0x50, 0xa0, 0x0b, 0xcd, 0xa5, 0x97, 0xc7, 0xb5, 0x3f, 0xf7, 0xa3, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xe9, 0x61, 0x93, 0x66, 0xc3, 0x01, 0x00, 0x00,
}
