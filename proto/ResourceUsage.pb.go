// Code generated by protoc-gen-go.
// source: ResourceUsage.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Message reporting average resource utilization (divided in normal and spike bands) for a windows or web app
// The foreground windows or web app is polled one or more times during the reporting interval and the aggregated metrics are included in this message
type ResourceUsage struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Process Identifier or Web Application Identifier (matching the field defined in the Settings message)
	PID      *int32 `protobuf:"varint,3,opt,name=PID,def=0" json:"PID,omitempty"`
	WebAppID *int32 `protobuf:"varint,4,opt,name=WebAppID,def=0" json:"WebAppID,omitempty"`
	// How much time the process was active in milliseconds
	TimeActive *uint64 `protobuf:"varint,5,req,name=timeActive" json:"timeActive,omitempty"`
	// The fully qualified filename of the binary: i.e. 'c:\windows\system32\binary.exe' (Used only for Processes ... not for Web Apps)
	ImageFilepath *string `protobuf:"bytes,6,opt,name=imageFilepath" json:"imageFilepath,omitempty"`
	// User (using this app) Information
	AccountName *string `protobuf:"bytes,7,req,name=accountName" json:"accountName,omitempty"`
	DomainName  *string `protobuf:"bytes,8,req,name=domainName" json:"domainName,omitempty"`
	//
	// CPU Information: CPU-time (AVG and Spikes) of foreground process and background processes
	// See MSDN Win32 API GetProcessTimes, GetSystemTimes
	//
	// How CPU-time was consumed by the foreground process
	TotalProcessorTime *uint64 `protobuf:"varint,10,req,name=totalProcessorTime" json:"totalProcessorTime,omitempty"`
	// Total system available CPU time (includes IDLE) ... so for 2 processors is aproximately twice the actual elapsed time
	TotalSystemProcessorTime *uint64 `protobuf:"varint,11,req,name=totalSystemProcessorTime" json:"totalSystemProcessorTime,omitempty"`
	// How much time the CPU was idle
	TotalSystemIdleTime *uint64 `protobuf:"varint,12,req,name=totalSystemIdleTime" json:"totalSystemIdleTime,omitempty"`
	// Same 3 data-points for foreground-process and background CPU spikes
	// How much time was spent by the foreground process in the CPU during spikes ... We are referring here to spikes of CPU-usage of the foreground process
	TotalSpikeTimeForegroundProcess *uint64 `protobuf:"varint,13,req,name=totalSpikeTimeForegroundProcess" json:"totalSpikeTimeForegroundProcess,omitempty"`
	TotalSpikeProcessorTime         *uint64 `protobuf:"varint,14,req,name=totalSpikeProcessorTime" json:"totalSpikeProcessorTime,omitempty"`
	// How much CPU-time was consumed by background processes during spikes ... We are referring here to (interference) spikes of CPU-usage of background processes
	TotalSpikeTimeBackgroundProcesses *uint64 `protobuf:"varint,15,req,name=totalSpikeTimeBackgroundProcesses" json:"totalSpikeTimeBackgroundProcesses,omitempty"`
	TotalSpikeSystemProcessorTime     *uint64 `protobuf:"varint,16,req,name=totalSpikeSystemProcessorTime" json:"totalSpikeSystemProcessorTime,omitempty"`
	TotalSpikeSystemIdleTime          *uint64 `protobuf:"varint,17,req,name=totalSpikeSystemIdleTime" json:"totalSpikeSystemIdleTime,omitempty"`
	//
	// IO Information: IO-metrics for foreground process and background processes
	// Also see MSDN Win32 API GetProcessIoCounters
	//
	// Total IO Bytes read/written during <timeActive>
	ReadTransferCount        *uint64 `protobuf:"varint,20,req,name=readTransferCount" json:"readTransferCount,omitempty"`
	WriteTransferCount       *uint64 `protobuf:"varint,21,req,name=writeTransferCount" json:"writeTransferCount,omitempty"`
	SystemReadTransferCount  *uint64 `protobuf:"varint,22,req,name=systemReadTransferCount" json:"systemReadTransferCount,omitempty"`
	SystemWriteTransferCount *uint64 `protobuf:"varint,23,req,name=systemWriteTransferCount" json:"systemWriteTransferCount,omitempty"`
	// IO Bytes read/written during foreground process IO spikes
	SpikeIOTimeForegroundProcess *uint64 `protobuf:"varint,24,req,name=spikeIOTimeForegroundProcess" json:"spikeIOTimeForegroundProcess,omitempty"`
	SpikeReadTransferCount       *uint64 `protobuf:"varint,25,req,name=spikeReadTransferCount" json:"spikeReadTransferCount,omitempty"`
	SpikeWriteTransferCount      *uint64 `protobuf:"varint,26,req,name=spikeWriteTransferCount" json:"spikeWriteTransferCount,omitempty"`
	// IO Bytes read/written during background processes IO spikes
	SpikeIOTimeSystem             *uint64 `protobuf:"varint,27,req,name=spikeIOTimeSystem" json:"spikeIOTimeSystem,omitempty"`
	SpikeSystemReadTransferCount  *uint64 `protobuf:"varint,28,req,name=spikeSystemReadTransferCount" json:"spikeSystemReadTransferCount,omitempty"`
	SpikeSystemWriteTransferCount *uint64 `protobuf:"varint,29,req,name=spikeSystemWriteTransferCount" json:"spikeSystemWriteTransferCount,omitempty"`
	//
	// Network Information: Network-metrics for foreground process and background processes
	// Also see MSDN ETW Network Trace: http://msdn.microsoft.com/en-us/library/windows/desktop/aa364128(v=vs.85).aspx
	//
	// Network bytes sent/received during <timeActive>
	SentBytes             *uint32 `protobuf:"varint,35,req,name=sentBytes" json:"sentBytes,omitempty"`
	ReceivedBytes         *uint32 `protobuf:"varint,36,req,name=receivedBytes" json:"receivedBytes,omitempty"`
	SystemSentBytes       *uint32 `protobuf:"varint,37,req,name=systemSentBytes" json:"systemSentBytes,omitempty"`
	SystemReceivedBytes   *uint32 `protobuf:"varint,38,req,name=systemReceivedBytes" json:"systemReceivedBytes,omitempty"`
	SentBytesV2           *uint64 `protobuf:"varint,61,opt,name=sentBytes_v2" json:"sentBytes_v2,omitempty"`
	ReceivedBytesV2       *uint64 `protobuf:"varint,62,opt,name=receivedBytes_v2" json:"receivedBytes_v2,omitempty"`
	SystemSentBytesV2     *uint64 `protobuf:"varint,63,opt,name=systemSentBytes_v2" json:"systemSentBytes_v2,omitempty"`
	SystemReceivedBytesV2 *uint64 `protobuf:"varint,64,opt,name=systemReceivedBytes_v2" json:"systemReceivedBytes_v2,omitempty"`
	// Only for foreground process we also keep track of elapsed (really means the transactionTime). Time between 1st send and last receive.
	ElapsedTime *int64 `protobuf:"varint,39,req,name=elapsedTime" json:"elapsedTime,omitempty"`
	// Only for foreground process we also keep track of sum responsetime. Time between send and 1st receive after send.
	// The number of sends-receive used to compute the sum response-time metric
	NumberSampledResponseTimes *uint32 `protobuf:"varint,40,req,name=numberSampledResponseTimes" json:"numberSampledResponseTimes,omitempty"`
	// Sum of the time between the send and the first receive to that send
	SumResponseTime *uint64 `protobuf:"varint,41,req,name=sumResponseTime" json:"sumResponseTime,omitempty"`
	// Network Bytes sent/received during foreground process Network spikes
	SpikeSentBytes         *uint64 `protobuf:"varint,42,req,name=spikeSentBytes" json:"spikeSentBytes,omitempty"`
	SpikeReceivedBytes     *uint64 `protobuf:"varint,43,req,name=spikeReceivedBytes" json:"spikeReceivedBytes,omitempty"`
	SpikeNetworkTimeSystem *uint64 `protobuf:"varint,44,req,name=spikeNetworkTimeSystem" json:"spikeNetworkTimeSystem,omitempty"`
	// Network Bytes sent/received during background process Network spikes
	SpikeSystemSentBytes      *uint64 `protobuf:"varint,45,req,name=spikeSystemSentBytes" json:"spikeSystemSentBytes,omitempty"`
	SpikesSystemReceivedBytes *uint64 `protobuf:"varint,46,req,name=spikesSystemReceivedBytes" json:"spikesSystemReceivedBytes,omitempty"`
	//
	// Memory Information: Memory-metrics for foreground process and all-background processes
	// Also see MSDN Win32 API GetProcessMemoryInfo
	//
	NumTimesSpikeWorkingSetSampled       *uint32  `protobuf:"varint,50,req,name=numTimesSpikeWorkingSetSampled" json:"numTimesSpikeWorkingSetSampled,omitempty"`
	AvgSpikeWorkingSetSize               *float64 `protobuf:"fixed64,51,req,name=avgSpikeWorkingSetSize" json:"avgSpikeWorkingSetSize,omitempty"`
	NumTimesSpikeBackgroundMemorySampled *uint32  `protobuf:"varint,52,req,name=numTimesSpikeBackgroundMemorySampled" json:"numTimesSpikeBackgroundMemorySampled,omitempty"`
	AvgSpikePhysicalMemoryAvailable      *float64 `protobuf:"fixed64,53,req,name=avgSpikePhysicalMemoryAvailable" json:"avgSpikePhysicalMemoryAvailable,omitempty"`
	SpikeNetworkTimeForegroundProcess    *uint64  `protobuf:"varint,54,req,name=spikeNetworkTimeForegroundProcess" json:"spikeNetworkTimeForegroundProcess,omitempty"`
	// The number of times foreground process working set size or system memory usage was polled
	NumTimesMemorySampled *uint32 `protobuf:"varint,55,req,name=numTimesMemorySampled" json:"numTimesMemorySampled,omitempty"`
	// AVG working set information ... this is for the foreground process
	AvgWorkingSetSize *float64 `protobuf:"fixed64,56,req,name=avgWorkingSetSize" json:"avgWorkingSetSize,omitempty"`
	// System physical memory information ... this is sampled N=numTimesMemorySampled times as well
	AvgPhysicalMemoryAvailable *float64 `protobuf:"fixed64,57,req,name=avgPhysicalMemoryAvailable" json:"avgPhysicalMemoryAvailable,omitempty"`
	AvgPhysicalMemoryTotal     *float64 `protobuf:"fixed64,58,req,name=avgPhysicalMemoryTotal" json:"avgPhysicalMemoryTotal,omitempty"`
	// MD5 for imageFilepath
	ImageFileMD5 *string `protobuf:"bytes,59,opt,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	SiteId       *string `protobuf:"bytes,60,opt,name=siteId" json:"siteId,omitempty"`
	// Indexes 61-64 used above for replacement entries to use UINT64 values instead of UINT32 because of overflow
	Uuid             *string `protobuf:"bytes,65,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResourceUsage) Reset()                    { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string            { return proto1.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()               {}
func (*ResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor76, []int{0} }

const Default_ResourceUsage_PID int32 = 0
const Default_ResourceUsage_WebAppID int32 = 0

func (m *ResourceUsage) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *ResourceUsage) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *ResourceUsage) GetPID() int32 {
	if m != nil && m.PID != nil {
		return *m.PID
	}
	return Default_ResourceUsage_PID
}

func (m *ResourceUsage) GetWebAppID() int32 {
	if m != nil && m.WebAppID != nil {
		return *m.WebAppID
	}
	return Default_ResourceUsage_WebAppID
}

func (m *ResourceUsage) GetTimeActive() uint64 {
	if m != nil && m.TimeActive != nil {
		return *m.TimeActive
	}
	return 0
}

func (m *ResourceUsage) GetImageFilepath() string {
	if m != nil && m.ImageFilepath != nil {
		return *m.ImageFilepath
	}
	return ""
}

func (m *ResourceUsage) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *ResourceUsage) GetDomainName() string {
	if m != nil && m.DomainName != nil {
		return *m.DomainName
	}
	return ""
}

func (m *ResourceUsage) GetTotalProcessorTime() uint64 {
	if m != nil && m.TotalProcessorTime != nil {
		return *m.TotalProcessorTime
	}
	return 0
}

func (m *ResourceUsage) GetTotalSystemProcessorTime() uint64 {
	if m != nil && m.TotalSystemProcessorTime != nil {
		return *m.TotalSystemProcessorTime
	}
	return 0
}

func (m *ResourceUsage) GetTotalSystemIdleTime() uint64 {
	if m != nil && m.TotalSystemIdleTime != nil {
		return *m.TotalSystemIdleTime
	}
	return 0
}

func (m *ResourceUsage) GetTotalSpikeTimeForegroundProcess() uint64 {
	if m != nil && m.TotalSpikeTimeForegroundProcess != nil {
		return *m.TotalSpikeTimeForegroundProcess
	}
	return 0
}

func (m *ResourceUsage) GetTotalSpikeProcessorTime() uint64 {
	if m != nil && m.TotalSpikeProcessorTime != nil {
		return *m.TotalSpikeProcessorTime
	}
	return 0
}

func (m *ResourceUsage) GetTotalSpikeTimeBackgroundProcesses() uint64 {
	if m != nil && m.TotalSpikeTimeBackgroundProcesses != nil {
		return *m.TotalSpikeTimeBackgroundProcesses
	}
	return 0
}

func (m *ResourceUsage) GetTotalSpikeSystemProcessorTime() uint64 {
	if m != nil && m.TotalSpikeSystemProcessorTime != nil {
		return *m.TotalSpikeSystemProcessorTime
	}
	return 0
}

func (m *ResourceUsage) GetTotalSpikeSystemIdleTime() uint64 {
	if m != nil && m.TotalSpikeSystemIdleTime != nil {
		return *m.TotalSpikeSystemIdleTime
	}
	return 0
}

func (m *ResourceUsage) GetReadTransferCount() uint64 {
	if m != nil && m.ReadTransferCount != nil {
		return *m.ReadTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetWriteTransferCount() uint64 {
	if m != nil && m.WriteTransferCount != nil {
		return *m.WriteTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSystemReadTransferCount() uint64 {
	if m != nil && m.SystemReadTransferCount != nil {
		return *m.SystemReadTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSystemWriteTransferCount() uint64 {
	if m != nil && m.SystemWriteTransferCount != nil {
		return *m.SystemWriteTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSpikeIOTimeForegroundProcess() uint64 {
	if m != nil && m.SpikeIOTimeForegroundProcess != nil {
		return *m.SpikeIOTimeForegroundProcess
	}
	return 0
}

func (m *ResourceUsage) GetSpikeReadTransferCount() uint64 {
	if m != nil && m.SpikeReadTransferCount != nil {
		return *m.SpikeReadTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSpikeWriteTransferCount() uint64 {
	if m != nil && m.SpikeWriteTransferCount != nil {
		return *m.SpikeWriteTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSpikeIOTimeSystem() uint64 {
	if m != nil && m.SpikeIOTimeSystem != nil {
		return *m.SpikeIOTimeSystem
	}
	return 0
}

func (m *ResourceUsage) GetSpikeSystemReadTransferCount() uint64 {
	if m != nil && m.SpikeSystemReadTransferCount != nil {
		return *m.SpikeSystemReadTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSpikeSystemWriteTransferCount() uint64 {
	if m != nil && m.SpikeSystemWriteTransferCount != nil {
		return *m.SpikeSystemWriteTransferCount
	}
	return 0
}

func (m *ResourceUsage) GetSentBytes() uint32 {
	if m != nil && m.SentBytes != nil {
		return *m.SentBytes
	}
	return 0
}

func (m *ResourceUsage) GetReceivedBytes() uint32 {
	if m != nil && m.ReceivedBytes != nil {
		return *m.ReceivedBytes
	}
	return 0
}

func (m *ResourceUsage) GetSystemSentBytes() uint32 {
	if m != nil && m.SystemSentBytes != nil {
		return *m.SystemSentBytes
	}
	return 0
}

func (m *ResourceUsage) GetSystemReceivedBytes() uint32 {
	if m != nil && m.SystemReceivedBytes != nil {
		return *m.SystemReceivedBytes
	}
	return 0
}

func (m *ResourceUsage) GetSentBytesV2() uint64 {
	if m != nil && m.SentBytesV2 != nil {
		return *m.SentBytesV2
	}
	return 0
}

func (m *ResourceUsage) GetReceivedBytesV2() uint64 {
	if m != nil && m.ReceivedBytesV2 != nil {
		return *m.ReceivedBytesV2
	}
	return 0
}

func (m *ResourceUsage) GetSystemSentBytesV2() uint64 {
	if m != nil && m.SystemSentBytesV2 != nil {
		return *m.SystemSentBytesV2
	}
	return 0
}

func (m *ResourceUsage) GetSystemReceivedBytesV2() uint64 {
	if m != nil && m.SystemReceivedBytesV2 != nil {
		return *m.SystemReceivedBytesV2
	}
	return 0
}

func (m *ResourceUsage) GetElapsedTime() int64 {
	if m != nil && m.ElapsedTime != nil {
		return *m.ElapsedTime
	}
	return 0
}

func (m *ResourceUsage) GetNumberSampledResponseTimes() uint32 {
	if m != nil && m.NumberSampledResponseTimes != nil {
		return *m.NumberSampledResponseTimes
	}
	return 0
}

func (m *ResourceUsage) GetSumResponseTime() uint64 {
	if m != nil && m.SumResponseTime != nil {
		return *m.SumResponseTime
	}
	return 0
}

func (m *ResourceUsage) GetSpikeSentBytes() uint64 {
	if m != nil && m.SpikeSentBytes != nil {
		return *m.SpikeSentBytes
	}
	return 0
}

func (m *ResourceUsage) GetSpikeReceivedBytes() uint64 {
	if m != nil && m.SpikeReceivedBytes != nil {
		return *m.SpikeReceivedBytes
	}
	return 0
}

func (m *ResourceUsage) GetSpikeNetworkTimeSystem() uint64 {
	if m != nil && m.SpikeNetworkTimeSystem != nil {
		return *m.SpikeNetworkTimeSystem
	}
	return 0
}

func (m *ResourceUsage) GetSpikeSystemSentBytes() uint64 {
	if m != nil && m.SpikeSystemSentBytes != nil {
		return *m.SpikeSystemSentBytes
	}
	return 0
}

func (m *ResourceUsage) GetSpikesSystemReceivedBytes() uint64 {
	if m != nil && m.SpikesSystemReceivedBytes != nil {
		return *m.SpikesSystemReceivedBytes
	}
	return 0
}

func (m *ResourceUsage) GetNumTimesSpikeWorkingSetSampled() uint32 {
	if m != nil && m.NumTimesSpikeWorkingSetSampled != nil {
		return *m.NumTimesSpikeWorkingSetSampled
	}
	return 0
}

func (m *ResourceUsage) GetAvgSpikeWorkingSetSize() float64 {
	if m != nil && m.AvgSpikeWorkingSetSize != nil {
		return *m.AvgSpikeWorkingSetSize
	}
	return 0
}

func (m *ResourceUsage) GetNumTimesSpikeBackgroundMemorySampled() uint32 {
	if m != nil && m.NumTimesSpikeBackgroundMemorySampled != nil {
		return *m.NumTimesSpikeBackgroundMemorySampled
	}
	return 0
}

func (m *ResourceUsage) GetAvgSpikePhysicalMemoryAvailable() float64 {
	if m != nil && m.AvgSpikePhysicalMemoryAvailable != nil {
		return *m.AvgSpikePhysicalMemoryAvailable
	}
	return 0
}

func (m *ResourceUsage) GetSpikeNetworkTimeForegroundProcess() uint64 {
	if m != nil && m.SpikeNetworkTimeForegroundProcess != nil {
		return *m.SpikeNetworkTimeForegroundProcess
	}
	return 0
}

func (m *ResourceUsage) GetNumTimesMemorySampled() uint32 {
	if m != nil && m.NumTimesMemorySampled != nil {
		return *m.NumTimesMemorySampled
	}
	return 0
}

func (m *ResourceUsage) GetAvgWorkingSetSize() float64 {
	if m != nil && m.AvgWorkingSetSize != nil {
		return *m.AvgWorkingSetSize
	}
	return 0
}

func (m *ResourceUsage) GetAvgPhysicalMemoryAvailable() float64 {
	if m != nil && m.AvgPhysicalMemoryAvailable != nil {
		return *m.AvgPhysicalMemoryAvailable
	}
	return 0
}

func (m *ResourceUsage) GetAvgPhysicalMemoryTotal() float64 {
	if m != nil && m.AvgPhysicalMemoryTotal != nil {
		return *m.AvgPhysicalMemoryTotal
	}
	return 0
}

func (m *ResourceUsage) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *ResourceUsage) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *ResourceUsage) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*ResourceUsage)(nil), "ResourceUsage")
}

var fileDescriptor76 = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x55, 0x5b, 0x53, 0x32, 0x47,
	0x10, 0x2d, 0x14, 0x8d, 0xb4, 0x82, 0xba, 0x22, 0x8e, 0x78, 0x43, 0xe3, 0x35, 0x31, 0x54, 0xca,
	0xc4, 0x5c, 0xcc, 0x15, 0x62, 0x99, 0xe2, 0x41, 0x43, 0x09, 0x96, 0x8f, 0xa9, 0x75, 0x77, 0xc4,
	0x2d, 0xf7, 0x56, 0x33, 0x03, 0x16, 0x3e, 0xe6, 0x3f, 0xe5, 0x0f, 0x7d, 0xbf, 0xe4, 0xeb, 0xe9,
	0x65, 0x61, 0x17, 0xf0, 0x71, 0xfb, 0x9c, 0x3d, 0xa7, 0xbb, 0xa7, 0x7b, 0x06, 0xd6, 0xee, 0xb9,
	0x0c, 0xba, 0xc2, 0xe2, 0x0f, 0xd2, 0xec, 0xf0, 0x6a, 0x28, 0x02, 0x15, 0x94, 0x8d, 0x66, 0x20,
	0x55, 0x47, 0x70, 0xd9, 0xee, 0x87, 0x83, 0xd8, 0xc1, 0xa7, 0x25, 0xc8, 0xa7, 0xb8, 0x46, 0x05,
	0x72, 0xca, 0xf1, 0x78, 0x4b, 0x99, 0x5e, 0xc8, 0x32, 0x95, 0x99, 0xd3, 0xd9, 0x7a, 0xfe, 0xbf,
	0xff, 0x19, 0x05, 0xa5, 0x0e, 0x1a, 0x5b, 0x90, 0x43, 0xa2, 0xaf, 0xfe, 0x7e, 0x68, 0x5c, 0xb3,
	0x19, 0x64, 0xe4, 0xea, 0x0b, 0xc8, 0xc8, 0x76, 0xbb, 0x8e, 0x6d, 0x14, 0x60, 0xb6, 0x89, 0xe1,
	0xd9, 0x4a, 0xe6, 0x74, 0xee, 0x2a, 0xf3, 0xad, 0xb1, 0x06, 0x0b, 0x8f, 0xfc, 0xa9, 0x16, 0x86,
	0x18, 0xcc, 0xc6, 0x41, 0x03, 0x40, 0xcb, 0xd5, 0x2c, 0xe5, 0xf4, 0x38, 0x9b, 0x43, 0x89, 0xac,
	0xb1, 0x0e, 0x79, 0xc7, 0x43, 0xdd, 0x1b, 0xc7, 0xe5, 0xa1, 0xa9, 0x5e, 0xd8, 0x3c, 0xb2, 0x73,
	0xf8, 0xff, 0xa2, 0x69, 0x59, 0x41, 0xd7, 0x57, 0x77, 0xa6, 0xc7, 0xd9, 0x17, 0xda, 0x4e, 0xff,
	0x6f, 0x07, 0x9e, 0xe9, 0xf8, 0x14, 0x5b, 0xa0, 0x58, 0x19, 0x0c, 0x15, 0x28, 0xd3, 0x6d, 0x8a,
	0xc0, 0xe2, 0x52, 0x06, 0xa2, 0x8d, 0x0e, 0x0c, 0x48, 0xbb, 0x02, 0x8c, 0xb0, 0x56, 0x5f, 0x2a,
	0xee, 0xa5, 0x19, 0x8b, 0xc4, 0xd8, 0x82, 0xb5, 0x04, 0xa3, 0x61, 0xbb, 0x9c, 0xc0, 0x25, 0x02,
	0x4f, 0x60, 0x2f, 0x02, 0x43, 0xe7, 0x95, 0xe2, 0x37, 0x81, 0xe0, 0x1d, 0x81, 0x49, 0xd9, 0x03,
	0x2d, 0x96, 0x27, 0xe2, 0x1e, 0x6c, 0x8c, 0x88, 0x69, 0x9b, 0x02, 0x11, 0xce, 0x60, 0x3f, 0xad,
	0x54, 0x37, 0xad, 0xd7, 0x94, 0x12, 0x97, 0x6c, 0x99, 0xa8, 0x47, 0xb0, 0x33, 0xa2, 0x4e, 0x4b,
	0x7c, 0x25, 0x5d, 0xda, 0x88, 0x36, 0xcc, 0x7e, 0x95, 0x18, 0x9b, 0xb0, 0x2a, 0xb8, 0x69, 0xb7,
	0x85, 0xe9, 0xcb, 0x67, 0x2e, 0xfe, 0xd2, 0xbd, 0x64, 0x45, 0x82, 0xb0, 0x67, 0x6f, 0xc2, 0x51,
	0x3c, 0x8d, 0xad, 0xc7, 0xb5, 0x48, 0x92, 0xbb, 0x9f, 0xf8, 0xb9, 0x14, 0x3b, 0x47, 0x84, 0xc7,
	0x49, 0x89, 0x0d, 0x62, 0x1c, 0xc2, 0xb6, 0xd4, 0x69, 0x35, 0xfe, 0x99, 0xde, 0x34, 0x46, 0xac,
	0x5d, 0x28, 0x11, 0x6b, 0xd2, 0x67, 0x73, 0x98, 0x88, 0xc6, 0xa7, 0xd8, 0x94, 0xe3, 0x02, 0x13,
	0x36, 0x51, 0x0f, 0xd8, 0x56, 0x2a, 0x83, 0xd6, 0x07, 0x95, 0x6c, 0xc7, 0xad, 0x4e, 0xb0, 0xa6,
	0xf8, 0xec, 0x10, 0x6d, 0x15, 0x72, 0x12, 0xc7, 0xbe, 0xde, 0x57, 0x78, 0x48, 0x5f, 0x62, 0x28,
	0xaf, 0x87, 0x56, 0x70, 0x8b, 0xe3, 0x14, 0xdb, 0x51, 0xf8, 0x90, 0xc2, 0x1b, 0xb0, 0x1c, 0xb5,
	0xa6, 0x35, 0xe4, 0x1f, 0x11, 0x80, 0x63, 0x16, 0x37, 0x35, 0xf9, 0xd7, 0x31, 0x81, 0x45, 0x58,
	0x1a, 0xea, 0xff, 0xdb, 0xbb, 0x60, 0xbf, 0xe1, 0x02, 0x64, 0x0d, 0x06, 0x2b, 0x29, 0x0b, 0x8d,
	0xfc, 0x4e, 0x08, 0x9e, 0xde, 0x98, 0x8b, 0xc6, 0xfe, 0x20, 0x4c, 0x37, 0x75, 0xd2, 0x48, 0xe3,
	0x7f, 0x12, 0x8e, 0x6b, 0xc5, 0x5d, 0x33, 0x94, 0xdc, 0xa6, 0x49, 0x39, 0xd1, 0x7b, 0x6e, 0x1c,
	0x40, 0xd9, 0xef, 0x7a, 0x4f, 0x5c, 0xb4, 0x70, 0xcd, 0x5d, 0x6e, 0xe3, 0xc5, 0x10, 0x06, 0xbe,
	0xa4, 0x61, 0x92, 0xec, 0x74, 0x58, 0x5a, 0xd7, 0x4b, 0x22, 0xec, 0x8c, 0xba, 0x53, 0x82, 0x42,
	0xd4, 0xc4, 0x61, 0xc9, 0x5f, 0xc5, 0x33, 0x36, 0x38, 0xde, 0x64, 0xc5, 0x5f, 0xa7, 0x8e, 0xfe,
	0x8e, 0xab, 0xb7, 0x40, 0xbc, 0x26, 0x8e, 0xef, 0x9c, 0xf0, 0x6d, 0x28, 0x26, 0x0e, 0x66, 0xa4,
	0xfc, 0x0d, 0xa1, 0xfb, 0xb0, 0x49, 0xa8, 0x6c, 0x4d, 0x69, 0x69, 0x95, 0x28, 0xc7, 0xb0, 0x8b,
	0x15, 0x51, 0xfe, 0xb4, 0x20, 0x8f, 0xe8, 0xe2, 0xf8, 0x9d, 0x16, 0x57, 0x83, 0x12, 0xd9, 0x05,
	0x55, 0x85, 0x89, 0x98, 0xbd, 0xce, 0x38, 0xc5, 0x79, 0xe7, 0xec, 0x3b, 0xc4, 0x33, 0xc6, 0x39,
	0x1c, 0xa6, 0x74, 0x46, 0x6b, 0x7b, 0xcb, 0xbd, 0x40, 0xf4, 0x63, 0xb5, 0xef, 0x49, 0x0d, 0xef,
	0x8b, 0x58, 0xad, 0xf9, 0xd2, 0x97, 0x8e, 0x65, 0xba, 0x11, 0xad, 0xd6, 0x33, 0x1d, 0xd7, 0x7c,
	0x72, 0x39, 0xbb, 0x24, 0x59, 0xbc, 0x0e, 0xc6, 0xeb, 0x9f, 0xdc, 0x92, 0x1f, 0xa8, 0x92, 0x1d,
	0x58, 0x8f, 0x33, 0x48, 0x5b, 0xfe, 0x48, 0x96, 0xb8, 0x03, 0x68, 0x39, 0x96, 0xfb, 0x4f, 0x64,
	0x82, 0xa7, 0x8a, 0xd0, 0x47, 0x89, 0xfc, 0x4c, 0x9c, 0xa8, 0xfe, 0x34, 0xa7, 0xad, 0xaf, 0x15,
	0x76, 0x45, 0x38, 0x8e, 0xe6, 0xf0, 0x72, 0xbe, 0xbd, 0xbe, 0x64, 0xbf, 0xd0, 0xdd, 0x5c, 0x80,
	0x79, 0x89, 0xbb, 0xd2, 0xb0, 0xd9, 0xaf, 0xf4, 0x5d, 0x02, 0x7a, 0x03, 0x58, 0x4d, 0x7f, 0x8d,
	0xde, 0x84, 0xfa, 0x15, 0x1c, 0x58, 0x81, 0x57, 0x7d, 0x77, 0x9e, 0x15, 0xf7, 0xab, 0x92, 0x8b,
	0x1e, 0x17, 0xd1, 0xfb, 0x63, 0x05, 0x6e, 0x15, 0x2b, 0xd2, 0x0f, 0x4f, 0xbd, 0x98, 0x7a, 0x87,
	0x6e, 0xa3, 0xe8, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xc3, 0x8d, 0x77, 0xca, 0x06, 0x00,
	0x00,
}
