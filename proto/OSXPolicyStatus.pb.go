// Code generated by protoc-gen-go.
// source: OSXPolicyStatus.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ID/Key from policy
type OSXPolicyStatus_PolicyStatusMessageType int32

const (
	OSXPolicyStatus_UNUSED_POLICY_STATUS  OSXPolicyStatus_PolicyStatusMessageType = 0
	OSXPolicyStatus_EXE_TRACKING_STARTED  OSXPolicyStatus_PolicyStatusMessageType = 1
	OSXPolicyStatus_EXE_TRACKING_STOPPED  OSXPolicyStatus_PolicyStatusMessageType = 2
	OSXPolicyStatus_EXE_IN_COMPLIANCE     OSXPolicyStatus_PolicyStatusMessageType = 3
	OSXPolicyStatus_EXE_OUT_OF_COMPLIANCE OSXPolicyStatus_PolicyStatusMessageType = 4
	OSXPolicyStatus_EXE_IS_RUNNING        OSXPolicyStatus_PolicyStatusMessageType = 5
	OSXPolicyStatus_EXE_ISNOT_RUNNING     OSXPolicyStatus_PolicyStatusMessageType = 6
)

var OSXPolicyStatus_PolicyStatusMessageType_name = map[int32]string{
	0: "UNUSED_POLICY_STATUS",
	1: "EXE_TRACKING_STARTED",
	2: "EXE_TRACKING_STOPPED",
	3: "EXE_IN_COMPLIANCE",
	4: "EXE_OUT_OF_COMPLIANCE",
	5: "EXE_IS_RUNNING",
	6: "EXE_ISNOT_RUNNING",
}
var OSXPolicyStatus_PolicyStatusMessageType_value = map[string]int32{
	"UNUSED_POLICY_STATUS":  0,
	"EXE_TRACKING_STARTED":  1,
	"EXE_TRACKING_STOPPED":  2,
	"EXE_IN_COMPLIANCE":     3,
	"EXE_OUT_OF_COMPLIANCE": 4,
	"EXE_IS_RUNNING":        5,
	"EXE_ISNOT_RUNNING":     6,
}

func (x OSXPolicyStatus_PolicyStatusMessageType) Enum() *OSXPolicyStatus_PolicyStatusMessageType {
	p := new(OSXPolicyStatus_PolicyStatusMessageType)
	*p = x
	return p
}
func (x OSXPolicyStatus_PolicyStatusMessageType) String() string {
	return proto1.EnumName(OSXPolicyStatus_PolicyStatusMessageType_name, int32(x))
}
func (x *OSXPolicyStatus_PolicyStatusMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(OSXPolicyStatus_PolicyStatusMessageType_value, data, "OSXPolicyStatus_PolicyStatusMessageType")
	if err != nil {
		return err
	}
	*x = OSXPolicyStatus_PolicyStatusMessageType(value)
	return nil
}
func (OSXPolicyStatus_PolicyStatusMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor50, []int{0, 0}
}

type OSXPolicyStatus struct {
	// The UTC time (as known to the server) when the Policy status was generated
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// The unique identifier of the policy set this message is being sent in regards to
	PoliciesIdentifier *int64 `protobuf:"varint,3,req,name=policiesIdentifier" json:"policiesIdentifier,omitempty"`
	// Unique value to send as part of the compliance message to know which policy we are reporting on to the server
	PolicyID     *uint64                                  `protobuf:"varint,4,req,name=policyID" json:"policyID,omitempty"`
	PolicyStatus *OSXPolicyStatus_PolicyStatusMessageType `protobuf:"varint,5,opt,name=policyStatus,enum=OSXPolicyStatus_PolicyStatusMessageType,def=0" json:"policyStatus,omitempty"`
	// Filename for this message
	Filename *string `protobuf:"bytes,6,opt,name=filename" json:"filename,omitempty"`
	// optional full image path of filename (only for EXE_IN_COMPLIANCE)
	Imagefilepath *string `protobuf:"bytes,7,opt,name=imagefilepath" json:"imagefilepath,omitempty"`
	// optional MD5 of the file (only for EXE_IN_COMPLIANCE and filled out in process inventory)
	ImageFileMD5 *string `protobuf:"bytes,8,opt,name=imageFileMD5" json:"imageFileMD5,omitempty"`
	// Key/ID from Policy for server use
	DataID *uint64 `protobuf:"varint,9,opt,name=dataID" json:"dataID,omitempty"`
	SiteId *string `protobuf:"bytes,10,opt,name=siteId" json:"siteId,omitempty"`
	Uuid   *string `protobuf:"bytes,11,opt,name=uuid" json:"uuid,omitempty"`
	// This is the method specified in the rule we are reporting on.  You can use this to
	// know if you are dealing with a forbidden process running or a required process
	// not running
	Method           *string `protobuf:"bytes,12,opt,name=method" json:"method,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OSXPolicyStatus) Reset()                    { *m = OSXPolicyStatus{} }
func (m *OSXPolicyStatus) String() string            { return proto1.CompactTextString(m) }
func (*OSXPolicyStatus) ProtoMessage()               {}
func (*OSXPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptor50, []int{0} }

const Default_OSXPolicyStatus_PolicyStatus OSXPolicyStatus_PolicyStatusMessageType = OSXPolicyStatus_UNUSED_POLICY_STATUS

func (m *OSXPolicyStatus) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *OSXPolicyStatus) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *OSXPolicyStatus) GetPoliciesIdentifier() int64 {
	if m != nil && m.PoliciesIdentifier != nil {
		return *m.PoliciesIdentifier
	}
	return 0
}

func (m *OSXPolicyStatus) GetPolicyID() uint64 {
	if m != nil && m.PolicyID != nil {
		return *m.PolicyID
	}
	return 0
}

func (m *OSXPolicyStatus) GetPolicyStatus() OSXPolicyStatus_PolicyStatusMessageType {
	if m != nil && m.PolicyStatus != nil {
		return *m.PolicyStatus
	}
	return Default_OSXPolicyStatus_PolicyStatus
}

func (m *OSXPolicyStatus) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *OSXPolicyStatus) GetImagefilepath() string {
	if m != nil && m.Imagefilepath != nil {
		return *m.Imagefilepath
	}
	return ""
}

func (m *OSXPolicyStatus) GetImageFileMD5() string {
	if m != nil && m.ImageFileMD5 != nil {
		return *m.ImageFileMD5
	}
	return ""
}

func (m *OSXPolicyStatus) GetDataID() uint64 {
	if m != nil && m.DataID != nil {
		return *m.DataID
	}
	return 0
}

func (m *OSXPolicyStatus) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *OSXPolicyStatus) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *OSXPolicyStatus) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func init() {
	proto1.RegisterType((*OSXPolicyStatus)(nil), "OSXPolicyStatus")
	proto1.RegisterEnum("OSXPolicyStatus_PolicyStatusMessageType", OSXPolicyStatus_PolicyStatusMessageType_name, OSXPolicyStatus_PolicyStatusMessageType_value)
}

var fileDescriptor50 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x6e, 0xda, 0x40,
	0x14, 0x85, 0x0b, 0x38, 0x14, 0xdf, 0x12, 0xea, 0x8e, 0x42, 0x3a, 0x4d, 0x37, 0x88, 0x15, 0x2b,
	0x2f, 0x2a, 0x75, 0x53, 0x75, 0xc3, 0x8f, 0x13, 0x59, 0x0d, 0xb6, 0x85, 0xc7, 0x52, 0xba, 0xb2,
	0x2c, 0x3c, 0x24, 0x23, 0x61, 0x6c, 0x79, 0x86, 0x4a, 0x74, 0xd9, 0x47, 0xe9, 0x3b, 0xf4, 0x0d,
	0xfa, 0x60, 0xbd, 0x33, 0x54, 0x91, 0x85, 0xc8, 0xf2, 0x7e, 0xe7, 0xcc, 0xb9, 0xf7, 0xc8, 0x86,
	0x61, 0x18, 0x3f, 0x44, 0xe5, 0x56, 0xac, 0x0f, 0xb1, 0xca, 0xd4, 0x5e, 0xba, 0x55, 0x5d, 0xaa,
	0xf2, 0x86, 0x44, 0xa5, 0x54, 0x8f, 0x35, 0x97, 0xec, 0x50, 0xf1, 0x23, 0x1b, 0xff, 0xb6, 0xe0,
	0xed, 0x89, 0x9b, 0x8c, 0xc0, 0x56, 0xa2, 0xe0, 0x38, 0x15, 0x15, 0x6d, 0x8d, 0xda, 0x93, 0xce,
	0xec, 0xf2, 0xd7, 0x1f, 0x6a, 0xa0, 0xd4, 0x90, 0x7c, 0x04, 0x3b, 0x7b, 0xe4, 0x3b, 0x75, 0x97,
	0xf8, 0x0b, 0xda, 0x46, 0x87, 0x3d, 0xeb, 0xa1, 0xc3, 0xda, 0xef, 0x45, 0x4e, 0x6e, 0x80, 0x54,
	0x3a, 0x4e, 0x70, 0xe9, 0xe7, 0x68, 0x12, 0x1b, 0xc1, 0x6b, 0xda, 0xd1, 0x39, 0xc4, 0x81, 0x9e,
	0xd1, 0x0e, 0xf8, 0xce, 0x42, 0x62, 0x11, 0x06, 0xfd, 0xaa, 0xb1, 0x9c, 0x5e, 0x8c, 0x5a, 0x93,
	0xc1, 0xa7, 0x89, 0x7b, 0x5a, 0xa1, 0x39, 0x2c, 0xb9, 0x94, 0xb8, 0x5f, 0xd7, 0xf8, 0x72, 0x95,
	0x04, 0x49, 0xec, 0x2d, 0xd2, 0x28, 0xbc, 0xf7, 0xe7, 0xdf, 0xd3, 0x98, 0x4d, 0x59, 0x12, 0xeb,
	0x3d, 0x1b, 0xb1, 0xe5, 0xbb, 0xac, 0xe0, 0xb4, 0x8b, 0x89, 0x36, 0x19, 0xc2, 0xa5, 0x28, 0xf0,
	0x91, 0xc6, 0x55, 0xa6, 0x9e, 0xe8, 0x6b, 0x83, 0xaf, 0xa0, 0x6f, 0xf0, 0x2d, 0xe2, 0xe5, 0xe2,
	0x33, 0xed, 0x19, 0x3a, 0x80, 0x6e, 0x9e, 0xa9, 0x0c, 0x8f, 0xb4, 0x71, 0xb6, 0xf4, 0x2c, 0x85,
	0xe2, 0x7e, 0x4e, 0xc1, 0xe8, 0xd7, 0x60, 0xaa, 0xd2, 0x37, 0x7a, 0x6a, 0x54, 0x47, 0x5f, 0xc1,
	0xd5, 0x53, 0x99, 0xd3, 0xbe, 0x56, 0xc6, 0x7f, 0x5b, 0xf0, 0xfe, 0x85, 0xc3, 0x09, 0x85, 0xb3,
	0xa7, 0x3b, 0xaf, 0xb4, 0xe2, 0x3d, 0x78, 0x29, 0x5b, 0x4d, 0xe7, 0xdf, 0xfc, 0xe0, 0x4e, 0x0b,
	0x2b, 0xe6, 0x2d, 0x9c, 0xd6, 0x19, 0x25, 0x8c, 0x22, 0x54, 0xda, 0x58, 0xef, 0x9d, 0x56, 0xfc,
	0x20, 0x9d, 0x87, 0xcb, 0xe8, 0xde, 0x9f, 0x06, 0x73, 0xcf, 0xe9, 0x90, 0x0f, 0x30, 0xd4, 0x38,
	0x4c, 0x58, 0x1a, 0xde, 0x36, 0x25, 0x8b, 0x10, 0x18, 0x98, 0x17, 0x71, 0xba, 0x4a, 0x82, 0x00,
	0xd3, 0x9c, 0x8b, 0xe7, 0x94, 0x38, 0x08, 0xd9, 0x33, 0xee, 0xce, 0xbe, 0xc2, 0x78, 0x5d, 0x16,
	0xee, 0x4f, 0xb1, 0x51, 0x7c, 0xe7, 0x4a, 0x5e, 0xff, 0xe0, 0xf5, 0xf1, 0xff, 0x59, 0x97, 0x5b,
	0xb7, 0x38, 0x96, 0x9a, 0x5d, 0x9f, 0x7c, 0xb2, 0xff, 0x65, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x12, 0x51, 0xf0, 0x3e, 0x8e, 0x02, 0x00, 0x00,
}
