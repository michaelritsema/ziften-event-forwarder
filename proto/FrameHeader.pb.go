// Code generated by protoc-gen-go.
// source: FrameHeader.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FrameHeader struct {
	Length           *int32  `protobuf:"varint,1,req,name=length" json:"length,omitempty"`
	Version          *int32  `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	Type             *string `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	Hmac             []byte  `protobuf:"bytes,4,req,name=hmac" json:"hmac,omitempty"`
	TimeStamp        *int64  `protobuf:"varint,5,req,name=timeStamp" json:"timeStamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FrameHeader) Reset()                    { *m = FrameHeader{} }
func (m *FrameHeader) String() string            { return proto1.CompactTextString(m) }
func (*FrameHeader) ProtoMessage()               {}
func (*FrameHeader) Descriptor() ([]byte, []int) { return fileDescriptor26, []int{0} }

func (m *FrameHeader) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *FrameHeader) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *FrameHeader) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *FrameHeader) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *FrameHeader) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func init() {
	proto1.RegisterType((*FrameHeader)(nil), "FrameHeader")
}

var fileDescriptor26 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x74, 0x2b, 0x4a, 0xcc,
	0x4d, 0xf5, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x12, 0x0a,
	0xc8, 0x2f, 0x2e, 0x49, 0x2f, 0x4a, 0x2d, 0x0e, 0xa9, 0x2c, 0x48, 0x85, 0x88, 0x29, 0xe5, 0x70,
	0x71, 0x23, 0x29, 0x14, 0xe2, 0xe3, 0x62, 0xcb, 0x49, 0xcd, 0x4b, 0x2f, 0xc9, 0x90, 0x60, 0x54,
	0x60, 0xd2, 0x60, 0x15, 0xe2, 0xe7, 0x62, 0x2f, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x93, 0x60,
	0x02, 0x0b, 0xf0, 0x70, 0xb1, 0x94, 0x00, 0x75, 0x4b, 0x30, 0x03, 0x79, 0x9c, 0x20, 0x5e, 0x46,
	0x6e, 0x62, 0xb2, 0x04, 0x0b, 0x90, 0xc7, 0x23, 0xa4, 0xc0, 0xc5, 0x59, 0x92, 0x99, 0x9b, 0x1a,
	0x5c, 0x92, 0x98, 0x5b, 0x20, 0xc1, 0x0a, 0x14, 0x62, 0x76, 0xe2, 0x6d, 0xda, 0x2a, 0x01, 0x16,
	0x2c, 0x06, 0x09, 0x3a, 0x59, 0x70, 0x29, 0x25, 0xe7, 0xe7, 0xea, 0x55, 0x65, 0xa6, 0x95, 0xa4,
	0xe6, 0xe9, 0x15, 0xa7, 0x16, 0x95, 0xc1, 0x1c, 0x97, 0x9c, 0x9f, 0xa3, 0x07, 0x54, 0x55, 0x9c,
	0x98, 0x9e, 0xea, 0x24, 0x84, 0xe4, 0x22, 0x5f, 0x88, 0x18, 0x20, 0x00, 0x00, 0xff, 0xff, 0x38,
	0x71, 0x59, 0x92, 0xcf, 0x00, 0x00, 0x00,
}
