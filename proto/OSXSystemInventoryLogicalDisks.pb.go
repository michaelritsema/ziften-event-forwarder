// Code generated by protoc-gen-go.
// source: OSXSystemInventoryLogicalDisks.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OSXSystemInventoryLogicalDisks struct {
	// The UTC time that the message was produced by the agent. Time is what was reported by the client clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The unique identifier of the agent. This field is used by the server to distinguish agents.
	AgentGUID *string `protobuf:"bytes,2,req,name=agentGUID" json:"agentGUID,omitempty"`
	// Unique identifier for this message
	LogicalDrivesGUID *string `protobuf:"bytes,3,req,name=logicalDrivesGUID" json:"logicalDrivesGUID,omitempty"`
	// See WMI's Win32_LogicalDisk MOF for a detailed description the fields below
	DriveMapping []string `protobuf:"bytes,4,rep,name=driveMapping" json:"driveMapping,omitempty"`
	FreeSpace    []int64  `protobuf:"varint,5,rep,name=freeSpace" json:"freeSpace,omitempty"`
	Size         []int64  `protobuf:"varint,6,rep,name=size" json:"size,omitempty"`
	// The following two ID's will help uniquely tie a logical drive to the physical drive
	PnpDeviceID      []string `protobuf:"bytes,7,rep,name=pnpDeviceID" json:"pnpDeviceID,omitempty"`
	SerialNum        []string `protobuf:"bytes,8,rep,name=serialNum" json:"serialNum,omitempty"`
	SiteId           *string  `protobuf:"bytes,9,opt,name=siteId" json:"siteId,omitempty"`
	Uuid             *string  `protobuf:"bytes,10,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *OSXSystemInventoryLogicalDisks) Reset()                    { *m = OSXSystemInventoryLogicalDisks{} }
func (m *OSXSystemInventoryLogicalDisks) String() string            { return proto1.CompactTextString(m) }
func (*OSXSystemInventoryLogicalDisks) ProtoMessage()               {}
func (*OSXSystemInventoryLogicalDisks) Descriptor() ([]byte, []int) { return fileDescriptor58, []int{0} }

func (m *OSXSystemInventoryLogicalDisks) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *OSXSystemInventoryLogicalDisks) GetAgentGUID() string {
	if m != nil && m.AgentGUID != nil {
		return *m.AgentGUID
	}
	return ""
}

func (m *OSXSystemInventoryLogicalDisks) GetLogicalDrivesGUID() string {
	if m != nil && m.LogicalDrivesGUID != nil {
		return *m.LogicalDrivesGUID
	}
	return ""
}

func (m *OSXSystemInventoryLogicalDisks) GetDriveMapping() []string {
	if m != nil {
		return m.DriveMapping
	}
	return nil
}

func (m *OSXSystemInventoryLogicalDisks) GetFreeSpace() []int64 {
	if m != nil {
		return m.FreeSpace
	}
	return nil
}

func (m *OSXSystemInventoryLogicalDisks) GetSize() []int64 {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *OSXSystemInventoryLogicalDisks) GetPnpDeviceID() []string {
	if m != nil {
		return m.PnpDeviceID
	}
	return nil
}

func (m *OSXSystemInventoryLogicalDisks) GetSerialNum() []string {
	if m != nil {
		return m.SerialNum
	}
	return nil
}

func (m *OSXSystemInventoryLogicalDisks) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *OSXSystemInventoryLogicalDisks) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*OSXSystemInventoryLogicalDisks)(nil), "OSXSystemInventoryLogicalDisks")
}

var fileDescriptor58 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x69, 0x53, 0x6b, 0x33, 0x56, 0xa1, 0xab, 0xc8, 0xaa, 0x20, 0xa1, 0x28, 0x78, 0xca,
	0x43, 0x84, 0x80, 0x04, 0xad, 0x0a, 0x51, 0xf0, 0xba, 0x24, 0xd3, 0xb0, 0x98, 0x64, 0x97, 0x9d,
	0x4d, 0x20, 0xbd, 0xe9, 0x3b, 0xf9, 0x7e, 0x6e, 0x12, 0xc5, 0x5b, 0x8f, 0xf3, 0xf1, 0xfd, 0x3f,
	0x33, 0x03, 0x37, 0xcf, 0xe9, 0x7b, 0xda, 0x91, 0xc5, 0x2a, 0xa9, 0x5b, 0xac, 0xad, 0x32, 0xdd,
	0xa3, 0x2a, 0x64, 0x26, 0xca, 0x58, 0xd2, 0x07, 0x85, 0xda, 0x28, 0xab, 0x2e, 0xd9, 0x8b, 0x22,
	0x5b, 0x18, 0xa4, 0xd7, 0x4e, 0xe3, 0xc8, 0xd6, 0x9f, 0x53, 0xb8, 0xde, 0x1f, 0x66, 0x01, 0xf8,
	0x56, 0x56, 0x98, 0x5a, 0x51, 0x69, 0x3e, 0x09, 0xa6, 0x77, 0x5e, 0x74, 0xfc, 0xf5, 0xcd, 0x07,
	0x48, 0x3d, 0x64, 0x57, 0xe0, 0x8b, 0xc2, 0x25, 0xef, 0xdf, 0x92, 0x98, 0x4f, 0x9d, 0xe1, 0x47,
	0x0b, 0x67, 0xcc, 0x9a, 0x46, 0xe6, 0xec, 0x02, 0x56, 0xe5, 0x6f, 0x9d, 0x91, 0x2d, 0xd2, 0x20,
	0x79, 0xbd, 0xc4, 0xce, 0x60, 0x99, 0xf7, 0x6c, 0x23, 0xb4, 0x96, 0x75, 0xc1, 0x67, 0x81, 0xe7,
	0xe8, 0x0a, 0xfc, 0xad, 0x41, 0x4c, 0xb5, 0xc8, 0x90, 0x1f, 0x38, 0xe4, 0xb1, 0x25, 0xcc, 0x48,
	0xee, 0x90, 0xcf, 0x87, 0xe9, 0x14, 0x8e, 0x74, 0xad, 0x63, 0x6c, 0x65, 0x86, 0xae, 0xeb, 0xf0,
	0x2f, 0x45, 0x68, 0xa4, 0x28, 0x9f, 0x9a, 0x8a, 0x2f, 0x06, 0x74, 0x02, 0x73, 0x92, 0x16, 0x93,
	0x9c, 0xfb, 0xc1, 0xc4, 0xcd, 0xe7, 0x30, 0x6c, 0xc4, 0xa1, 0x9f, 0xfe, 0x37, 0x8c, 0x1e, 0x60,
	0x9d, 0xa9, 0x2a, 0xdc, 0xc9, 0xad, 0xc5, 0x3a, 0x74, 0x2d, 0x2d, 0x9a, 0xf1, 0x3d, 0x99, 0x2a,
	0x43, 0x77, 0x24, 0xb9, 0xeb, 0xa2, 0xdb, 0xfd, 0x6f, 0xda, 0x8c, 0xda, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc5, 0x4e, 0x4b, 0x37, 0x8b, 0x01, 0x00, 0x00,
}
