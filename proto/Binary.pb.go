// Code generated by protoc-gen-go.
// source: Binary.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Binary struct {
	// The UTC time that the message was produced by the senderTime is what was reported by the sender clock.
	TimeStamp *int64 `protobuf:"varint,1,req,name=timeStamp" json:"timeStamp,omitempty"`
	// The hostname of the sender.
	Hostname *string `protobuf:"bytes,2,req,name=hostname" json:"hostname,omitempty"`
	// The MD5 hash of the binary
	Md5 []string `protobuf:"bytes,3,rep,name=md5" json:"md5,omitempty"`
	// The MD5 metadata
	FileVersion      []string `protobuf:"bytes,4,rep,name=fileVersion" json:"fileVersion,omitempty"`
	FileDescription  []string `protobuf:"bytes,5,rep,name=fileDescription" json:"fileDescription,omitempty"`
	CompanyName      []string `protobuf:"bytes,6,rep,name=companyName" json:"companyName,omitempty"`
	ProductName      []string `protobuf:"bytes,7,rep,name=productName" json:"productName,omitempty"`
	InternalName     []string `protobuf:"bytes,8,rep,name=internalName" json:"internalName,omitempty"`
	LegalCopyright   []string `protobuf:"bytes,9,rep,name=legalCopyright" json:"legalCopyright,omitempty"`
	LegalTrademarks  []string `protobuf:"bytes,10,rep,name=legalTrademarks" json:"legalTrademarks,omitempty"`
	OriginalFilename []string `protobuf:"bytes,11,rep,name=originalFilename" json:"originalFilename,omitempty"`
	ProductVersion   []string `protobuf:"bytes,12,rep,name=productVersion" json:"productVersion,omitempty"`
	SiteId           *string  `protobuf:"bytes,13,opt,name=siteId" json:"siteId,omitempty"`
	Uuid             *string  `protobuf:"bytes,14,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Binary) Reset()                    { *m = Binary{} }
func (m *Binary) String() string            { return proto1.CompactTextString(m) }
func (*Binary) ProtoMessage()               {}
func (*Binary) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *Binary) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *Binary) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Binary) GetMd5() []string {
	if m != nil {
		return m.Md5
	}
	return nil
}

func (m *Binary) GetFileVersion() []string {
	if m != nil {
		return m.FileVersion
	}
	return nil
}

func (m *Binary) GetFileDescription() []string {
	if m != nil {
		return m.FileDescription
	}
	return nil
}

func (m *Binary) GetCompanyName() []string {
	if m != nil {
		return m.CompanyName
	}
	return nil
}

func (m *Binary) GetProductName() []string {
	if m != nil {
		return m.ProductName
	}
	return nil
}

func (m *Binary) GetInternalName() []string {
	if m != nil {
		return m.InternalName
	}
	return nil
}

func (m *Binary) GetLegalCopyright() []string {
	if m != nil {
		return m.LegalCopyright
	}
	return nil
}

func (m *Binary) GetLegalTrademarks() []string {
	if m != nil {
		return m.LegalTrademarks
	}
	return nil
}

func (m *Binary) GetOriginalFilename() []string {
	if m != nil {
		return m.OriginalFilename
	}
	return nil
}

func (m *Binary) GetProductVersion() []string {
	if m != nil {
		return m.ProductVersion
	}
	return nil
}

func (m *Binary) GetSiteId() string {
	if m != nil && m.SiteId != nil {
		return *m.SiteId
	}
	return ""
}

func (m *Binary) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func init() {
	proto1.RegisterType((*Binary)(nil), "Binary")
}

var fileDescriptor11 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x34, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x69, 0x53, 0x6b, 0x3b, 0x6d, 0x63, 0x89, 0xa2, 0x8b, 0xa7, 0xd0, 0x93, 0xa7, 0x5c,
	0xc4, 0x17, 0x88, 0x22, 0x78, 0x50, 0x04, 0x8b, 0xf7, 0x25, 0x99, 0xa6, 0x8b, 0xfb, 0x8f, 0xdd,
	0x8d, 0x10, 0x8f, 0xbe, 0x93, 0x2f, 0xe0, 0x93, 0xb9, 0x99, 0x98, 0xe3, 0xf7, 0x9b, 0x8f, 0x99,
	0xf9, 0x3e, 0x58, 0x97, 0x42, 0x73, 0xd7, 0x15, 0xd6, 0x99, 0x60, 0xae, 0xb3, 0x57, 0xe3, 0x43,
	0xe3, 0xd0, 0xef, 0x3b, 0x8b, 0x03, 0xdb, 0xfd, 0x4e, 0x61, 0x3e, 0x98, 0xb2, 0x1c, 0x96, 0x41,
	0x28, 0x7c, 0x0b, 0x5c, 0x59, 0x36, 0xc9, 0xa7, 0x37, 0x49, 0xb9, 0xf9, 0xfe, 0x61, 0x04, 0x7d,
	0x0f, 0xb3, 0x2d, 0x2c, 0x8e, 0x71, 0x85, 0xe6, 0x0a, 0xd9, 0x34, 0x1a, 0x96, 0xd9, 0x0a, 0x12,
	0x55, 0xdf, 0xb1, 0x24, 0x4f, 0xa2, 0x38, 0x87, 0xd5, 0x41, 0x48, 0x7c, 0x47, 0xe7, 0x85, 0xd1,
	0x6c, 0x46, 0xf0, 0x0a, 0xce, 0x7a, 0xf8, 0x80, 0xbe, 0x72, 0xc2, 0x86, 0x7e, 0x70, 0x32, 0xba,
	0x2b, 0xa3, 0x2c, 0xd7, 0xdd, 0x4b, 0xbf, 0x6f, 0x3e, 0xc2, 0xf8, 0x57, 0xdd, 0x56, 0x81, 0xe0,
	0x29, 0xc1, 0x0b, 0x58, 0x0b, 0x1d, 0xd0, 0x69, 0x2e, 0x89, 0x2e, 0x88, 0x5e, 0x42, 0x2a, 0xb1,
	0xe1, 0xf2, 0xde, 0xd8, 0xce, 0x89, 0xe6, 0x18, 0xd8, 0x72, 0x3c, 0x48, 0x7c, 0xef, 0x78, 0x8d,
	0x8a, 0xbb, 0x0f, 0xcf, 0x80, 0x06, 0x0c, 0xb6, 0x26, 0x1a, 0x63, 0x58, 0xf9, 0x18, 0x3f, 0xa2,
	0x14, 0xab, 0x71, 0xd5, 0xff, 0xd5, 0xf1, 0xf7, 0x35, 0xf1, 0x14, 0xe6, 0x5e, 0x04, 0x7c, 0xaa,
	0xd9, 0x26, 0x9f, 0x90, 0x6f, 0xd6, 0xb6, 0xa2, 0x66, 0x69, 0xaf, 0xca, 0x45, 0x2c, 0x87, 0x74,
	0x79, 0x0b, 0xbb, 0x18, 0xa5, 0xf8, 0x12, 0x87, 0x80, 0xba, 0xf0, 0xe8, 0x3e, 0xd1, 0x0d, 0xfd,
	0x56, 0x46, 0x16, 0xb1, 0x3d, 0xcf, 0x1b, 0x2c, 0x37, 0x43, 0xcf, 0xcf, 0x83, 0xfc, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xfe, 0xc9, 0x94, 0x24, 0x9c, 0x01, 0x00, 0x00,
}
